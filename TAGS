
app/models/host_map.rb,76
class HostMapHostMap1,0
  def HostMap.host_to_root(host)host_to_root4,0

app/controllers/application_controller.rb,79
class ApplicationController < ActionController::BaseApplicationController1,0

app/controllers/slide_file_controller.rb,380
class SlideFileController < ApplicationControllerSlideFileController4,0
  def setup_breadcrumbssetup_breadcrumbs7,0
  def requestsrequests19,0
  def previewpreview66,0
  def file_to_minetype(file)file_to_minetype70,0
  def is_image?(file_name)is_image?75,0
  def return_image(path, size)return_image79,0
  def build_target_path(path, folder)build_target_path100,0

app/helpers/application_helper.rb,47
module ApplicationHelperApplicationHelper1,0

test/test_helper.rb,101
class ActiveSupport::TestCaseTestCase5,0
class ActiveSupport::TestCaseActiveSupport::TestCase5,0

config/application.rb,182
module RailsImageBrowserRailsImageBrowser9,0
  class Application < Rails::ApplicationApplication10,0
  class Application < Rails::ApplicationRailsImageBrowser::Application10,0

lib/image_tools.rb,125
class ImageToolsImageTools1,0
  def ImageTools.scale(source_path, target_path, max_dimension, force_square=true)scale2,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/examples/simple.rb,45
class Person < ActiveRecord::BasePerson3,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/examples/performance.rb,1380
TIME    = (ENV["BENCHMARK_TIME"] || 20).to_iTIME4,0
RECORDS = (ENV["BENCHMARK_RECORDS"] || TIME * 1000).to_iRECORDS5,0
class User < ActiveRecord::BaseUser11,0
  has_many :exhibitsexhibits17,0
  has_many :exhibitsexhibits=17,0
  has_many :exhibitsexhibit_ids17,0
  has_many :exhibitsexhibit_ids=17,0
class Exhibit < ActiveRecord::BaseExhibit20,0
  belongs_to :useruser28,0
  belongs_to :useruser=28,0
  belongs_to :userbuild_user28,0
  belongs_to :usercreate_user28,0
  belongs_to :usercreate_user!28,0
  def look; attributes endlook30,0
  def feel; look; user.name endfeel31,0
  def self.with_namewith_name33,0
  def self.with_noteswith_notes37,0
  def self.look(exhibits) exhibits.each(&:look) endlook41,0
  def self.feel(exhibits) exhibits.each(&:feel) endfeel42,0
def progress_bar(int); print "." if (int % 100).zero? ; endprogress_bar45,0
module ActiveRecordActiveRecord49,0
  class FakerFaker50,0
  class FakerActiveRecord::Faker50,0
    LOREM = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse non aliquet diam. Curabitur vel urna metus, quis malesuada elit.LOREM51,0
    LOREM = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse non aliquet diam. Curabitur vel urna metus, quis malesuada elit.ActiveRecord::Faker::LOREM51,0
    def self.namename59,0
    def self.emailemail63,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/base.rb,109
module ActiveRecord #:nodoc:ActiveRecord25,0
  class BaseBase275,0
  class BaseActiveRecord::Base275,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/collection_cache_key.rb,267
module ActiveRecordActiveRecord1,0
  module CollectionCacheKeyCollectionCacheKey2,0
  module CollectionCacheKeyActiveRecord::CollectionCacheKey2,0
    def collection_cache_key(collection = all, timestamp_column = :updated_at) # :nodoc:collection_cache_key3,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/serialization.rb,206
module ActiveRecord #:nodoc:ActiveRecord1,0
  module SerializationSerialization3,0
  module SerializationActiveRecord::Serialization3,0
    def serializable_hash(options = nil)serializable_hash11,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/runtime_registry.rb,453
module ActiveRecordActiveRecord3,0
  class RuntimeRegistry # :nodoc:RuntimeRegistry12,0
  class RuntimeRegistry # :nodoc:ActiveRecord::RuntimeRegistry12,0
    attr_accessor :connection_handler, :sql_runtimeconnection_handler15,0
    attr_accessor :connection_handler, :sql_runtimeconnection_handler=15,0
    attr_accessor :connection_handler, :sql_runtimesql_runtime15,0
    attr_accessor :connection_handler, :sql_runtimesql_runtime=15,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/model_schema.rb,2448
module ActiveRecordActiveRecord3,0
  module ModelSchemaModelSchema4,0
  module ModelSchemaActiveRecord::ModelSchema4,0
    def self.derive_join_table_name(first_table, second_table) # :nodoc:derive_join_table_name137,0
    module ClassMethodsClassMethods141,0
    module ClassMethodsActiveRecord::ModelSchema::ClassMethods141,0
      def table_nametable_name186,0
      def table_name=(value)table_name=196,0
      def quoted_table_namequoted_table_name212,0
      def reset_table_name #:nodoc:reset_table_name217,0
      def full_table_name_prefix #:nodoc:full_table_name_prefix227,0
      def full_table_name_suffix #:nodoc:full_table_name_suffix231,0
      def protected_environmentsprotected_environments237,0
      def protected_environments=(environments)protected_environments=246,0
      def inheritance_columninheritance_column259,0
      def inheritance_column=(value)inheritance_column=264,0
      def ignored_columnsignored_columns271,0
      def ignored_columns=(columns)ignored_columns=281,0
      def sequence_namesequence_name285,0
      def reset_sequence_name #:nodoc:reset_sequence_name293,0
      def sequence_name=(value)sequence_name=312,0
      def prefetch_primary_key?prefetch_primary_key?319,0
      def next_sequence_valuenext_sequence_value325,0
      def table_exists?table_exists?330,0
      def attributes_builder # :nodoc:attributes_builder334,0
      def columns_hash # :nodoc:columns_hash342,0
      def columnscolumns347,0
      def attribute_types # :nodoc:attribute_types352,0
      def yaml_encoder # :nodoc:yaml_encoder357,0
      def type_for_attribute(attr_name, &block)type_for_attribute372,0
      def column_defaultscolumn_defaults382,0
      def _default_attributes # :nodoc:_default_attributes387,0
      def column_namescolumn_names392,0
      def content_columnscontent_columns398,0
      def reset_column_informationreset_column_information433,0
        def initialize_load_schema_monitorinitialize_load_schema_monitor444,0
        def inherited(child_class)inherited450,0
        def schema_loaded?schema_loaded?455,0
        def load_schemaload_schema459,0
        def load_schema!load_schema!470,0
        def reload_schema_from_cachereload_schema_from_cache482,0
        def undecorated_table_name(class_name = base_class.name)undecorated_table_name502,0
        def compute_table_namecompute_table_name508,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_decorators.rb,1002
module ActiveRecordActiveRecord1,0
  module AttributeDecorators # :nodoc:AttributeDecorators2,0
  module AttributeDecorators # :nodoc:ActiveRecord::AttributeDecorators2,0
    module ClassMethods # :nodoc:ClassMethods10,0
    module ClassMethods # :nodoc:ActiveRecord::AttributeDecorators::ClassMethods10,0
      def decorate_attribute_type(column_name, decorator_name, &block)decorate_attribute_type22,0
      def decorate_matching_attribute_types(matcher, decorator_name, &block)decorate_matching_attribute_types39,0
        def load_schema!load_schema!49,0
    class TypeDecorator # :nodoc:TypeDecorator58,0
    class TypeDecorator # :nodoc:ActiveRecord::AttributeDecorators::TypeDecorator58,0
      delegate :clear, to: :@decorationsclear59,0
      def initialize(decorations = {})initialize61,0
      def merge(*args)merge65,0
      def apply(name, type)apply69,0
        def decorators_for(name, type)decorators_for78,0
        def matching(name, type)matching82,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/explain.rb,296
module ActiveRecordActiveRecord3,0
  module ExplainExplain4,0
  module ExplainActiveRecord::Explain4,0
    def collecting_queries_for_explain # :nodoc:collecting_queries_for_explain7,0
    def exec_explain(queries) # :nodoc:exec_explain17,0
      def render_bind(attr)render_bind38,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/coders/json.rb,284
module ActiveRecordActiveRecord1,0
  module Coders # :nodoc:Coders2,0
  module Coders # :nodoc:ActiveRecord::Coders2,0
    class JSON # :nodoc:JSON3,0
    class JSON # :nodoc:ActiveRecord::Coders::JSON3,0
      def self.dump(obj)dump4,0
      def self.load(json)load8,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/coders/yaml_column.rb,611
module ActiveRecordActiveRecord3,0
  module Coders # :nodoc:Coders4,0
  module Coders # :nodoc:ActiveRecord::Coders4,0
    class YAMLColumn # :nodoc:YAMLColumn5,0
    class YAMLColumn # :nodoc:ActiveRecord::Coders::YAMLColumn5,0
      attr_accessor :object_classobject_class6,0
      attr_accessor :object_classobject_class=6,0
      def initialize(attr_name, object_class = Object)initialize8,0
      def dump(obj)dump14,0
      def load(yaml)load21,0
      def assert_valid_value(obj, action:)assert_valid_value32,0
        def check_arity_of_constructorcheck_arity_of_constructor41,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/schema.rb,298
module ActiveRecordActiveRecord1,0
  class Schema < Migration::CurrentSchema30,0
  class Schema < Migration::CurrentActiveRecord::Schema30,0
    def self.define(info = {}, &block)define43,0
    def define(info, &block) # :nodoc:define47,0
      def migrations_pathsmigrations_paths64,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/querying.rb,10039
module ActiveRecordActiveRecord1,0
  module QueryingQuerying2,0
  module QueryingActiveRecord::Querying2,0
    delegate :find, :take, :take!, :first, :first!, :last, :last!, :exists?, :any?, :many?, :none?, :one?, to: :allfind3,0
    delegate :find, :take, :take!, :first, :first!, :last, :last!, :exists?, :any?, :many?, :none?, :one?, to: :alltake3,0
    delegate :find, :take, :take!, :first, :first!, :last, :last!, :exists?, :any?, :many?, :none?, :one?, to: :alltake!3,0
    delegate :find, :take, :take!, :first, :first!, :last, :last!, :exists?, :any?, :many?, :none?, :one?, to: :allfirst3,0
    delegate :find, :take, :take!, :first, :first!, :last, :last!, :exists?, :any?, :many?, :none?, :one?, to: :allfirst!3,0
    delegate :find, :take, :take!, :first, :first!, :last, :last!, :exists?, :any?, :many?, :none?, :one?, to: :alllast3,0
    delegate :find, :take, :take!, :first, :first!, :last, :last!, :exists?, :any?, :many?, :none?, :one?, to: :alllast!3,0
    delegate :find, :take, :take!, :first, :first!, :last, :last!, :exists?, :any?, :many?, :none?, :one?, to: :allexists?3,0
    delegate :find, :take, :take!, :first, :first!, :last, :last!, :exists?, :any?, :many?, :none?, :one?, to: :allany?3,0
    delegate :find, :take, :take!, :first, :first!, :last, :last!, :exists?, :any?, :many?, :none?, :one?, to: :allmany?3,0
    delegate :find, :take, :take!, :first, :first!, :last, :last!, :exists?, :any?, :many?, :none?, :one?, to: :allnone?3,0
    delegate :find, :take, :take!, :first, :first!, :last, :last!, :exists?, :any?, :many?, :none?, :one?, to: :allone?3,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allsecond4,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allsecond!4,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allthird4,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allthird!4,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allfourth4,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allfourth!4,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allfifth4,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allfifth!4,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allforty_two4,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allforty_two!4,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allthird_to_last4,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allthird_to_last!4,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allsecond_to_last4,0
    delegate :second, :second!, :third, :third!, :fourth, :fourth!, :fifth, :fifth!, :forty_two, :forty_two!, :third_to_last, :third_to_last!, :second_to_last, :second_to_last!, to: :allsecond_to_last!4,0
    delegate :first_or_create, :first_or_create!, :first_or_initialize, to: :allfirst_or_create5,0
    delegate :first_or_create, :first_or_create!, :first_or_initialize, to: :allfirst_or_create!5,0
    delegate :first_or_create, :first_or_create!, :first_or_initialize, to: :allfirst_or_initialize5,0
    delegate :find_or_create_by, :find_or_create_by!, :find_or_initialize_by, to: :allfind_or_create_by6,0
    delegate :find_or_create_by, :find_or_create_by!, :find_or_initialize_by, to: :allfind_or_create_by!6,0
    delegate :find_or_create_by, :find_or_create_by!, :find_or_initialize_by, to: :allfind_or_initialize_by6,0
    delegate :find_by, :find_by!, to: :allfind_by7,0
    delegate :find_by, :find_by!, to: :allfind_by!7,0
    delegate :destroy, :destroy_all, :delete, :delete_all, :update, :update_all, to: :alldestroy8,0
    delegate :destroy, :destroy_all, :delete, :delete_all, :update, :update_all, to: :alldestroy_all8,0
    delegate :destroy, :destroy_all, :delete, :delete_all, :update, :update_all, to: :alldelete8,0
    delegate :destroy, :destroy_all, :delete, :delete_all, :update, :update_all, to: :alldelete_all8,0
    delegate :destroy, :destroy_all, :delete, :delete_all, :update, :update_all, to: :allupdate8,0
    delegate :destroy, :destroy_all, :delete, :delete_all, :update, :update_all, to: :allupdate_all8,0
    delegate :find_each, :find_in_batches, :in_batches, to: :allfind_each9,0
    delegate :find_each, :find_in_batches, :in_batches, to: :allfind_in_batches9,0
    delegate :find_each, :find_in_batches, :in_batches, to: :allin_batches9,0
    delegate :select, :group, :order, :except, :reorder, :limit, :offset, :joins, :left_joins, :left_outer_joins, :or,select10,0
    delegate :select, :group, :order, :except, :reorder, :limit, :offset, :joins, :left_joins, :left_outer_joins, :or,group10,0
    delegate :select, :group, :order, :except, :reorder, :limit, :offset, :joins, :left_joins, :left_outer_joins, :or,order10,0
    delegate :select, :group, :order, :except, :reorder, :limit, :offset, :joins, :left_joins, :left_outer_joins, :or,except10,0
    delegate :select, :group, :order, :except, :reorder, :limit, :offset, :joins, :left_joins, :left_outer_joins, :or,reorder10,0
    delegate :select, :group, :order, :except, :reorder, :limit, :offset, :joins, :left_joins, :left_outer_joins, :or,limit10,0
    delegate :select, :group, :order, :except, :reorder, :limit, :offset, :joins, :left_joins, :left_outer_joins, :or,offset10,0
    delegate :select, :group, :order, :except, :reorder, :limit, :offset, :joins, :left_joins, :left_outer_joins, :or,joins10,0
    delegate :select, :group, :order, :except, :reorder, :limit, :offset, :joins, :left_joins, :left_outer_joins, :or,left_joins10,0
    delegate :select, :group, :order, :except, :reorder, :limit, :offset, :joins, :left_joins, :left_outer_joins, :or,left_outer_joins10,0
    delegate :select, :group, :order, :except, :reorder, :limit, :offset, :joins, :left_joins, :left_outer_joins, :or,or10,0
             :where, :rewhere, :preload, :eager_load, :includes, :from, :lock, :readonly, :extending,where11,0
             :where, :rewhere, :preload, :eager_load, :includes, :from, :lock, :readonly, :extending,rewhere11,0
             :where, :rewhere, :preload, :eager_load, :includes, :from, :lock, :readonly, :extending,preload11,0
             :where, :rewhere, :preload, :eager_load, :includes, :from, :lock, :readonly, :extending,eager_load11,0
             :where, :rewhere, :preload, :eager_load, :includes, :from, :lock, :readonly, :extending,includes11,0
             :where, :rewhere, :preload, :eager_load, :includes, :from, :lock, :readonly, :extending,from11,0
             :where, :rewhere, :preload, :eager_load, :includes, :from, :lock, :readonly, :extending,lock11,0
             :where, :rewhere, :preload, :eager_load, :includes, :from, :lock, :readonly, :extending,readonly11,0
             :where, :rewhere, :preload, :eager_load, :includes, :from, :lock, :readonly, :extending,extending11,0
             :having, :create_with, :distinct, :references, :none, :unscope, :merge, to: :allhaving12,0
             :having, :create_with, :distinct, :references, :none, :unscope, :merge, to: :allcreate_with12,0
             :having, :create_with, :distinct, :references, :none, :unscope, :merge, to: :alldistinct12,0
             :having, :create_with, :distinct, :references, :none, :unscope, :merge, to: :allreferences12,0
             :having, :create_with, :distinct, :references, :none, :unscope, :merge, to: :allnone12,0
             :having, :create_with, :distinct, :references, :none, :unscope, :merge, to: :allunscope12,0
             :having, :create_with, :distinct, :references, :none, :unscope, :merge, to: :allmerge12,0
    delegate :count, :average, :minimum, :maximum, :sum, :calculate, to: :allcount13,0
    delegate :count, :average, :minimum, :maximum, :sum, :calculate, to: :allaverage13,0
    delegate :count, :average, :minimum, :maximum, :sum, :calculate, to: :allminimum13,0
    delegate :count, :average, :minimum, :maximum, :sum, :calculate, to: :allmaximum13,0
    delegate :count, :average, :minimum, :maximum, :sum, :calculate, to: :allsum13,0
    delegate :count, :average, :minimum, :maximum, :sum, :calculate, to: :allcalculate13,0
    delegate :pluck, :ids, to: :allpluck14,0
    delegate :pluck, :ids, to: :allids14,0
    def find_by_sql(sql, binds = [], preparable: nil, &block)find_by_sql38,0
    def count_by_sql(sql)count_by_sql64,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/schema_migration.rb,600
module ActiveRecordActiveRecord4,0
  class SchemaMigration < ActiveRecord::Base # :nodoc:SchemaMigration9,0
  class SchemaMigration < ActiveRecord::Base # :nodoc:ActiveRecord::SchemaMigration9,0
      def primary_keyprimary_key11,0
      def table_nametable_name15,0
      def table_exists?table_exists?19,0
      def create_tablecreate_table23,0
      def drop_tabledrop_table33,0
      def normalize_migration_number(number)normalize_migration_number37,0
      def normalized_versionsnormalized_versions41,0
      def all_versionsall_versions45,0
    def versionversion50,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/inheritance.rb,1325
module ActiveRecordActiveRecord3,0
  module InheritanceInheritance35,0
  module InheritanceActiveRecord::Inheritance35,0
    module ClassMethodsClassMethods45,0
    module ClassMethodsActiveRecord::Inheritance::ClassMethods45,0
      def new(*args, &block)new49,0
      def descends_from_active_record?descends_from_active_record?72,0
      def finder_needs_type_condition? #:nodoc:finder_needs_type_condition?82,0
      def base_classbase_class95,0
      attr_accessor :abstract_classabstract_class122,0
      attr_accessor :abstract_classabstract_class=122,0
      def abstract_class?abstract_class?125,0
      def sti_namesti_name129,0
      def inherited(subclass)inherited133,0
        def compute_type(type_name)compute_type142,0
        def discriminate_class_for_record(record)discriminate_class_for_record175,0
        def using_single_table_inheritance?(record)using_single_table_inheritance?183,0
        def find_sti_class(type_name)find_sti_class187,0
        def type_condition(table = arel_table)type_condition208,0
        def subclass_from_attributes(attrs)subclass_from_attributes217,0
    def initialize_dup(other)initialize_dup229,0
      def initialize_internals_callbackinitialize_internals_callback236,0
      def ensure_proper_typeensure_proper_type246,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/gem_version.rb,595
module ActiveRecordActiveRecord1,0
  def self.gem_versiongem_version3,0
  module VERSIONVERSION7,0
  module VERSIONActiveRecord::VERSION7,0
    MAJOR = 5MAJOR8,0
    MAJOR = 5ActiveRecord::VERSION::MAJOR8,0
    MINOR = 1MINOR9,0
    MINOR = 1ActiveRecord::VERSION::MINOR9,0
    TINY  = 5TINY10,0
    TINY  = 5ActiveRecord::VERSION::TINY10,0
    PRE   = nilPRE11,0
    PRE   = nilActiveRecord::VERSION::PRE11,0
    STRING = [MAJOR, MINOR, TINY, PRE].compact.join(".")STRING13,0
    STRING = [MAJOR, MINOR, TINY, PRE].compact.join(".")ActiveRecord::VERSION::STRING13,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/collection_proxy.rb,2063
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class CollectionProxy < RelationCollectionProxy30,0
    class CollectionProxy < RelationActiveRecord::Associations::CollectionProxy30,0
      def initialize(klass, association) #:nodoc:initialize31,0
      def targettarget39,0
      def load_targetload_target43,0
      def loaded?loaded?52,0
      def find(*args, &block)find136,0
      def last(limit = nil)last256,0
      def take(limit = nil)take286,0
      def build(attributes = {}, &block)build315,0
      alias_method :new, :buildnew318,0
      def create(attributes = {}, &block)create346,0
      def create!(attributes = {}, &block)create!362,0
      def concat(*records)concat390,0
      def replace(other_array)replace416,0
      def delete_all(dependent = nil)delete_all499,0
      def destroy_alldestroy_all526,0
      def delete(*records)delete645,0
      def destroy(*records)destroy717,0
      def uniquniq749,0
      def calculate(operation, column_name)calculate753,0
      def pluck(*column_names)pluck757,0
      def sizesize811,0
      def empty?empty?860,0
      def include?(record)include?951,0
      def proxy_associationproxy_association955,0
      def scopescope960,0
      def ==(other)==988,0
      def to_aryto_ary1025,0
      alias_method :to_a, :to_aryto_a1028,0
      def records # :nodoc:records1030,0
      def <<(*records)<<1054,0
      alias_method :push, :<<push1057,0
      alias_method :append, :<<append1058,0
      def prepend(*args)prepend1060,0
      def clearclear1070,0
      def reloadreload1093,0
      def resetreset1114,0
      def reset_scope # :nodoc:reset_scope1120,0
        def find_nth_with_limit(index, limit)find_nth_with_limit1137,0
        def find_nth_from_last(index)find_nth_from_last1142,0
        def null_scope?null_scope?1147,0
        def find_from_target?find_from_target?1151,0
        def exec_queriesexec_queries1155,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/preloader/has_many.rb,498
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class PreloaderPreloader3,0
    class PreloaderActiveRecord::Associations::Preloader3,0
      class HasMany < CollectionAssociation #:nodoc:HasMany4,0
      class HasMany < CollectionAssociation #:nodoc:ActiveRecord::Associations::Preloader::HasMany4,0
        def association_key_nameassociation_key_name5,0
        def owner_key_nameowner_key_name9,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/preloader/has_one_through.rb,414
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class PreloaderPreloader3,0
    class PreloaderActiveRecord::Associations::Preloader3,0
      class HasOneThrough < SingularAssociation #:nodoc:HasOneThrough4,0
      class HasOneThrough < SingularAssociation #:nodoc:ActiveRecord::Associations::Preloader::HasOneThrough4,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/preloader/has_one.rb,490
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class PreloaderPreloader3,0
    class PreloaderActiveRecord::Associations::Preloader3,0
      class HasOne < SingularAssociation #:nodoc:HasOne4,0
      class HasOne < SingularAssociation #:nodoc:ActiveRecord::Associations::Preloader::HasOne4,0
        def association_key_nameassociation_key_name5,0
        def owner_key_nameowner_key_name9,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/preloader/association.rb,1860
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class PreloaderPreloader3,0
    class PreloaderActiveRecord::Associations::Preloader3,0
      class Association #:nodoc:Association4,0
      class Association #:nodoc:ActiveRecord::Associations::Preloader::Association4,0
        attr_reader :owners, :reflection, :preload_scope, :model, :klassowners5,0
        attr_reader :owners, :reflection, :preload_scope, :model, :klassreflection5,0
        attr_reader :owners, :reflection, :preload_scope, :model, :klasspreload_scope5,0
        attr_reader :owners, :reflection, :preload_scope, :model, :klassmodel5,0
        attr_reader :owners, :reflection, :preload_scope, :model, :klassklass5,0
        attr_reader :preloaded_recordspreloaded_records6,0
        def initialize(klass, owners, reflection, preload_scope)initialize8,0
        def run(preloader)run18,0
        def preload(preloader)preload22,0
        def scopescope26,0
        def records_for(ids)records_for30,0
        def tabletable34,0
        def association_key_nameassociation_key_name39,0
        def association_keyassociation_key45,0
        def owner_key_nameowner_key_name50,0
        def optionsoptions54,0
          def associated_records_by_owner(preloader)associated_records_by_owner60,0
          def owner_keysowner_keys72,0
          def owners_by_keyowners_by_key83,0
          def key_conversion_required?key_conversion_required?92,0
          def convert_key(key)convert_key100,0
          def association_key_typeassociation_key_type108,0
          def owner_key_typeowner_key_type112,0
          def load_records(&block)load_records116,0
          def reflection_scopereflection_scope129,0
          def build_scopebuild_scope133,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/preloader/belongs_to.rb,502
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class PreloaderPreloader3,0
    class PreloaderActiveRecord::Associations::Preloader3,0
      class BelongsTo < SingularAssociation #:nodoc:BelongsTo4,0
      class BelongsTo < SingularAssociation #:nodoc:ActiveRecord::Associations::Preloader::BelongsTo4,0
        def association_key_nameassociation_key_name5,0
        def owner_key_nameowner_key_name9,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/preloader/through_association.rb,863
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class PreloaderPreloader3,0
    class PreloaderActiveRecord::Associations::Preloader3,0
      module ThroughAssociation #:nodoc:ThroughAssociation4,0
      module ThroughAssociation #:nodoc:ActiveRecord::Associations::Preloader::ThroughAssociation4,0
        def through_reflectionthrough_reflection5,0
        def source_reflectionsource_reflection9,0
        def associated_records_by_owner(preloader)associated_records_by_owner13,0
          def id_to_index_map(ids)id_to_index_map64,0
          def reset_association(owners, association_name)reset_association70,0
          def through_scopethrough_scope82,0
          def target_records_from_association(association)target_records_from_association109,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/preloader/has_many_through.rb,505
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class PreloaderPreloader3,0
    class PreloaderActiveRecord::Associations::Preloader3,0
      class HasManyThrough < CollectionAssociation #:nodoc:HasManyThrough4,0
      class HasManyThrough < CollectionAssociation #:nodoc:ActiveRecord::Associations::Preloader::HasManyThrough4,0
        def associated_records_by_owner(preloader)associated_records_by_owner7,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/preloader/collection_association.rb,475
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class PreloaderPreloader3,0
    class PreloaderActiveRecord::Associations::Preloader3,0
      class CollectionAssociation < Association #:nodoc:CollectionAssociation4,0
      class CollectionAssociation < Association #:nodoc:ActiveRecord::Associations::Preloader::CollectionAssociation4,0
          def preload(preloader)preload7,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/preloader/singular_association.rb,467
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class PreloaderPreloader3,0
    class PreloaderActiveRecord::Associations::Preloader3,0
      class SingularAssociation < Association #:nodoc:SingularAssociation4,0
      class SingularAssociation < Association #:nodoc:ActiveRecord::Associations::Preloader::SingularAssociation4,0
          def preload(preloader)preload7,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/join_dependency/join_base.rb,540
module ActiveRecordActiveRecord3,0
  module AssociationsAssociations4,0
  module AssociationsActiveRecord::Associations4,0
    class JoinDependency # :nodoc:JoinDependency5,0
    class JoinDependency # :nodoc:ActiveRecord::Associations::JoinDependency5,0
      class JoinBase < JoinPart # :nodoc:JoinBase6,0
      class JoinBase < JoinPart # :nodoc:ActiveRecord::Associations::JoinDependency::JoinBase6,0
        def match?(other)match?7,0
        def tabletable12,0
        def aliased_table_namealiased_table_name16,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/join_dependency/join_part.rb,1176
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class JoinDependency # :nodoc:JoinDependency3,0
    class JoinDependency # :nodoc:ActiveRecord::Associations::JoinDependency3,0
      class JoinPart # :nodoc:JoinPart10,0
      class JoinPart # :nodoc:ActiveRecord::Associations::JoinDependency::JoinPart10,0
        attr_reader :base_klass, :childrenbase_klass16,0
        attr_reader :base_klass, :childrenchildren16,0
        delegate :table_name, :column_names, :primary_key, to: :base_klasstable_name18,0
        delegate :table_name, :column_names, :primary_key, to: :base_klasscolumn_names18,0
        delegate :table_name, :column_names, :primary_key, to: :base_klassprimary_key18,0
        def initialize(base_klass, children)initialize20,0
        def namename25,0
        def match?(other)match?29,0
        def each(&block)each33,0
        def tabletable39,0
        def aliased_table_namealiased_table_name44,0
        def extract_record(row, column_names_with_alias)extract_record48,0
        def instantiate(row, aliases, &block)instantiate65,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/join_dependency/join_association.rb,1174
module ActiveRecordActiveRecord3,0
  module AssociationsAssociations4,0
  module AssociationsActiveRecord::Associations4,0
    class JoinDependency # :nodoc:JoinDependency5,0
    class JoinDependency # :nodoc:ActiveRecord::Associations::JoinDependency5,0
      class JoinAssociation < JoinPart # :nodoc:JoinAssociation6,0
      class JoinAssociation < JoinPart # :nodoc:ActiveRecord::Associations::JoinDependency::JoinAssociation6,0
        attr_reader :reflectionreflection8,0
        attr_accessor :tablestables10,0
        attr_accessor :tablestables=10,0
        def initialize(reflection, children)initialize12,0
        def match?(other)match?19,0
        JoinInformation = Struct.new :joins, :bindsJoinInformation24,0
        JoinInformation = Struct.new :joins, :bindsActiveRecord::Associations::JoinDependency::JoinAssociation::JoinInformation24,0
        def join_constraints(foreign_table, foreign_klass, join_type, tables, chain)join_constraints26,0
        def build_constraint(klass, table, key, foreign_table, foreign_key)build_constraint82,0
        def tabletable95,0
        def aliased_table_namealiased_table_name99,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/foreign_association.rb,320
module ActiveRecord::AssociationsAssociations1,0
module ActiveRecord::AssociationsActiveRecord::Associations1,0
  module ForeignAssociation # :nodoc:ForeignAssociation2,0
  module ForeignAssociation # :nodoc:ActiveRecord::Associations::ForeignAssociation2,0
    def foreign_key_present?foreign_key_present?3,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/belongs_to_association.rb,1232
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations3,0
  module AssociationsActiveRecord::Associations3,0
    class BelongsToAssociation < SingularAssociation #:nodoc:BelongsToAssociation4,0
    class BelongsToAssociation < SingularAssociation #:nodoc:ActiveRecord::Associations::BelongsToAssociation4,0
      def handle_dependencyhandle_dependency5,0
      def replace(record)replace9,0
      def default(&block)default24,0
      def resetreset28,0
      def updated?updated?33,0
      def decrement_counters # :nodoc:decrement_counters37,0
      def increment_counters # :nodoc:increment_counters41,0
        def update_counters(by)update_counters47,0
        def find_target?find_target?57,0
        def require_counter_update?require_counter_update?61,0
        def update_counters_on_replace(record)update_counters_on_replace65,0
        def different_target?(record)different_target?74,0
        def replace_keys(record)replace_keys78,0
        def remove_keysremove_keys82,0
        def foreign_key_present?foreign_key_present?86,0
        def invertible_for?(record)invertible_for?92,0
        def target_idtarget_id97,0
        def stale_statestale_state105,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/association_scope.rb,1825
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class AssociationScope #:nodoc:AssociationScope3,0
    class AssociationScope #:nodoc:ActiveRecord::Associations::AssociationScope3,0
      def self.scope(association, connection)scope4,0
      def self.create(&block)create8,0
      def initialize(value_transformation)initialize13,0
      INSTANCE = createINSTANCE17,0
      INSTANCE = createActiveRecord::Associations::AssociationScope::INSTANCE17,0
      def scope(association, connection)scope19,0
      def join_typejoin_type31,0
      def self.get_bind_values(owner, chain)get_bind_values35,0
        attr_reader :value_transformationvalue_transformation56,0
        def join(table, constraint)join59,0
        def last_chain_scope(scope, table, reflection, owner)last_chain_scope63,0
        def transform_value(value)transform_value79,0
        def next_chain_scope(scope, table, reflection, foreign_table, next_reflection)next_chain_scope83,0
        class ReflectionProxy < SimpleDelegator # :nodoc:ReflectionProxy98,0
        class ReflectionProxy < SimpleDelegator # :nodoc:ActiveRecord::Associations::AssociationScope::ReflectionProxy98,0
          attr_accessor :nextnext99,0
          attr_accessor :nextnext=99,0
          attr_reader :alias_namealias_name100,0
          def initialize(reflection, alias_name)initialize102,0
          def all_includes; nil; endall_includes107,0
        def get_chain(reflection, association, tracker)get_chain110,0
        def add_constraints(scope, owner, refl, chain_head, chain_tail)add_constraints127,0
        def apply_scope(scope, table, key, value)apply_scope166,0
        def eval_scope(klass, table, scope, owner)eval_scope174,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/association.rb,2317
module ActiveRecordActiveRecord3,0
  module AssociationsAssociations4,0
  module AssociationsActiveRecord::Associations4,0
    class Association #:nodoc:Association18,0
    class Association #:nodoc:ActiveRecord::Associations::Association18,0
      attr_reader :owner, :target, :reflectionowner19,0
      attr_reader :owner, :target, :reflectiontarget19,0
      attr_reader :owner, :target, :reflectionreflection19,0
      attr_accessor :inversedinversed20,0
      attr_accessor :inversedinversed=20,0
      delegate :options, to: :reflectionoptions22,0
      def initialize(owner, reflection)initialize24,0
      def aliased_table_namealiased_table_name37,0
      def resetreset42,0
      def reloadreload50,0
      def loaded?loaded?58,0
      def loaded!loaded!63,0
      def stale_target?stale_target?75,0
      def target=(target)target=80,0
      def scopescope85,0
      def association_scopeassociation_scope95,0
      def reset_scopereset_scope101,0
      def set_inverse_instance(record)set_inverse_instance106,0
      def remove_inverse_instance(record)remove_inverse_instance116,0
      def klassklass126,0
      def target_scopetarget_scope132,0
      def extensionsextensions136,0
      def load_targetload_target156,0
      def interpolate(sql, record = nil)interpolate165,0
      def marshal_dumpmarshal_dump174,0
      def marshal_load(data)marshal_load179,0
      def initialize_attributes(record, except_from_scope_attributes = nil) #:nodoc:initialize_attributes185,0
      def create(attributes = {}, &block)create195,0
      def create!(attributes = {}, &block)create!199,0
        def find_target?find_target?205,0
        def creation_attributescreation_attributes209,0
        def set_owner_attributes(record)set_owner_attributes224,0
        def foreign_key_present?foreign_key_present?236,0
        def raise_on_type_mismatch!(record)raise_on_type_mismatch!243,0
        def inverse_reflection_for(record)inverse_reflection_for257,0
        def invertible_for?(record)invertible_for?263,0
        def foreign_key_for?(record)foreign_key_for?268,0
        def stale_statestale_state277,0
        def build_record(attributes)build_record280,0
        def skip_statement_cache?skip_statement_cache?287,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/has_one_through_association.rb,450
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations3,0
  module AssociationsActiveRecord::Associations3,0
    class HasOneThroughAssociation < HasOneAssociation #:nodoc:HasOneThroughAssociation4,0
    class HasOneThroughAssociation < HasOneAssociation #:nodoc:ActiveRecord::Associations::HasOneThroughAssociation4,0
      def replace(record)replace7,0
        def create_through_record(record)create_through_record14,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/join_dependency.rb,2501
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class JoinDependency # :nodoc:JoinDependency3,0
    class JoinDependency # :nodoc:ActiveRecord::Associations::JoinDependency3,0
      class Aliases # :nodoc:Aliases7,0
      class Aliases # :nodoc:ActiveRecord::Associations::JoinDependency::Aliases7,0
        def initialize(tables)initialize8,0
        def columnscolumns22,0
        def column_aliases(node)column_aliases27,0
        def column_alias(node, column)column_alias31,0
        Table = Struct.new(:node, :columns) do # :nodoc:Table35,0
        Table = Struct.new(:node, :columns) do # :nodoc:ActiveRecord::Associations::JoinDependency::Aliases::Table35,0
          def tabletable36,0
          def column_aliasescolumn_aliases40,0
        Column = Struct.new(:name, :alias)Column45,0
        Column = Struct.new(:name, :alias)ActiveRecord::Associations::JoinDependency::Aliases::Column45,0
      attr_reader :alias_tracker, :base_klass, :join_rootalias_tracker48,0
      attr_reader :alias_tracker, :base_klass, :join_rootbase_klass48,0
      attr_reader :alias_tracker, :base_klass, :join_rootjoin_root48,0
      def self.make_tree(associations)make_tree50,0
      def self.walk_tree(associations, hash)walk_tree56,0
      def initialize(base, associations, joins, eager_loading: true)initialize95,0
      def reflectionsreflections103,0
      def join_constraints(outer_joins, join_type)join_constraints107,0
      def aliasesaliases128,0
      def instantiate(result_set, &block)instantiate137,0
        def make_constraints(parent, child, tables, join_type)make_constraints170,0
        def make_outer_joins(parent, child)make_outer_joins177,0
        def make_left_outer_joins(parent, child)make_left_outer_joins185,0
        def make_inner_joins(parent, child)make_inner_joins193,0
        def table_aliases_for(parent, node)table_aliases_for201,0
        def construct_tables!(parent, node)construct_tables!211,0
        def table_alias_for(reflection, parent, join)table_alias_for216,0
        def walk(left, right)walk222,0
        def find_reflection(klass, name)find_reflection231,0
        def build(associations, base_klass)build236,0
        def construct(ar_parent, parent, row, rs, seen, model_cache, aliases)construct251,0
        def construct_model(record, node, row, model_cache, id, aliases)construct_model289,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/has_one_association.rb,720
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations3,0
  module AssociationsActiveRecord::Associations3,0
    class HasOneAssociation < SingularAssociation #:nodoc:HasOneAssociation4,0
    class HasOneAssociation < SingularAssociation #:nodoc:ActiveRecord::Associations::HasOneAssociation4,0
      def handle_dependencyhandle_dependency7,0
      def replace(record, save = true)replace24,0
      def delete(method = options[:dependent])delete53,0
        def set_new_record(record)set_new_record73,0
        def remove_target!(method)remove_target!77,0
        def nullify_owner_attributes(record)nullify_owner_attributes96,0
        def transaction_if(value)transaction_if100,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/through_association.rb,847
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations3,0
  module AssociationsActiveRecord::Associations3,0
    module ThroughAssociation #:nodoc:ThroughAssociation4,0
    module ThroughAssociation #:nodoc:ActiveRecord::Associations::ThroughAssociation4,0
      delegate :source_reflection, :through_reflection, to: :reflectionsource_reflection5,0
      delegate :source_reflection, :through_reflection, to: :reflectionthrough_reflection5,0
        def target_scopetarget_scope13,0
        def construct_join_attributes(*records)construct_join_attributes36,0
        def stale_statestale_state64,0
        def foreign_key_present?foreign_key_present?70,0
        def ensure_mutableensure_mutable74,0
        def ensure_not_nestedensure_not_nested84,0
        def build_record(attributes)build_record94,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/has_many_association.rb,1160
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations3,0
  module AssociationsActiveRecord::Associations3,0
    class HasManyAssociation < CollectionAssociation #:nodoc:HasManyAssociation8,0
    class HasManyAssociation < CollectionAssociation #:nodoc:ActiveRecord::Associations::HasManyAssociation8,0
      def handle_dependencyhandle_dependency11,0
      def insert_record(record, validate = true, raise = false)insert_record32,0
      def empty?empty?37,0
        def count_recordscount_records60,0
        def update_counter(difference, reflection = reflection())update_counter75,0
        def update_counter_in_memory(difference, reflection = reflection())update_counter_in_memory81,0
        def delete_count(method, scope)delete_count89,0
        def delete_or_nullify_all_records(method)delete_or_nullify_all_records97,0
        def delete_records(records, method)delete_records103,0
        def concat_records(records, *)concat_records113,0
        def _create_record(attributes, *)_create_record117,0
        def update_counter_if_success(saved_successfully, difference)update_counter_if_success125,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/collection_association.rb,2363
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class CollectionAssociation < Association #:nodoc:CollectionAssociation26,0
    class CollectionAssociation < Association #:nodoc:ActiveRecord::Associations::CollectionAssociation26,0
      def readerreader28,0
      def writer(records)writer38,0
      def ids_readerids_reader43,0
      def ids_writer(ids)ids_writer52,0
      def resetreset69,0
      def find(*args)find74,0
      def build(attributes = {}, &block)build95,0
      def concat(*records)concat108,0
      def transaction(*args)transaction127,0
      def delete_all(dependent = nil)delete_all146,0
      def destroy_alldestroy_all168,0
      def delete(*records)delete182,0
      def destroy(*records)destroy193,0
      def sizesize209,0
      def empty?empty?230,0
      def replace(other_array)replace240,0
      def include?(record)include?256,0
      def load_targetload_target268,0
      def add_to_target(record, skip_callbacks = false, &block)add_to_target277,0
      def scopescope284,0
      def null_scope?null_scope?290,0
      def find_from_target?find_from_target?294,0
        def find_targetfind_target302,0
        def merge_target_lists(persisted, memory)merge_target_lists329,0
        def _create_record(attributes, raise = false, &block)_create_record349,0
        def insert_record(record, validate = true, raise = false, &block)insert_record367,0
        def create_scopecreate_scope375,0
        def delete_or_destroy(records, method)delete_or_destroy379,0
        def remove_records(existing_records, records, method)remove_records391,0
        def delete_records(records, method)delete_records403,0
        def replace_records(new_target, original_target)replace_records407,0
        def replace_common_records_in_memory(new_target, original_target)replace_common_records_in_memory419,0
        def concat_records(records, raise = false)concat_records427,0
        def replace_on_target(record, index, skip_callbacks)replace_on_target440,0
        def callback(method, record)callback462,0
        def callbacks_for(callback_name)callbacks_for468,0
        def include_in_memory?(record)include_in_memory?473,0
        def find_by_scan(*args)find_by_scan487,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/builder/has_many.rb,466
module ActiveRecord::Associations::Builder # :nodoc:Builder1,0
module ActiveRecord::Associations::Builder # :nodoc:ActiveRecord::Associations::Builder1,0
  class HasMany < CollectionAssociation #:nodoc:HasMany2,0
  class HasMany < CollectionAssociation #:nodoc:ActiveRecord::Associations::Builder::HasMany2,0
    def self.macromacro3,0
    def self.valid_options(options)valid_options7,0
    def self.valid_dependent_optionsvalid_dependent_options11,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/builder/has_and_belongs_to_many.rb,1568
module ActiveRecord::Associations::Builder # :nodoc:Builder1,0
module ActiveRecord::Associations::Builder # :nodoc:ActiveRecord::Associations::Builder1,0
  class HasAndBelongsToMany # :nodoc:HasAndBelongsToMany2,0
  class HasAndBelongsToMany # :nodoc:ActiveRecord::Associations::Builder::HasAndBelongsToMany2,0
    class JoinTableResolver # :nodoc:JoinTableResolver3,0
    class JoinTableResolver # :nodoc:ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver3,0
      KnownTable = Struct.new :join_tableKnownTable4,0
      KnownTable = Struct.new :join_tableActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownTable4,0
      class KnownClass # :nodoc:KnownClass6,0
      class KnownClass # :nodoc:ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownClass6,0
        def initialize(lhs_class, rhs_class_name)initialize7,0
        def join_tablejoin_table13,0
          def klassklass19,0
      def self.build(lhs_class, name, options)build24,0
    attr_reader :lhs_model, :association_name, :optionslhs_model36,0
    attr_reader :lhs_model, :association_name, :optionsassociation_name36,0
    attr_reader :lhs_model, :association_name, :optionsoptions36,0
    def initialize(association_name, lhs_model, options)initialize38,0
    def through_modelthrough_model44,0
    def middle_reflection(join_model)middle_reflection95,0
      def middle_options(join_model)middle_options108,0
      def belongs_to_options(options)belongs_to_options118,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/builder/has_one.rb,614
module ActiveRecord::Associations::Builder # :nodoc:Builder1,0
module ActiveRecord::Associations::Builder # :nodoc:ActiveRecord::Associations::Builder1,0
  class HasOne < SingularAssociation #:nodoc:HasOne2,0
  class HasOne < SingularAssociation #:nodoc:ActiveRecord::Associations::Builder::HasOne2,0
    def self.macromacro3,0
    def self.valid_options(options)valid_options7,0
    def self.valid_dependent_optionsvalid_dependent_options13,0
    def self.add_destroy_callbacks(model, reflection)add_destroy_callbacks17,0
    def self.define_validations(model, reflection)define_validations21,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/builder/association.rb,1716
module ActiveRecord::Associations::Builder # :nodoc:Builder12,0
module ActiveRecord::Associations::Builder # :nodoc:ActiveRecord::Associations::Builder12,0
  class Association #:nodoc:Association13,0
  class Association #:nodoc:ActiveRecord::Associations::Builder::Association13,0
      attr_accessor :extensionsextensions15,0
      attr_accessor :extensionsextensions=15,0
    VALID_OPTIONS = [:class_name, :anonymous_class, :foreign_key, :validate] # :nodoc:VALID_OPTIONS19,0
    VALID_OPTIONS = [:class_name, :anonymous_class, :foreign_key, :validate] # :nodoc:ActiveRecord::Associations::Builder::Association::VALID_OPTIONS19,0
    def self.build(model, name, scope, options, &block)build21,0
    def self.create_reflection(model, name, scope, options, extension = nil)create_reflection36,0
    def self.build_scope(scope, extension)build_scope51,0
    def self.wrap_scope(scope, extension)wrap_scope65,0
    def self.macromacro69,0
    def self.valid_options(options)valid_options73,0
    def self.validate_options(options)validate_options77,0
    def self.define_extensions(model, name)define_extensions81,0
    def self.define_callbacks(model, reflection)define_callbacks84,0
    def self.define_accessors(model, reflection)define_accessors101,0
    def self.define_readers(mixin, name)define_readers108,0
    def self.define_writers(mixin, name)define_writers116,0
    def self.define_validations(model, reflection)define_validations124,0
    def self.valid_dependent_optionsvalid_dependent_options128,0
    def self.check_dependent_options(dependent)check_dependent_options132,0
    def self.add_destroy_callbacks(model, reflection)add_destroy_callbacks138,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/builder/belongs_to.rb,1206
module ActiveRecord::Associations::Builder # :nodoc:Builder1,0
module ActiveRecord::Associations::Builder # :nodoc:ActiveRecord::Associations::Builder1,0
  class BelongsTo < SingularAssociation #:nodoc:BelongsTo2,0
  class BelongsTo < SingularAssociation #:nodoc:ActiveRecord::Associations::Builder::BelongsTo2,0
    def self.macromacro3,0
    def self.valid_options(options)valid_options7,0
    def self.valid_dependent_optionsvalid_dependent_options11,0
    def self.define_callbacks(model, reflection)define_callbacks15,0
    def self.define_accessors(mixin, reflection)define_accessors22,0
    def self.add_counter_cache_methods(mixin)add_counter_cache_methods27,0
    def self.add_counter_cache_callbacks(model, reflection)add_counter_cache_callbacks63,0
    def self.touch_record(o, changes, foreign_key, name, touch, touch_method) # :nodoc:touch_record74,0
    def self.add_touch_callbacks(model, reflection)add_touch_callbacks108,0
    def self.add_default_callbacks(model, reflection)add_default_callbacks126,0
    def self.add_destroy_callbacks(model, reflection)add_destroy_callbacks132,0
    def self.define_validations(model, reflection)define_validations136,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/builder/collection_association.rb,1040
module ActiveRecord::Associations::Builder # :nodoc:Builder5,0
module ActiveRecord::Associations::Builder # :nodoc:ActiveRecord::Associations::Builder5,0
  class CollectionAssociation < Association #:nodoc:CollectionAssociation6,0
  class CollectionAssociation < Association #:nodoc:ActiveRecord::Associations::Builder::CollectionAssociation6,0
    CALLBACKS = [:before_add, :after_add, :before_remove, :after_remove]CALLBACKS7,0
    CALLBACKS = [:before_add, :after_add, :before_remove, :after_remove]ActiveRecord::Associations::Builder::CollectionAssociation::CALLBACKS7,0
    def self.valid_options(options)valid_options9,0
    def self.define_callbacks(model, reflection)define_callbacks14,0
    def self.define_extensions(model, name)define_extensions23,0
    def self.define_callback(model, callback_name, name, options)define_callback31,0
    def self.define_readers(mixin, name)define_readers50,0
    def self.define_writers(mixin, name)define_writers60,0
    def self.wrap_scope(scope, mod)wrap_scope70,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/builder/singular_association.rb,540
module ActiveRecord::Associations::Builder # :nodoc:Builder3,0
module ActiveRecord::Associations::Builder # :nodoc:ActiveRecord::Associations::Builder3,0
  class SingularAssociation < Association #:nodoc:SingularAssociation4,0
  class SingularAssociation < Association #:nodoc:ActiveRecord::Associations::Builder::SingularAssociation4,0
    def self.valid_options(options)valid_options5,0
    def self.define_accessors(model, reflection)define_accessors9,0
    def self.define_constructors(mixin, name)define_constructors24,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/singular_association.rb,735
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class SingularAssociation < Association #:nodoc:SingularAssociation3,0
    class SingularAssociation < Association #:nodoc:ActiveRecord::Associations::SingularAssociation3,0
      def readerreader5,0
      def writer(record)writer14,0
      def build(attributes = {})build18,0
      def force_reload_readerforce_reload_reader27,0
        def create_scopecreate_scope34,0
        def find_targetfind_target38,0
        def replace(record)replace57,0
        def set_new_record(record)set_new_record61,0
        def _create_record(attributes, raise_error = false)_create_record65,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/alias_tracker.rb,722
module ActiveRecordActiveRecord3,0
  module AssociationsAssociations4,0
  module AssociationsActiveRecord::Associations4,0
    class AliasTracker # :nodoc:AliasTracker6,0
    class AliasTracker # :nodoc:ActiveRecord::Associations::AliasTracker6,0
      attr_reader :aliasesaliases7,0
      def self.create(connection, initial_table)create9,0
      def self.create_with_joins(connection, initial_table, joins)create_with_joins15,0
      def self.initial_count_for(connection, name, table_joins)initial_count_for27,0
      def initialize(connection, aliases)initialize56,0
      def aliased_table_for(table_name, aliased_name, type_caster)aliased_table_for61,0
        def truncate(name)truncate84,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/preloader.rb,1882
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations2,0
  module AssociationsActiveRecord::Associations2,0
    class Preloader #:nodoc:Preloader41,0
    class Preloader #:nodoc:ActiveRecord::Associations::Preloader41,0
      NULL_RELATION = Struct.new(:values, :where_clause, :joins_values).new({}, Relation::WhereClause.empty, [])NULL_RELATION57,0
      NULL_RELATION = Struct.new(:values, :where_clause, :joins_values).new({}, Relation::WhereClause.empty, [])ActiveRecord::Associations::Preloader::NULL_RELATION57,0
      def preload(records, associations, preload_scope = nil)preload93,0
        def preloaders_on(association, records, scope)preloaders_on110,0
        def preloaders_for_hash(association, records, scope)preloaders_for_hash123,0
        def preloaders_for_one(association, records, scope)preloaders_for_one147,0
        def grouped_records(association, records)grouped_records157,0
        class AlreadyLoaded # :nodoc:AlreadyLoaded168,0
        class AlreadyLoaded # :nodoc:ActiveRecord::Associations::Preloader::AlreadyLoaded168,0
          attr_reader :owners, :reflectionowners169,0
          attr_reader :owners, :reflectionreflection169,0
          def initialize(klass, owners, reflection, preload_scope)initialize171,0
          def run(preloader); endrun176,0
          def preloaded_recordspreloaded_records178,0
        class NullPreloader # :nodoc:NullPreloader183,0
        class NullPreloader # :nodoc:ActiveRecord::Associations::Preloader::NullPreloader183,0
          def self.new(klass, owners, reflection, preload_scope); self; endnew184,0
          def self.run(preloader); endrun185,0
          def self.preloaded_records; []; endpreloaded_records186,0
          def self.owners; []; endowners187,0
        def preloader_for(reflection, owners, rhs_klass)preloader_for194,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/belongs_to_polymorphic_association.rb,741
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations3,0
  module AssociationsActiveRecord::Associations3,0
    class BelongsToPolymorphicAssociation < BelongsToAssociation #:nodoc:BelongsToPolymorphicAssociation4,0
    class BelongsToPolymorphicAssociation < BelongsToAssociation #:nodoc:ActiveRecord::Associations::BelongsToPolymorphicAssociation4,0
      def klassklass5,0
        def replace_keys(record)replace_keys12,0
        def remove_keysremove_keys17,0
        def different_target?(record)different_target?22,0
        def inverse_reflection_for(record)inverse_reflection_for26,0
        def raise_on_type_mismatch!(record)raise_on_type_mismatch!30,0
        def stale_statestale_state34,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations/has_many_through_association.rb,1609
module ActiveRecordActiveRecord1,0
  module AssociationsAssociations3,0
  module AssociationsActiveRecord::Associations3,0
    class HasManyThroughAssociation < HasManyAssociation #:nodoc:HasManyThroughAssociation4,0
    class HasManyThroughAssociation < HasManyAssociation #:nodoc:ActiveRecord::Associations::HasManyThroughAssociation4,0
      def initialize(owner, reflection)initialize7,0
      def concat(*records)concat14,0
      def concat_records(records)concat_records24,0
      def insert_record(record, validate = true, raise = false)insert_record38,0
        def through_associationthrough_association52,0
        def build_through_record(record)build_through_record61,0
        def options_for_through_recordoptions_for_through_record76,0
        def through_scope_attributesthrough_scope_attributes80,0
        def save_through_record(record)save_through_record86,0
        def build_record(attributes)build_record95,0
        def remove_records(existing_records, records, method)remove_records112,0
        def target_reflection_has_associated_record?target_reflection_has_associated_record?117,0
        def update_through_counter?(method)update_through_counter?121,0
        def delete_or_nullify_all_records(method)delete_or_nullify_all_records132,0
        def delete_records(records, method)delete_records136,0
        def through_records_for(record)through_records_for177,0
        def delete_through_records(records)delete_through_records187,0
        def find_targetfind_target203,0
        def invertible_for?(record)invertible_for?209,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/sanitization.rb,1561
module ActiveRecordActiveRecord1,0
  module SanitizationSanitization2,0
  module SanitizationActiveRecord::Sanitization2,0
    module ClassMethodsClassMethods5,0
    module ClassMethodsActiveRecord::Sanitization::ClassMethods5,0
        def sanitize_sql_for_conditions(condition) # :doc:sanitize_sql_for_conditions22,0
        alias :sanitize_sql :sanitize_sql_for_conditionssanitize_sql30,0
        alias :sanitize_conditions :sanitize_sqlsanitize_conditions31,0
        def sanitize_sql_for_assignment(assignments, default_table_name = table_name) # :doc:sanitize_sql_for_assignment48,0
        def sanitize_sql_for_order(condition) # :doc:sanitize_sql_for_order64,0
        def expand_hash_conditions_for_aggregates(attrs) # :doc:expand_hash_conditions_for_aggregates87,0
        def sanitize_sql_hash_for_assignment(attrs, table) # :doc:sanitize_sql_hash_for_assignment110,0
        def sanitize_sql_like(string, escape_character = "\\") # :doc:sanitize_sql_like132,0
        def sanitize_sql_array(ary) # :doc:sanitize_sql_array148,0
        def replace_bind_variables(statement, values)replace_bind_variables161,0
        def replace_bind_variable(value, c = connection)replace_bind_variable170,0
        def replace_named_bind_variables(statement, bind_vars)replace_named_bind_variables178,0
        def quote_bound_value(value, c = connection)quote_bound_value190,0
        def raise_if_bind_arity_mismatch(statement, expected, provided)raise_if_bind_arity_mismatch202,0
    def quoted_id # :nodoc:quoted_id209,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/suppressor.rb,563
module ActiveRecordActiveRecord1,0
  module SuppressorSuppressor28,0
  module SuppressorActiveRecord::Suppressor28,0
    module ClassMethodsClassMethods31,0
    module ClassMethodsActiveRecord::Suppressor::ClassMethods31,0
      def suppress(&block)suppress32,0
    def save(*) # :nodoc:save41,0
    def save!(*) # :nodoc:save!45,0
  class SuppressorRegistry # :nodoc:SuppressorRegistry50,0
  class SuppressorRegistry # :nodoc:ActiveRecord::SuppressorRegistry50,0
    attr_reader :suppressedsuppressed53,0
    def initializeinitialize55,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_methods.rb,3101
module ActiveRecordActiveRecord6,0
  module AttributeMethodsAttributeMethods8,0
  module AttributeMethodsActiveRecord::AttributeMethods8,0
    AttrNames = Module.new {AttrNames26,0
    AttrNames = Module.new {ActiveRecord::AttributeMethods::AttrNames26,0
    BLACKLISTED_CLASS_METHODS = %w(private public protected allocate new name parent superclass)BLACKLISTED_CLASS_METHODS35,0
    BLACKLISTED_CLASS_METHODS = %w(private public protected allocate new name parent superclass)ActiveRecord::AttributeMethods::BLACKLISTED_CLASS_METHODS35,0
    class GeneratedAttributeMethods < Module; end # :nodoc:GeneratedAttributeMethods37,0
    class GeneratedAttributeMethods < Module; end # :nodoc:ActiveRecord::AttributeMethods::GeneratedAttributeMethods37,0
    module ClassMethodsClassMethods39,0
    module ClassMethodsActiveRecord::AttributeMethods::ClassMethods39,0
      def inherited(child_class) #:nodoc:inherited40,0
      def initialize_generated_modules # :nodoc:initialize_generated_modules45,0
      def define_attribute_methods # :nodoc:define_attribute_methods55,0
      def undefine_attribute_methods # :nodoc:undefine_attribute_methods68,0
      def instance_method_already_implemented?(method_name)instance_method_already_implemented?89,0
      def dangerous_attribute_method?(name) # :nodoc:dangerous_attribute_method?107,0
      def method_defined_within?(name, klass, superklass = klass.superclass) # :nodoc:method_defined_within?111,0
      def dangerous_class_method?(method_name)dangerous_class_method?125,0
      def class_method_defined_within?(name, klass, superklass = klass.superclass) # :nodoc:class_method_defined_within?129,0
      def attribute_method?(attribute)attribute_method?150,0
      def attribute_namesattribute_names162,0
      def has_attribute?(attr_name)has_attribute?178,0
      def column_for_attribute(name)column_for_attribute195,0
    def respond_to?(name, include_private = false)respond_to?219,0
    def has_attribute?(attr_name)has_attribute?251,0
    def attribute_namesattribute_names263,0
    def attributesattributes275,0
    def attribute_for_inspect(attr_name)attribute_for_inspect295,0
    def attribute_present?(attribute)attribute_present?322,0
    def [](attr_name)[]344,0
    def []=(attr_name, value)[]=358,0
    def accessed_fieldsaccessed_fields391,0
      def attribute_method?(attr_name) # :nodoc:attribute_method?397,0
      def arel_attributes_with_values_for_create(attribute_names)arel_attributes_with_values_for_create404,0
      def arel_attributes_with_values_for_update(attribute_names)arel_attributes_with_values_for_update408,0
      def arel_attributes_with_values(attribute_names)arel_attributes_with_values414,0
      def attributes_for_update(attribute_names)attributes_for_update425,0
      def attributes_for_create(attribute_names)attributes_for_create433,0
      def readonly_attribute?(name)readonly_attribute?439,0
      def pk_attribute?(name)pk_attribute?443,0
      def typecasted_attribute_value(name)typecasted_attribute_value447,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/fixtures.rb,5971
module ActiveRecordActiveRecord10,0
  class FixtureClassNotFound < ActiveRecord::ActiveRecordError #:nodoc:FixtureClassNotFound11,0
  class FixtureClassNotFound < ActiveRecord::ActiveRecordError #:nodoc:ActiveRecord::FixtureClassNotFound11,0
  class FixtureSetFixtureSet412,0
  class FixtureSetActiveRecord::FixtureSet412,0
    MAX_ID = 2**30 - 1MAX_ID418,0
    MAX_ID = 2**30 - 1ActiveRecord::FixtureSet::MAX_ID418,0
    def self.default_fixture_model_name(fixture_set_name, config = ActiveRecord::Base) # :nodoc:default_fixture_model_name422,0
    def self.default_fixture_table_name(fixture_set_name, config = ActiveRecord::Base) # :nodoc:default_fixture_table_name428,0
    def self.reset_cachereset_cache434,0
    def self.cache_for_connection(connection)cache_for_connection438,0
    def self.fixture_is_cached?(connection, table_name)fixture_is_cached?442,0
    def self.cached_fixtures(connection, keys_to_fetch = nil)cached_fixtures446,0
    def self.cache_fixtures(connection, fixtures_map)cache_fixtures454,0
    def self.instantiate_fixtures(object, fixture_set, load_instances = true)instantiate_fixtures458,0
    def self.instantiate_all_loaded_fixtures(object, load_instances = true)instantiate_all_loaded_fixtures470,0
    cattr_accessor :all_loaded_fixturesall_loaded_fixtures476,0
    cattr_accessor :all_loaded_fixturesall_loaded_fixtures=476,0
    class ClassCacheClassCache479,0
    class ClassCacheActiveRecord::FixtureSet::ClassCache479,0
      def initialize(class_names, config)initialize480,0
      def [](fs_name)[]488,0
        def insert_class(class_names, name, klass)insert_class497,0
        def default_fixture_model(fs_name, config)default_fixture_model506,0
    def self.create_fixtures(fixtures_directory, fixture_set_names, class_names = {}, config = ActiveRecord::Base)create_fixtures511,0
    def self.identify(label, column_type = :integer)identify572,0
    def self.context_classcontext_class581,0
    def self.update_all_loaded_fixtures(fixtures_map) # :nodoc:update_all_loaded_fixtures585,0
    attr_reader :table_name, :name, :fixtures, :model_class, :configtable_name589,0
    attr_reader :table_name, :name, :fixtures, :model_class, :configname589,0
    attr_reader :table_name, :name, :fixtures, :model_class, :configfixtures589,0
    attr_reader :table_name, :name, :fixtures, :model_class, :configmodel_class589,0
    attr_reader :table_name, :name, :fixtures, :model_class, :configconfig589,0
    def initialize(connection, name, class_name, path, config = ActiveRecord::Base)initialize591,0
    def [](x)[]607,0
    def []=(k, v)[]=611,0
    def each(&block)each615,0
    def sizesize619,0
    def table_rowstable_rows625,0
    class ReflectionProxy # :nodoc:ReflectionProxy698,0
    class ReflectionProxy # :nodoc:ActiveRecord::FixtureSet::ReflectionProxy698,0
      def initialize(association)initialize699,0
      def join_tablejoin_table703,0
      def namename707,0
      def primary_key_typeprimary_key_type711,0
    class HasManyThroughProxy < ReflectionProxy # :nodoc:HasManyThroughProxy716,0
    class HasManyThroughProxy < ReflectionProxy # :nodoc:ActiveRecord::FixtureSet::HasManyThroughProxy716,0
      def rhs_keyrhs_key717,0
      def lhs_keylhs_key721,0
      def join_tablejoin_table725,0
      def primary_key_nameprimary_key_name731,0
      def primary_key_typeprimary_key_type735,0
      def add_join_records(rows, row, association)add_join_records739,0
      def has_primary_key_column?has_primary_key_column?755,0
      def timestamp_column_namestimestamp_column_names760,0
      def inheritance_column_nameinheritance_column_name765,0
      def column_namescolumn_names769,0
      def model_class=(class_name)model_class=773,0
      def read_fixture_files(path)read_fixture_files784,0
      def yaml_file_path(path)yaml_file_path799,0
  class Fixture #:nodoc:Fixture804,0
  class Fixture #:nodoc:ActiveRecord::Fixture804,0
    class FixtureError < StandardError #:nodoc:FixtureError807,0
    class FixtureError < StandardError #:nodoc:ActiveRecord::Fixture::FixtureError807,0
    class FormatError < FixtureError #:nodoc:FormatError810,0
    class FormatError < FixtureError #:nodoc:ActiveRecord::Fixture::FormatError810,0
    attr_reader :model_class, :fixturemodel_class813,0
    attr_reader :model_class, :fixturefixture813,0
    def initialize(fixture, model_class)initialize815,0
    def class_nameclass_name820,0
    def eacheach824,0
    def [](key)[]828,0
    alias :to_hash :fixtureto_hash832,0
    def findfind834,0
module ActiveRecordActiveRecord846,0
  module TestFixturesTestFixtures847,0
  module TestFixturesActiveRecord::TestFixtures847,0
    def before_setup # :nodoc:before_setup850,0
    def after_teardown # :nodoc:after_teardown855,0
    module ClassMethodsClassMethods878,0
    module ClassMethodsActiveRecord::TestFixtures::ClassMethods878,0
      def set_fixture_class(class_names = {})set_fixture_class887,0
      def fixtures(*fixture_set_names)fixtures891,0
      def setup_fixture_accessors(fixture_set_names = nil)setup_fixture_accessors903,0
      def uses_transaction(*methods)uses_transaction934,0
      def uses_transaction?(method)uses_transaction?939,0
    def run_in_transaction?run_in_transaction?945,0
    def setup_fixtures(config = ActiveRecord::Base)setup_fixtures950,0
    def teardown_fixturesteardown_fixtures1006,0
    def enlist_fixture_connectionsenlist_fixture_connections1022,0
      def load_fixtures(config)load_fixtures1027,0
      def instantiate_fixturesinstantiate_fixtures1032,0
      def load_instances?load_instances?1044,0
class ActiveRecord::FixtureSet::RenderContext # :nodoc:RenderContext1050,0
class ActiveRecord::FixtureSet::RenderContext # :nodoc:ActiveRecord::FixtureSet::RenderContext1050,0
  def self.create_subclasscreate_subclass1051,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/tasks/database_tasks.rb,4679
module ActiveRecordActiveRecord1,0
  module Tasks # :nodoc:Tasks2,0
  module Tasks # :nodoc:ActiveRecord::Tasks2,0
    class DatabaseAlreadyExists < StandardError; end # :nodoc:DatabaseAlreadyExists3,0
    class DatabaseAlreadyExists < StandardError; end # :nodoc:ActiveRecord::Tasks::DatabaseAlreadyExists3,0
    class DatabaseNotSupported < StandardError; end # :nodoc:DatabaseNotSupported4,0
    class DatabaseNotSupported < StandardError; end # :nodoc:ActiveRecord::Tasks::DatabaseNotSupported4,0
    module DatabaseTasksDatabaseTasks35,0
    module DatabaseTasksActiveRecord::Tasks::DatabaseTasks35,0
      mattr_accessor :structure_dump_flags, instance_accessor: falsestructure_dump_flags39,0
      mattr_accessor :structure_dump_flags, instance_accessor: falsestructure_dump_flags=39,0
      mattr_accessor :structure_dump_flags, instance_accessor: false[:assoc, ["instance_accessor:", 39], [["false", 39]]]39,0
      mattr_accessor :structure_dump_flags, instance_accessor: false[:assoc, ["instance_accessor:", 39], [["false", 39]]]=39,0
      mattr_accessor :structure_load_flags, instance_accessor: falsestructure_load_flags44,0
      mattr_accessor :structure_load_flags, instance_accessor: falsestructure_load_flags=44,0
      mattr_accessor :structure_load_flags, instance_accessor: false[:assoc, ["instance_accessor:", 44], [["false", 44]]]44,0
      mattr_accessor :structure_load_flags, instance_accessor: false[:assoc, ["instance_accessor:", 44], [["false", 44]]]=44,0
      attr_writer :current_config, :db_dir, :migrations_paths, :fixtures_path, :root, :env, :seed_loadercurrent_config=48,0
      attr_writer :current_config, :db_dir, :migrations_paths, :fixtures_path, :root, :env, :seed_loaderdb_dir=48,0
      attr_writer :current_config, :db_dir, :migrations_paths, :fixtures_path, :root, :env, :seed_loadermigrations_paths=48,0
      attr_writer :current_config, :db_dir, :migrations_paths, :fixtures_path, :root, :env, :seed_loaderfixtures_path=48,0
      attr_writer :current_config, :db_dir, :migrations_paths, :fixtures_path, :root, :env, :seed_loaderroot=48,0
      attr_writer :current_config, :db_dir, :migrations_paths, :fixtures_path, :root, :env, :seed_loaderenv=48,0
      attr_writer :current_config, :db_dir, :migrations_paths, :fixtures_path, :root, :env, :seed_loaderseed_loader=48,0
      attr_accessor :database_configurationdatabase_configuration49,0
      attr_accessor :database_configurationdatabase_configuration=49,0
      LOCAL_HOSTS = ["127.0.0.1", "localhost"]LOCAL_HOSTS51,0
      LOCAL_HOSTS = ["127.0.0.1", "localhost"]ActiveRecord::Tasks::DatabaseTasks::LOCAL_HOSTS51,0
      def check_protected_environments!check_protected_environments!53,0
      def register_task(pattern, task)register_task69,0
      def db_dirdb_dir78,0
      def migrations_pathsmigrations_paths82,0
      def fixtures_pathfixtures_path86,0
      def rootroot94,0
      def envenv98,0
      def seed_loaderseed_loader102,0
      def current_config(options = {})current_config106,0
      def create(*arguments)create115,0
      def create_allcreate_all127,0
      def create_current(environment = env)create_current135,0
      def drop(*arguments)drop142,0
      def drop_alldrop_all154,0
      def drop_current(environment = env)drop_current158,0
      def migratemigrate164,0
      def charset_current(environment = env)charset_current179,0
      def charset(*arguments)charset183,0
      def collation_current(environment = env)collation_current188,0
      def collation(*arguments)collation192,0
      def purge(configuration)purge197,0
      def purge_allpurge_all201,0
      def purge_current(environment = env)purge_current207,0
      def structure_dump(*arguments)structure_dump214,0
      def structure_load(*arguments)structure_load220,0
      def load_schema(configuration, format = ActiveRecord::Base.schema_format, file = nil, environment = env) # :nodoc:load_schema226,0
      def schema_file(format = ActiveRecord::Base.schema_format)schema_file244,0
      def load_schema_current(format = ActiveRecord::Base.schema_format, file = nil, environment = env)load_schema_current253,0
      def check_schema_file(filename)check_schema_file260,0
      def load_seedload_seed268,0
      def dump_schema_cache(conn, filename)dump_schema_cache282,0
        def class_for_adapter(adapter)class_for_adapter290,0
        def each_current_configuration(environment)each_current_configuration298,0
        def each_local_configurationeach_local_configuration309,0
        def local_database?(configuration)local_database?321,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/tasks/postgresql_database_tasks.rb,1894
module ActiveRecordActiveRecord3,0
  module Tasks # :nodoc:Tasks4,0
  module Tasks # :nodoc:ActiveRecord::Tasks4,0
    class PostgreSQLDatabaseTasks # :nodoc:PostgreSQLDatabaseTasks5,0
    class PostgreSQLDatabaseTasks # :nodoc:ActiveRecord::Tasks::PostgreSQLDatabaseTasks5,0
      DEFAULT_ENCODING = ENV["CHARSET"] || "utf8"DEFAULT_ENCODING6,0
      DEFAULT_ENCODING = ENV["CHARSET"] || "utf8"ActiveRecord::Tasks::PostgreSQLDatabaseTasks::DEFAULT_ENCODING6,0
      ON_ERROR_STOP_1 = "ON_ERROR_STOP=1".freezeON_ERROR_STOP_17,0
      ON_ERROR_STOP_1 = "ON_ERROR_STOP=1".freezeActiveRecord::Tasks::PostgreSQLDatabaseTasks::ON_ERROR_STOP_17,0
      SQL_COMMENT_BEGIN = "--".freezeSQL_COMMENT_BEGIN8,0
      SQL_COMMENT_BEGIN = "--".freezeActiveRecord::Tasks::PostgreSQLDatabaseTasks::SQL_COMMENT_BEGIN8,0
      delegate :connection, :establish_connection, :clear_active_connections!,connection10,0
      delegate :connection, :establish_connection, :clear_active_connections!,establish_connection10,0
      delegate :connection, :establish_connection, :clear_active_connections!,clear_active_connections!10,0
      def initialize(configuration)initialize13,0
      def create(master_established = false)create17,0
      def dropdrop30,0
      def charsetcharset35,0
      def collationcollation39,0
      def purgepurge43,0
      def structure_dump(filename, extra_flags)structure_dump49,0
      def structure_load(filename, extra_flags)structure_load75,0
        def configurationconfiguration85,0
        def encodingencoding89,0
        def establish_master_connectionestablish_master_connection93,0
        def set_psql_envset_psql_env100,0
        def run_cmd(cmd, args, action)run_cmd107,0
        def run_cmd_error(cmd, args, action)run_cmd_error111,0
        def remove_sql_header_comments(filename)remove_sql_header_comments118,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/tasks/sqlite_database_tasks.rb,877
module ActiveRecordActiveRecord1,0
  module Tasks # :nodoc:Tasks2,0
  module Tasks # :nodoc:ActiveRecord::Tasks2,0
    class SQLiteDatabaseTasks # :nodoc:SQLiteDatabaseTasks3,0
    class SQLiteDatabaseTasks # :nodoc:ActiveRecord::Tasks::SQLiteDatabaseTasks3,0
      delegate :connection, :establish_connection, to: ActiveRecord::Baseconnection4,0
      delegate :connection, :establish_connection, to: ActiveRecord::Baseestablish_connection4,0
      def initialize(configuration, root = ActiveRecord::Tasks::DatabaseTasks.root)initialize6,0
      def createcreate10,0
      def dropdrop17,0
      def purgepurge27,0
      def charsetcharset34,0
      def structure_dump(filename, extra_flags)structure_dump38,0
      def structure_load(filename, extra_flags)structure_load44,0
        def configurationconfiguration52,0
        def rootroot56,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/tasks/mysql_database_tasks.rb,1529
module ActiveRecordActiveRecord1,0
  module Tasks # :nodoc:Tasks2,0
  module Tasks # :nodoc:ActiveRecord::Tasks2,0
    class MySQLDatabaseTasks # :nodoc:MySQLDatabaseTasks3,0
    class MySQLDatabaseTasks # :nodoc:ActiveRecord::Tasks::MySQLDatabaseTasks3,0
      ACCESS_DENIED_ERROR = 1045ACCESS_DENIED_ERROR4,0
      ACCESS_DENIED_ERROR = 1045ActiveRecord::Tasks::MySQLDatabaseTasks::ACCESS_DENIED_ERROR4,0
      delegate :connection, :establish_connection, to: ActiveRecord::Baseconnection6,0
      delegate :connection, :establish_connection, to: ActiveRecord::Baseestablish_connection6,0
      def initialize(configuration)initialize8,0
      def createcreate12,0
      def dropdrop38,0
      def purgepurge43,0
      def charsetcharset48,0
      def collationcollation52,0
      def structure_dump(filename, extra_flags)structure_dump56,0
      def structure_load(filename, extra_flags)structure_load68,0
        def configurationconfiguration79,0
        def configuration_without_databaseconfiguration_without_database83,0
        def creation_optionscreation_options87,0
        def error_classerror_class94,0
        def grant_statementgrant_statement105,0
        def root_configuration_without_databaseroot_configuration_without_database113,0
        def root_passwordroot_password120,0
        def prepare_command_optionsprepare_command_options125,0
        def run_cmd(cmd, args, action)run_cmd143,0
        def run_cmd_error(cmd, args, action)run_cmd_error147,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/aggregations.rb,711
module ActiveRecordActiveRecord1,0
  module AggregationsAggregations3,0
  module AggregationsActiveRecord::Aggregations3,0
    def initialize_dup(*) # :nodoc:initialize_dup6,0
    def reload(*) # :nodoc:reload11,0
      def clear_aggregation_cacheclear_aggregation_cache18,0
      def init_internalsinit_internals22,0
      module ClassMethodsClassMethods182,0
      module ClassMethodsActiveRecord::Aggregations::ClassMethods182,0
        def composed_of(part_id, options = {})composed_of224,0
          def reader_method(name, class_name, mapping, allow_nil, constructor)reader_method243,0
          def writer_method(name, class_name, mapping, allow_nil, converter)writer_method256,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/merger.rb,1247
module ActiveRecordActiveRecord3,0
  class RelationRelation4,0
  class RelationActiveRecord::Relation4,0
    class HashMerger # :nodoc:HashMerger5,0
    class HashMerger # :nodoc:ActiveRecord::Relation::HashMerger5,0
      attr_reader :relation, :hashrelation6,0
      attr_reader :relation, :hashhash6,0
      def initialize(relation, hash)initialize8,0
      def merge #:nodoc:merge15,0
      def otherother23,0
    class Merger # :nodoc:Merger42,0
    class Merger # :nodoc:ActiveRecord::Relation::Merger42,0
      attr_reader :relation, :values, :otherrelation43,0
      attr_reader :relation, :values, :othervalues43,0
      attr_reader :relation, :values, :otherother43,0
      def initialize(relation, other)initialize45,0
      NORMAL_VALUES = Relation::VALUE_METHODS -NORMAL_VALUES51,0
      NORMAL_VALUES = Relation::VALUE_METHODS -ActiveRecord::Relation::Merger::NORMAL_VALUES51,0
      def normal_valuesnormal_values55,0
      def mergemerge59,0
        def merge_preloadsmerge_preloads86,0
        def merge_joinsmerge_joins107,0
        def merge_multi_valuesmerge_multi_values131,0
        def merge_single_valuesmerge_single_values143,0
        def merge_clausesmerge_clauses154,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/query_attribute.rb,415
module ActiveRecordActiveRecord3,0
  class RelationRelation4,0
  class RelationActiveRecord::Relation4,0
    class QueryAttribute < Attribute # :nodoc:QueryAttribute5,0
    class QueryAttribute < Attribute # :nodoc:ActiveRecord::Relation::QueryAttribute5,0
      def type_cast(value)type_cast6,0
      def value_for_databasevalue_for_database10,0
      def with_cast_value(value)with_cast_value14,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/delegation.rb,3978
module ActiveRecordActiveRecord1,0
  module Delegation # :nodoc:Delegation2,0
  module Delegation # :nodoc:ActiveRecord::Delegation2,0
    module DelegateCache # :nodoc:DelegateCache3,0
    module DelegateCache # :nodoc:ActiveRecord::Delegation::DelegateCache3,0
      def relation_delegate_class(klass)relation_delegate_class4,0
      def initialize_relation_delegate_cacheinitialize_relation_delegate_cache8,0
      def inherited(child_class)inherited26,0
    delegate :to_xml, :encode_with, :length, :each, :uniq, :to_ary, :join,to_xml39,0
    delegate :to_xml, :encode_with, :length, :each, :uniq, :to_ary, :join,encode_with39,0
    delegate :to_xml, :encode_with, :length, :each, :uniq, :to_ary, :join,length39,0
    delegate :to_xml, :encode_with, :length, :each, :uniq, :to_ary, :join,each39,0
    delegate :to_xml, :encode_with, :length, :each, :uniq, :to_ary, :join,uniq39,0
    delegate :to_xml, :encode_with, :length, :each, :uniq, :to_ary, :join,to_ary39,0
    delegate :to_xml, :encode_with, :length, :each, :uniq, :to_ary, :join,join39,0
             :[], :&, :|, :+, :-, :sample, :reverse, :compact, :in_groups, :in_groups_of,[]40,0
             :[], :&, :|, :+, :-, :sample, :reverse, :compact, :in_groups, :in_groups_of,&40,0
             :[], :&, :|, :+, :-, :sample, :reverse, :compact, :in_groups, :in_groups_of,|40,0
             :[], :&, :|, :+, :-, :sample, :reverse, :compact, :in_groups, :in_groups_of,+40,0
             :[], :&, :|, :+, :-, :sample, :reverse, :compact, :in_groups, :in_groups_of,-40,0
             :[], :&, :|, :+, :-, :sample, :reverse, :compact, :in_groups, :in_groups_of,sample40,0
             :[], :&, :|, :+, :-, :sample, :reverse, :compact, :in_groups, :in_groups_of,reverse40,0
             :[], :&, :|, :+, :-, :sample, :reverse, :compact, :in_groups, :in_groups_of,compact40,0
             :[], :&, :|, :+, :-, :sample, :reverse, :compact, :in_groups, :in_groups_of,in_groups40,0
             :[], :&, :|, :+, :-, :sample, :reverse, :compact, :in_groups, :in_groups_of,in_groups_of40,0
             :to_sentence, :to_formatted_s, :as_json,to_sentence41,0
             :to_sentence, :to_formatted_s, :as_json,to_formatted_s41,0
             :to_sentence, :to_formatted_s, :as_json,as_json41,0
             :shuffle, :split, :index, to: :recordsshuffle42,0
             :shuffle, :split, :index, to: :recordssplit42,0
             :shuffle, :split, :index, to: :recordsindex42,0
    delegate :table_name, :quoted_table_name, :primary_key, :quoted_primary_key,table_name44,0
    delegate :table_name, :quoted_table_name, :primary_key, :quoted_primary_key,quoted_table_name44,0
    delegate :table_name, :quoted_table_name, :primary_key, :quoted_primary_key,primary_key44,0
    delegate :table_name, :quoted_table_name, :primary_key, :quoted_primary_key,quoted_primary_key44,0
             :connection, :columns_hash, to: :klassconnection45,0
             :connection, :columns_hash, to: :klasscolumns_hash45,0
    module ClassSpecificRelation # :nodoc:ClassSpecificRelation47,0
    module ClassSpecificRelation # :nodoc:ActiveRecord::Delegation::ClassSpecificRelation47,0
      module ClassMethods # :nodoc:ClassMethods54,0
      module ClassMethods # :nodoc:ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods54,0
        def namename55,0
        def delegate_to_scoped_klass(method)delegate_to_scoped_klass59,0
        def delegate(method, opts = {})delegate77,0
        def method_missing(method, *args, &block)method_missing87,0
    module ClassMethods # :nodoc:ClassMethods100,0
    module ClassMethods # :nodoc:ActiveRecord::Delegation::ClassMethods100,0
      def create(klass, *args)create101,0
        def relation_class_for(klass)relation_class_for107,0
    def respond_to_missing?(method, include_private = false)respond_to_missing?112,0
      def method_missing(method, *args, &block)method_missing119,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/batches.rb,849
module ActiveRecordActiveRecord3,0
  module BatchesBatches4,0
  module BatchesActiveRecord::Batches4,0
    ORDER_IGNORE_MESSAGE = "Scoped order is ignored, it's forced to be batch order."ORDER_IGNORE_MESSAGE5,0
    ORDER_IGNORE_MESSAGE = "Scoped order is ignored, it's forced to be batch order."ActiveRecord::Batches::ORDER_IGNORE_MESSAGE5,0
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil)find_each60,0
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil)find_in_batches119,0
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil)in_batches194,0
      def apply_limits(relation, start, finish)apply_limits252,0
      def batch_orderbatch_order258,0
      def act_on_ignored_order(error_on_ignore)act_on_ignored_order262,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/record_fetch_warning.rb,546
module ActiveRecordActiveRecord1,0
  class RelationRelation2,0
  class RelationActiveRecord::Relation2,0
    module RecordFetchWarningRecordFetchWarning3,0
    module RecordFetchWarningActiveRecord::Relation::RecordFetchWarning3,0
      def exec_queriesexec_queries14,0
      class QueryRegistry # :nodoc:QueryRegistry32,0
      class QueryRegistry # :nodoc:ActiveRecord::Relation::RecordFetchWarning::QueryRegistry32,0
        attr_reader :queriesqueries35,0
        def initializeinitialize37,0
        def resetreset41,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/query_methods.rb,5217
module ActiveRecordActiveRecord7,0
  module QueryMethodsQueryMethods8,0
  module QueryMethodsActiveRecord::QueryMethods8,0
    class WhereChainWhereChain15,0
    class WhereChainActiveRecord::QueryMethods::WhereChain15,0
      def initialize(scope)initialize18,0
      def not(opts, *rest)not45,0
    FROZEN_EMPTY_ARRAY = [].freezeFROZEN_EMPTY_ARRAY56,0
    FROZEN_EMPTY_ARRAY = [].freezeActiveRecord::QueryMethods::FROZEN_EMPTY_ARRAY56,0
    FROZEN_EMPTY_HASH = {}.freezeFROZEN_EMPTY_HASH57,0
    FROZEN_EMPTY_HASH = {}.freezeActiveRecord::QueryMethods::FROZEN_EMPTY_HASH57,0
    def bound_attributesbound_attributes77,0
    alias extensions extending_valuesextensions102,0
    def includes(*args)includes137,0
    def includes!(*args) # :nodoc:includes!142,0
    def eager_load(*args)eager_load156,0
    def eager_load!(*args) # :nodoc:eager_load!161,0
    def preload(*args)preload170,0
    def preload!(*args) # :nodoc:preload!175,0
    def references(*table_names)references190,0
    def references!(*table_names) # :nodoc:references!195,0
    def select(*fields)select242,0
    def _select!(*fields) # :nodoc:_select!255,0
    def group(*args)group284,0
    def group!(*args) # :nodoc:group!289,0
    def order(*args)order315,0
    def order!(*args) # :nodoc:order!320,0
    def reorder(*args)reorder336,0
    def reorder!(*args) # :nodoc:reorder!341,0
    VALID_UNSCOPING_VALUES = Set.new([:where, :select, :group, :order, :lock,VALID_UNSCOPING_VALUES349,0
    VALID_UNSCOPING_VALUES = Set.new([:where, :select, :group, :order, :lock,ActiveRecord::QueryMethods::VALID_UNSCOPING_VALUES349,0
    def unscope(*args)unscope386,0
    def unscope!(*args) # :nodoc:unscope!391,0
    def joins(*args)joins448,0
    def joins!(*args) # :nodoc:joins!453,0
    def left_outer_joins(*args)left_outer_joins465,0
    alias :left_joins :left_outer_joinsleft_joins473,0
    def left_outer_joins!(*args) # :nodoc:left_outer_joins!475,0
    def where(opts = :chain, *rest)where599,0
    def where!(opts, *rest) # :nodoc:where!609,0
    def rewhere(conditions)rewhere629,0
    def or(other)or643,0
    def or!(other) # :nodoc:or!651,0
    def having(opts, *rest)having668,0
    def having!(opts, *rest) # :nodoc:having!672,0
    def limit(value)limit685,0
    def limit!(value) # :nodoc:limit!689,0
    def offset(value)offset701,0
    def offset!(value) # :nodoc:offset!705,0
    def lock(locks = true)lock712,0
    def lock!(locks = true) # :nodoc:lock!716,0
    def nonenone755,0
    def none! # :nodoc:none!759,0
    def readonly(value = true)readonly769,0
    def readonly!(value = true) # :nodoc:readonly!773,0
    def create_with(value)create_with791,0
    def create_with!(value) # :nodoc:create_with!795,0
    def from(value, subquery_name = nil)from819,0
    def from!(value, subquery_name = nil) # :nodoc:from!823,0
    def distinct(value = true)distinct838,0
    def distinct!(value = true) # :nodoc:distinct!843,0
    def extending(*modules, &block)extending884,0
    def extending!(*modules, &block) # :nodoc:extending!892,0
    def reverse_orderreverse_order905,0
    def reverse_order! # :nodoc:reverse_order!909,0
    def arel # :nodoc:arel917,0
    def get_value(name) # :nodoc:get_value922,0
    def set_value(name, value) # :nodoc:set_value927,0
      def assert_mutability!assert_mutability!934,0
      def build_arelbuild_arel939,0
      def build_frombuild_from962,0
      def build_left_outer_joins(manager, outer_joins)build_left_outer_joins974,0
      def build_joins(manager, joins)build_joins987,0
      def build_join_query(manager, buckets, join_type)build_join_query1006,0
      def convert_join_strings_to_ast(table, joins)convert_join_strings_to_ast1034,0
      def build_select(arel)build_select1041,0
      def arel_columns(columns)arel_columns1051,0
      def reverse_sql_order(order_query)reverse_sql_order1063,0
      def does_not_support_reverse?(order)does_not_support_reverse?1090,0
      def build_order(arel)build_order1097,0
      VALID_DIRECTIONS = [:asc, :desc, :ASC, :DESC,VALID_DIRECTIONS1104,0
      VALID_DIRECTIONS = [:asc, :desc, :ASC, :DESC,ActiveRecord::QueryMethods::VALID_DIRECTIONS1104,0
      def validate_order_args(args)validate_order_args1107,0
      def preprocess_order_args(order_args)preprocess_order_args1117,0
      def check_if_method_has_arguments!(method_name, args)check_if_method_has_arguments!1164,0
      STRUCTURAL_OR_METHODS = Relation::VALUE_METHODS - [:extending, :where, :having]STRUCTURAL_OR_METHODS1170,0
      STRUCTURAL_OR_METHODS = Relation::VALUE_METHODS - [:extending, :where, :having]ActiveRecord::QueryMethods::STRUCTURAL_OR_METHODS1170,0
      def structurally_incompatible_values_for_or(other)structurally_incompatible_values_for_or1171,0
      def where_clause_factorywhere_clause_factory1177,0
      alias having_clause_factory where_clause_factoryhaving_clause_factory1180,0
      DEFAULT_VALUES = {DEFAULT_VALUES1182,0
      DEFAULT_VALUES = {ActiveRecord::QueryMethods::DEFAULT_VALUES1182,0
      def default_value_for(name)default_value_for1198,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/calculations.rb,1341
module ActiveRecordActiveRecord1,0
  module CalculationsCalculations2,0
  module CalculationsActiveRecord::Calculations2,0
    def count(column_name = nil)count39,0
    def average(column_name)average48,0
    def minimum(column_name)minimum57,0
    def maximum(column_name)maximum66,0
    def sum(column_name = nil)sum75,0
    def calculate(operation, column_name)calculate111,0
    def pluck(*column_names)pluck164,0
    def idsids185,0
      def has_include?(column_name)has_include?191,0
      def perform_calculation(operation, column_name)perform_calculation195,0
      def aggregate_column(column_name)aggregate_column220,0
      def operation_over_aggregate_column(column, operation, distinct)operation_over_aggregate_column230,0
      def execute_simple_calculation(operation, column_name, distinct) #:nodoc:execute_simple_calculation234,0
      def execute_grouped_calculation(operation, column_name, distinct) #:nodoc:execute_grouped_calculation270,0
      def column_alias_for(keys)column_alias_for341,0
      def type_for(field, &block)type_for355,0
      def type_cast_calculated_value(value, type, operation = nil)type_cast_calculated_value360,0
      def select_for_countselect_for_count369,0
      def build_count_subquery(relation, column_name, distinct)build_count_subquery378,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/spawn_methods.rb,356
module ActiveRecordActiveRecord5,0
  module SpawnMethodsSpawnMethods6,0
  module SpawnMethodsActiveRecord::SpawnMethods6,0
    def spawn #:nodoc:spawn8,0
    def merge(other)merge29,0
    def merge!(other) # :nodoc:merge!39,0
    def except(*skips)except55,0
    def only(*onlies)only63,0
      def relation_with(values)relation_with69,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/where_clause.rb,1605
module ActiveRecordActiveRecord1,0
  class RelationRelation2,0
  class RelationActiveRecord::Relation2,0
    class WhereClause # :nodoc:WhereClause3,0
    class WhereClause # :nodoc:ActiveRecord::Relation::WhereClause3,0
      attr_reader :bindsbinds4,0
      delegate :any?, :empty?, to: :predicatesany?6,0
      delegate :any?, :empty?, to: :predicatesempty?6,0
      def initialize(predicates, binds)initialize8,0
      def +(other)+13,0
      def merge(other)merge20,0
      def except(*columns)except27,0
      def or(other)or31,0
      def to_h(table_name = nil)to_h44,0
      def astast66,0
      def ==(other)==70,0
      def invertinvert76,0
      def self.emptyempty80,0
        attr_reader :predicatespredicates88,0
        def referenced_columnsreferenced_columns90,0
        def predicates_unreferenced_by(other)predicates_unreferenced_by99,0
        def equality_node?(node)equality_node?105,0
        def non_conflicting_binds(other)non_conflicting_binds109,0
        def inverted_predicatesinverted_predicates115,0
        def invert_predicate(node)invert_predicate119,0
        def except_predicates_and_binds(columns)except_predicates_and_binds134,0
        def predicates_with_wrapped_sql_literalspredicates_with_wrapped_sql_literals166,0
        ARRAY_WITH_EMPTY_STRING = [""]ARRAY_WITH_EMPTY_STRING176,0
        ARRAY_WITH_EMPTY_STRING = [""]ActiveRecord::Relation::WhereClause::ARRAY_WITH_EMPTY_STRING176,0
        def non_empty_predicatesnon_empty_predicates177,0
        def wrap_sql_literal(node)wrap_sql_literal181,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/where_clause_factory.rb,650
module ActiveRecordActiveRecord1,0
  class RelationRelation2,0
  class RelationActiveRecord::Relation2,0
    class WhereClauseFactory # :nodoc:WhereClauseFactory3,0
    class WhereClauseFactory # :nodoc:ActiveRecord::Relation::WhereClauseFactory3,0
      def initialize(klass, predicate_builder)initialize4,0
      def build(opts, other)build9,0
        attr_reader :klass, :predicate_builderklass37,0
        attr_reader :klass, :predicate_builderpredicate_builder37,0
        def perform_case_sensitive?(options)perform_case_sensitive?41,0
        def build_for_case_sensitive(attributes, options)build_for_case_sensitive45,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/finder_methods.rb,2385
module ActiveRecordActiveRecord3,0
  module FinderMethodsFinderMethods4,0
  module FinderMethodsActiveRecord::FinderMethods4,0
    ONE_AS_ONE = "1 AS one"ONE_AS_ONE5,0
    ONE_AS_ONE = "1 AS one"ActiveRecord::FinderMethods::ONE_AS_ONE5,0
    def find(*args)find64,0
    def find_by(arg, *args)find_by77,0
    def find_by!(arg, *args)find_by!85,0
    def take(limit = nil)take99,0
    def take!take!105,0
    def first(limit = nil)first118,0
    def first!first!128,0
    def last(limit = nil)last147,0
    def last!last!159,0
    def secondsecond169,0
    def second!second!175,0
    def thirdthird185,0
    def third!third!191,0
    def fourthfourth201,0
    def fourth!fourth!207,0
    def fifthfifth217,0
    def fifth!fifth!223,0
    def forty_twoforty_two233,0
    def forty_two!forty_two!239,0
    def third_to_lastthird_to_last249,0
    def third_to_last!third_to_last!255,0
    def second_to_lastsecond_to_last265,0
    def second_to_last!second_to_last!271,0
    def exists?(conditions = :none)exists?302,0
    def raise_record_not_found_exception!(ids = nil, result_size = nil, expected_size = nil, key = primary_key) # :nodoc:raise_record_not_found_exception!332,0
      def offset_indexoffset_index354,0
      def find_with_associationsfind_with_associations358,0
      def construct_relation_for_exists(relation, conditions)construct_relation_for_exists377,0
      def construct_join_dependency(joins = [], eager_loading: true)construct_join_dependency390,0
      def construct_relation_for_association_calculationsconstruct_relation_for_association_calculations395,0
      def apply_join_dependency(relation, join_dependency)apply_join_dependency399,0
      def limited_ids_for(relation)limited_ids_for413,0
      def using_limitable_reflections?(reflections)using_limitable_reflections?424,0
      def find_with_ids(*ids)find_with_ids428,0
      def find_one(id)find_one449,0
      def find_some(ids)find_some465,0
      def find_some_ordered(ids)find_some_ordered489,0
      def find_takefind_take504,0
      def find_take_with_limit(limit)find_take_with_limit512,0
      def find_nth(index)find_nth520,0
      def find_nth_with_limit(index, limit)find_nth_with_limit524,0
      def find_nth_from_last(index)find_nth_from_last543,0
      def find_last(limit)find_last562,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/batches/batch_enumerator.rb,379
module ActiveRecordActiveRecord1,0
  module BatchesBatches2,0
  module BatchesActiveRecord::Batches2,0
    class BatchEnumeratorBatchEnumerator3,0
    class BatchEnumeratorActiveRecord::Batches::BatchEnumerator3,0
      def initialize(of: 1000, start: nil, finish: nil, relation:) #:nodoc:initialize6,0
      def each_recordeach_record34,0
      def eacheach60,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/predicate_builder.rb,1076
module ActiveRecordActiveRecord1,0
  class PredicateBuilder # :nodoc:PredicateBuilder2,0
  class PredicateBuilder # :nodoc:ActiveRecord::PredicateBuilder2,0
    delegate :resolve_column_aliases, to: :tableresolve_column_aliases11,0
    def initialize(table)initialize13,0
    def build_from_hash(attributes)build_from_hash27,0
    def create_binds(attributes)create_binds32,0
    def self.references(attributes)references37,0
    def register_handler(klass, handler)register_handler59,0
    def build(attribute, value)build63,0
      attr_reader :tabletable71,0
      def expand_from_hash(attributes)expand_from_hash73,0
      def create_binds_for_hash(attributes)create_binds_for_hash85,0
      def associated_predicate_builder(association_name)associated_predicate_builder133,0
      def convert_dot_notation_to_hash(attributes)convert_dot_notation_to_hash137,0
      def handler_for(object)handler_for153,0
      def can_be_bound?(column_name, value)can_be_bound?157,0
      def build_bind_param(column_name, value)build_bind_param167,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/predicate_builder/association_query_handler.rb,1132
module ActiveRecordActiveRecord1,0
  class PredicateBuilderPredicateBuilder2,0
  class PredicateBuilderActiveRecord::PredicateBuilder2,0
    class AssociationQueryHandler # :nodoc:AssociationQueryHandler3,0
    class AssociationQueryHandler # :nodoc:ActiveRecord::PredicateBuilder::AssociationQueryHandler3,0
      def self.value_for(table, column, value)value_for4,0
      def initialize(predicate_builder)initialize15,0
      def call(attribute, value)call19,0
        attr_reader :predicate_builderpredicate_builder35,0
    class AssociationQueryValue # :nodoc:AssociationQueryValue38,0
    class AssociationQueryValue # :nodoc:ActiveRecord::PredicateBuilder::AssociationQueryValue38,0
      attr_reader :associated_table, :valueassociated_table39,0
      attr_reader :associated_table, :valuevalue39,0
      def initialize(associated_table, value)initialize41,0
      def idsids46,0
      def base_classbase_class57,0
        def primary_keyprimary_key65,0
        def polymorphic_base_class_from_valuepolymorphic_base_class_from_value69,0
        def convert_to_id(value)convert_to_id78,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/predicate_builder/base_handler.rb,430
module ActiveRecordActiveRecord1,0
  class PredicateBuilderPredicateBuilder2,0
  class PredicateBuilderActiveRecord::PredicateBuilder2,0
    class BaseHandler # :nodoc:BaseHandler3,0
    class BaseHandler # :nodoc:ActiveRecord::PredicateBuilder::BaseHandler3,0
      def initialize(predicate_builder)initialize4,0
      def call(attribute, value)call8,0
        attr_reader :predicate_builderpredicate_builder16,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/predicate_builder/relation_handler.rb,329
module ActiveRecordActiveRecord1,0
  class PredicateBuilderPredicateBuilder2,0
  class PredicateBuilderActiveRecord::PredicateBuilder2,0
    class RelationHandler # :nodoc:RelationHandler3,0
    class RelationHandler # :nodoc:ActiveRecord::PredicateBuilder::RelationHandler3,0
      def call(attribute, value)call4,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/predicate_builder/array_handler.rb,633
module ActiveRecordActiveRecord1,0
  class PredicateBuilderPredicateBuilder2,0
  class PredicateBuilderActiveRecord::PredicateBuilder2,0
    class ArrayHandler # :nodoc:ArrayHandler3,0
    class ArrayHandler # :nodoc:ActiveRecord::PredicateBuilder::ArrayHandler3,0
      def initialize(predicate_builder)initialize4,0
      def call(attribute, value)call8,0
        attr_reader :predicate_builderpredicate_builder36,0
        module NullPredicate # :nodoc:NullPredicate38,0
        module NullPredicate # :nodoc:ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate38,0
          def self.or(other)or39,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/predicate_builder/polymorphic_array_handler.rb,1036
module ActiveRecordActiveRecord1,0
  class PredicateBuilderPredicateBuilder2,0
  class PredicateBuilderActiveRecord::PredicateBuilder2,0
    class PolymorphicArrayHandler # :nodoc:PolymorphicArrayHandler3,0
    class PolymorphicArrayHandler # :nodoc:ActiveRecord::PredicateBuilder::PolymorphicArrayHandler3,0
      def initialize(predicate_builder)initialize4,0
      def call(attribute, value)call8,0
        attr_reader :predicate_builderpredicate_builder28,0
    class PolymorphicArrayValue # :nodoc:PolymorphicArrayValue31,0
    class PolymorphicArrayValue # :nodoc:ActiveRecord::PredicateBuilder::PolymorphicArrayValue31,0
      attr_reader :associated_table, :valuesassociated_table32,0
      attr_reader :associated_table, :valuesvalues32,0
      def initialize(associated_table, values)initialize34,0
      def type_to_ids_mappingtype_to_ids_mapping39,0
        def primary_key(value)primary_key46,0
        def base_class(value)base_class50,0
        def convert_to_id(value)convert_to_id54,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/predicate_builder/basic_object_handler.rb,341
module ActiveRecordActiveRecord1,0
  class PredicateBuilderPredicateBuilder2,0
  class PredicateBuilderActiveRecord::PredicateBuilder2,0
    class BasicObjectHandler # :nodoc:BasicObjectHandler3,0
    class BasicObjectHandler # :nodoc:ActiveRecord::PredicateBuilder::BasicObjectHandler3,0
      def call(attribute, value)call4,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/predicate_builder/range_handler.rb,527
module ActiveRecordActiveRecord1,0
  class PredicateBuilderPredicateBuilder2,0
  class PredicateBuilderActiveRecord::PredicateBuilder2,0
    class RangeHandler # :nodoc:RangeHandler3,0
    class RangeHandler # :nodoc:ActiveRecord::PredicateBuilder::RangeHandler3,0
      RangeWithBinds = Struct.new(:begin, :end, :exclude_end?)RangeWithBinds4,0
      RangeWithBinds = Struct.new(:begin, :end, :exclude_end?)ActiveRecord::PredicateBuilder::RangeHandler::RangeWithBinds4,0
      def call(attribute, value)call6,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation/from_clause.rb,481
module ActiveRecordActiveRecord1,0
  class RelationRelation2,0
  class RelationActiveRecord::Relation2,0
    class FromClause # :nodoc:FromClause3,0
    class FromClause # :nodoc:ActiveRecord::Relation::FromClause3,0
      attr_reader :value, :namevalue4,0
      attr_reader :value, :namename4,0
      def initialize(value, name)initialize6,0
      def bindsbinds11,0
      def merge(other)merge19,0
      def empty?empty?23,0
      def self.emptyempty27,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/enum.rb,1272
module ActiveRecordActiveRecord3,0
  module EnumEnum96,0
  module EnumActiveRecord::Enum96,0
    def self.extended(base) # :nodoc:extended97,0
    def inherited(base) # :nodoc:inherited102,0
    class EnumType < Type::Value # :nodoc:EnumType107,0
    class EnumType < Type::Value # :nodoc:ActiveRecord::Enum::EnumType107,0
      delegate :type, to: :subtypetype108,0
      def initialize(name, mapping, subtype)initialize110,0
      def cast(value)cast116,0
      def deserialize(value)deserialize128,0
      def serialize(value)serialize133,0
      def assert_valid_value(value)assert_valid_value137,0
        attr_reader :name, :mapping, :subtypename147,0
        attr_reader :name, :mapping, :subtypemapping147,0
        attr_reader :name, :mapping, :subtypesubtype147,0
    def enum(definitions)enum150,0
      def _enum_methods_module_enum_methods_module206,0
      ENUM_CONFLICT_MESSAGE = \ENUM_CONFLICT_MESSAGE214,0
      ENUM_CONFLICT_MESSAGE = \ActiveRecord::Enum::ENUM_CONFLICT_MESSAGE214,0
      def detect_enum_conflict!(enum_name, method_name, klass_method = false)detect_enum_conflict!219,0
      def raise_conflict_error(enum_name, method_name, type: "instance", source: "Active Record")raise_conflict_error229,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type_caster/connection.rb,538
module ActiveRecordActiveRecord1,0
  module TypeCasterTypeCaster2,0
  module TypeCasterActiveRecord::TypeCaster2,0
    class Connection # :nodoc:Connection3,0
    class Connection # :nodoc:ActiveRecord::TypeCaster::Connection3,0
      def initialize(klass, table_name)initialize4,0
      def type_cast_for_database(attribute_name, value)type_cast_for_database9,0
        attr_reader :table_nametable_name19,0
        delegate :connection, to: :@klassconnection20,0
        def column_for(attribute_name)column_for24,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type_caster/map.rb,370
module ActiveRecordActiveRecord1,0
  module TypeCasterTypeCaster2,0
  module TypeCasterActiveRecord::TypeCaster2,0
    class Map # :nodoc:Map3,0
    class Map # :nodoc:ActiveRecord::TypeCaster::Map3,0
      def initialize(types)initialize4,0
      def type_cast_for_database(attr_name, value)type_cast_for_database8,0
        attr_reader :typestypes18,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute/user_provided_default.rb,551
module ActiveRecordActiveRecord3,0
  class Attribute # :nodoc:Attribute4,0
  class Attribute # :nodoc:ActiveRecord::Attribute4,0
    class UserProvidedDefault < FromUser # :nodoc:UserProvidedDefault5,0
    class UserProvidedDefault < FromUser # :nodoc:ActiveRecord::Attribute::UserProvidedDefault5,0
      def initialize(name, value, type, database_default)initialize6,0
      def value_before_type_castvalue_before_type_cast11,0
      def with_type(type)with_type19,0
        attr_reader :user_provided_valueuser_provided_value27,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/errors.rb,7123
module ActiveRecordActiveRecord1,0
  class ActiveRecordError < StandardErrorActiveRecordError5,0
  class ActiveRecordError < StandardErrorActiveRecord::ActiveRecordError5,0
  class SubclassNotFound < ActiveRecordErrorSubclassNotFound12,0
  class SubclassNotFound < ActiveRecordErrorActiveRecord::SubclassNotFound12,0
  class AssociationTypeMismatch < ActiveRecordErrorAssociationTypeMismatch27,0
  class AssociationTypeMismatch < ActiveRecordErrorActiveRecord::AssociationTypeMismatch27,0
  class SerializationTypeMismatch < ActiveRecordErrorSerializationTypeMismatch31,0
  class SerializationTypeMismatch < ActiveRecordErrorActiveRecord::SerializationTypeMismatch31,0
  class AdapterNotSpecified < ActiveRecordErrorAdapterNotSpecified36,0
  class AdapterNotSpecified < ActiveRecordErrorActiveRecord::AdapterNotSpecified36,0
  class AdapterNotFound < ActiveRecordErrorAdapterNotFound41,0
  class AdapterNotFound < ActiveRecordErrorActiveRecord::AdapterNotFound41,0
  class ConnectionNotEstablished < ActiveRecordErrorConnectionNotEstablished47,0
  class ConnectionNotEstablished < ActiveRecordErrorActiveRecord::ConnectionNotEstablished47,0
  class RecordNotFound < ActiveRecordErrorRecordNotFound51,0
  class RecordNotFound < ActiveRecordErrorActiveRecord::RecordNotFound51,0
    attr_reader :model, :primary_key, :idmodel52,0
    attr_reader :model, :primary_key, :idprimary_key52,0
    attr_reader :model, :primary_key, :idid52,0
    def initialize(message = nil, model = nil, primary_key = nil, id = nil)initialize54,0
  class RecordNotSaved < ActiveRecordErrorRecordNotSaved66,0
  class RecordNotSaved < ActiveRecordErrorActiveRecord::RecordNotSaved66,0
    attr_reader :recordrecord67,0
    def initialize(message = nil, record = nil)initialize69,0
  class RecordNotDestroyed < ActiveRecordErrorRecordNotDestroyed85,0
  class RecordNotDestroyed < ActiveRecordErrorActiveRecord::RecordNotDestroyed85,0
    attr_reader :recordrecord86,0
    def initialize(message = nil, record = nil)initialize88,0
  class StatementInvalid < ActiveRecordErrorStatementInvalid97,0
  class StatementInvalid < ActiveRecordErrorActiveRecord::StatementInvalid97,0
    def initialize(message = nil)initialize98,0
  class WrappedDatabaseException < StatementInvalidWrappedDatabaseException105,0
  class WrappedDatabaseException < StatementInvalidActiveRecord::WrappedDatabaseException105,0
  class RecordNotUnique < WrappedDatabaseExceptionRecordNotUnique109,0
  class RecordNotUnique < WrappedDatabaseExceptionActiveRecord::RecordNotUnique109,0
  class InvalidForeignKey < WrappedDatabaseExceptionInvalidForeignKey113,0
  class InvalidForeignKey < WrappedDatabaseExceptionActiveRecord::InvalidForeignKey113,0
  class MismatchedForeignKey < StatementInvalidMismatchedForeignKey117,0
  class MismatchedForeignKey < StatementInvalidActiveRecord::MismatchedForeignKey117,0
    def initialize(adapter = nil, message: nil, table: nil, foreign_key: nil, target_table: nil, primary_key: nil)initialize118,0
      def column_type(table, column)column_type139,0
  class NotNullViolation < StatementInvalidNotNullViolation145,0
  class NotNullViolation < StatementInvalidActiveRecord::NotNullViolation145,0
  class ValueTooLong < StatementInvalidValueTooLong149,0
  class ValueTooLong < StatementInvalidActiveRecord::ValueTooLong149,0
  class RangeError < StatementInvalidRangeError153,0
  class RangeError < StatementInvalidActiveRecord::RangeError153,0
  class PreparedStatementInvalid < ActiveRecordErrorPreparedStatementInvalid163,0
  class PreparedStatementInvalid < ActiveRecordErrorActiveRecord::PreparedStatementInvalid163,0
  class NoDatabaseError < StatementInvalidNoDatabaseError167,0
  class NoDatabaseError < StatementInvalidActiveRecord::NoDatabaseError167,0
  class PreparedStatementCacheExpired < StatementInvalidPreparedStatementCacheExpired172,0
  class PreparedStatementCacheExpired < StatementInvalidActiveRecord::PreparedStatementCacheExpired172,0
  class StaleObjectError < ActiveRecordErrorStaleObjectError181,0
  class StaleObjectError < ActiveRecordErrorActiveRecord::StaleObjectError181,0
    attr_reader :record, :attempted_actionrecord182,0
    attr_reader :record, :attempted_actionattempted_action182,0
    def initialize(record = nil, attempted_action = nil)initialize184,0
  class ConfigurationError < ActiveRecordErrorConfigurationError200,0
  class ConfigurationError < ActiveRecordErrorActiveRecord::ConfigurationError200,0
  class ReadOnlyRecord < ActiveRecordErrorReadOnlyRecord204,0
  class ReadOnlyRecord < ActiveRecordErrorActiveRecord::ReadOnlyRecord204,0
  class Rollback < ActiveRecordErrorRollback235,0
  class Rollback < ActiveRecordErrorActiveRecord::Rollback235,0
  class DangerousAttributeError < ActiveRecordErrorDangerousAttributeError240,0
  class DangerousAttributeError < ActiveRecordErrorActiveRecord::DangerousAttributeError240,0
  UnknownAttributeError = ActiveModel::UnknownAttributeErrorUnknownAttributeError244,0
  UnknownAttributeError = ActiveModel::UnknownAttributeErrorActiveRecord::UnknownAttributeError244,0
  class AttributeAssignmentError < ActiveRecordErrorAttributeAssignmentError249,0
  class AttributeAssignmentError < ActiveRecordErrorActiveRecord::AttributeAssignmentError249,0
    attr_reader :exception, :attributeexception250,0
    attr_reader :exception, :attributeattribute250,0
    def initialize(message = nil, exception = nil, attribute = nil)initialize252,0
  class MultiparameterAssignmentErrors < ActiveRecordErrorMultiparameterAssignmentErrors263,0
  class MultiparameterAssignmentErrors < ActiveRecordErrorActiveRecord::MultiparameterAssignmentErrors263,0
    attr_reader :errorserrors264,0
    def initialize(errors = nil)initialize266,0
  class UnknownPrimaryKey < ActiveRecordErrorUnknownPrimaryKey272,0
  class UnknownPrimaryKey < ActiveRecordErrorActiveRecord::UnknownPrimaryKey272,0
    attr_reader :modelmodel273,0
    def initialize(model = nil, description = nil)initialize275,0
  class ImmutableRelation < ActiveRecordErrorImmutableRelation298,0
  class ImmutableRelation < ActiveRecordErrorActiveRecord::ImmutableRelation298,0
  class TransactionIsolationError < ActiveRecordErrorTransactionIsolationError308,0
  class TransactionIsolationError < ActiveRecordErrorActiveRecord::TransactionIsolationError308,0
  class TransactionRollbackError < StatementInvalidTransactionRollbackError318,0
  class TransactionRollbackError < StatementInvalidActiveRecord::TransactionRollbackError318,0
  class SerializationFailure < TransactionRollbackErrorSerializationFailure323,0
  class SerializationFailure < TransactionRollbackErrorActiveRecord::SerializationFailure323,0
  class Deadlocked < TransactionRollbackErrorDeadlocked328,0
  class Deadlocked < TransactionRollbackErrorActiveRecord::Deadlocked328,0
  class IrreversibleOrderError < ActiveRecordErrorIrreversibleOrderError333,0
  class IrreversibleOrderError < ActiveRecordErrorActiveRecord::IrreversibleOrderError333,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/migration.rb,10446
module ActiveRecordActiveRecord5,0
  class MigrationError < ActiveRecordError#:nodoc:MigrationError6,0
  class MigrationError < ActiveRecordError#:nodoc:ActiveRecord::MigrationError6,0
    def initialize(message = nil)initialize7,0
  class IrreversibleMigration < MigrationErrorIrreversibleMigration84,0
  class IrreversibleMigration < MigrationErrorActiveRecord::IrreversibleMigration84,0
  class DuplicateMigrationVersionError < MigrationError#:nodoc:DuplicateMigrationVersionError87,0
  class DuplicateMigrationVersionError < MigrationError#:nodoc:ActiveRecord::DuplicateMigrationVersionError87,0
    def initialize(version = nil)initialize88,0
  class DuplicateMigrationNameError < MigrationError#:nodoc:DuplicateMigrationNameError97,0
  class DuplicateMigrationNameError < MigrationError#:nodoc:ActiveRecord::DuplicateMigrationNameError97,0
    def initialize(name = nil)initialize98,0
  class UnknownMigrationVersionError < MigrationError #:nodoc:UnknownMigrationVersionError107,0
  class UnknownMigrationVersionError < MigrationError #:nodoc:ActiveRecord::UnknownMigrationVersionError107,0
    def initialize(version = nil)initialize108,0
  class IllegalMigrationNameError < MigrationError#:nodoc:IllegalMigrationNameError117,0
  class IllegalMigrationNameError < MigrationError#:nodoc:ActiveRecord::IllegalMigrationNameError117,0
    def initialize(name = nil)initialize118,0
  class PendingMigrationError < MigrationError#:nodoc:PendingMigrationError127,0
  class PendingMigrationError < MigrationError#:nodoc:ActiveRecord::PendingMigrationError127,0
    def initialize(message = nil)initialize128,0
  class ConcurrentMigrationError < MigrationError #:nodoc:ConcurrentMigrationError139,0
  class ConcurrentMigrationError < MigrationError #:nodoc:ActiveRecord::ConcurrentMigrationError139,0
    DEFAULT_MESSAGE = "Cannot run migrations because another migration process is currently running.".freezeDEFAULT_MESSAGE140,0
    DEFAULT_MESSAGE = "Cannot run migrations because another migration process is currently running.".freezeActiveRecord::ConcurrentMigrationError::DEFAULT_MESSAGE140,0
    def initialize(message = DEFAULT_MESSAGE)initialize142,0
  class NoEnvironmentInSchemaError < MigrationError #:nodoc:NoEnvironmentInSchemaError147,0
  class NoEnvironmentInSchemaError < MigrationError #:nodoc:ActiveRecord::NoEnvironmentInSchemaError147,0
    def initializeinitialize148,0
  class ProtectedEnvironmentError < ActiveRecordError #:nodoc:ProtectedEnvironmentError158,0
  class ProtectedEnvironmentError < ActiveRecordError #:nodoc:ActiveRecord::ProtectedEnvironmentError158,0
    def initialize(env = "production")initialize159,0
  class EnvironmentMismatchError < ActiveRecordErrorEnvironmentMismatchError167,0
  class EnvironmentMismatchError < ActiveRecordErrorActiveRecord::EnvironmentMismatchError167,0
    def initialize(current: nil, stored: nil)initialize168,0
  class MigrationMigration514,0
  class MigrationActiveRecord::Migration514,0
    class Current < Migration # :nodoc:Current519,0
    class Current < Migration # :nodoc:ActiveRecord::Migration::Current519,0
    def self.inherited(subclass) # :nodoc:inherited522,0
    def self.[](version)[]532,0
    def self.current_versioncurrent_version536,0
    MigrationFilenameRegexp = /\A([0-9]+)_([_a-z0-9]*)\.?([_a-z0-9]*)?\.rb\z/ # :nodoc:MigrationFilenameRegexp540,0
    MigrationFilenameRegexp = /\A([0-9]+)_([_a-z0-9]*)\.?([_a-z0-9]*)?\.rb\z/ # :nodoc:ActiveRecord::Migration::MigrationFilenameRegexp540,0
    class CheckPendingCheckPending544,0
    class CheckPendingActiveRecord::Migration::CheckPending544,0
      def initialize(app)initialize545,0
      def call(env)call550,0
        def connectionconnection561,0
      attr_accessor :delegate # :nodoc:delegate567,0
      attr_accessor :delegate # :nodoc:delegate=567,0
      attr_accessor :disable_ddl_transaction # :nodoc:disable_ddl_transaction568,0
      attr_accessor :disable_ddl_transaction # :nodoc:disable_ddl_transaction=568,0
      def nearest_delegate # :nodoc:nearest_delegate570,0
      def check_pending!(connection = Base.connection)check_pending!575,0
      def load_schema_if_pending!load_schema_if_pending!579,0
      def maintain_test_schema! # :nodoc:maintain_test_schema!593,0
      def method_missing(name, *args, &block) # :nodoc:method_missing599,0
      def migrate(direction)migrate603,0
      def disable_ddl_transaction!disable_ddl_transaction!611,0
    def disable_ddl_transaction # :nodoc:disable_ddl_transaction616,0
    cattr_accessor :verboseverbose620,0
    cattr_accessor :verboseverbose=620,0
    attr_accessor :name, :versionname621,0
    attr_accessor :name, :versionname=621,0
    attr_accessor :name, :versionversion621,0
    attr_accessor :name, :versionversion=621,0
    def initialize(name = self.class.name, version = nil)initialize623,0
    def revert(*migration_classes)revert670,0
    def reverting?reverting?689,0
    ReversibleBlockHelper = Struct.new(:reverting) do # :nodoc:ReversibleBlockHelper693,0
    ReversibleBlockHelper = Struct.new(:reverting) do # :nodoc:ActiveRecord::Migration::ReversibleBlockHelper693,0
      def upup694,0
      def downdown698,0
    def reversiblereversible729,0
    def run(*migration_classes)run738,0
    def upup752,0
    def downdown758,0
    def migrate(direction)migrate765,0
    def exec_migration(conn, direction)exec_migration786,0
    def write(text = "")write801,0
    def announce(message)announce805,0
    def say(message, subitem = false)say811,0
    def say_with_time(message)say_with_time815,0
    def suppress_messagessuppress_messages824,0
    def connectionconnection831,0
    def method_missing(method, *arguments, &block)method_missing835,0
    def copy(destination, sources, options = {})copy853,0
    def proper_table_name(name, options = {})proper_table_name901,0
    def next_migration_number(number)next_migration_number910,0
    def table_name_options(config = ActiveRecord::Base) #:nodoc:table_name_options920,0
      def execute_blockexecute_block928,0
  MigrationProxy = Struct.new(:name, :version, :filename, :scope) doMigrationProxy939,0
  MigrationProxy = Struct.new(:name, :version, :filename, :scope) doActiveRecord::MigrationProxy939,0
    def initialize(name, version, filename, scope)initialize940,0
    def basenamebasename945,0
    def mtimemtime949,0
    delegate :migrate, :announce, :write, :disable_ddl_transaction, to: :migrationmigrate953,0
    delegate :migrate, :announce, :write, :disable_ddl_transaction, to: :migrationannounce953,0
    delegate :migrate, :announce, :write, :disable_ddl_transaction, to: :migrationwrite953,0
    delegate :migrate, :announce, :write, :disable_ddl_transaction, to: :migrationdisable_ddl_transaction953,0
      def migrationmigration957,0
      def load_migrationload_migration961,0
  class NullMigration < MigrationProxy #:nodoc:NullMigration967,0
  class NullMigration < MigrationProxy #:nodoc:ActiveRecord::NullMigration967,0
    def initializeinitialize968,0
    def mtimemtime972,0
  class Migrator#:nodoc:Migrator977,0
  class Migrator#:nodoc:ActiveRecord::Migrator977,0
      attr_writer :migrations_pathsmigrations_paths=979,0
      alias :migrations_path= :migrations_paths=migrations_path=980,0
      def migrate(migrations_paths, target_version = nil, &block)migrate982,0
      def rollback(migrations_paths, steps = 1)rollback995,0
      def forward(migrations_paths, steps = 1)forward999,0
      def up(migrations_paths, target_version = nil)up1003,0
      def down(migrations_paths, target_version = nil)down1010,0
      def run(direction, migrations_paths, target_version)run1017,0
      def open(migrations_paths)open1021,0
      def schema_migrations_table_nameschema_migrations_table_name1025,0
      def get_all_versions(connection = Base.connection)get_all_versions1030,0
      def current_version(connection = Base.connection)current_version1038,0
      def needs_migration?(connection = Base.connection)needs_migration?1042,0
      def any_migrations?any_migrations?1046,0
      def last_migration #:nodoc:last_migration1050,0
      def migrations_pathsmigrations_paths1054,0
      def parse_migration_filename(filename) # :nodoc:parse_migration_filename1060,0
      def migrations(paths)migrations1064,0
      def migrations_status(paths)migrations_status1079,0
      def migration_files(paths)migration_files1099,0
      def move(direction, migrations_paths, steps)move1105,0
    def initialize(direction, migrations, target_version = nil)initialize1117,0
    def current_versioncurrent_version1129,0
    def current_migrationcurrent_migration1133,0
    alias :current :current_migrationcurrent1136,0
    def runrun1138,0
    def migratemigrate1146,0
    def runnablerunnable1154,0
    def migrationsmigrations1165,0
    def pending_migrationspending_migrations1169,0
    def migratedmigrated1174,0
    def load_migratedload_migrated1178,0
      def run_without_lockrun_without_lock1185,0
      def migrate_without_lockmigrate_without_lock1195,0
      def record_environmentrecord_environment1209,0
      def ran?(migration)ran?1214,0
      def invalid_target?invalid_target?1219,0
      def execute_migration_in_transaction(migration, direction)execute_migration_in_transaction1223,0
      def targettarget1240,0
      def finishfinish1244,0
      def startstart1248,0
      def validate(migrations)validate1252,0
      def record_version_state_after_migrating(version)record_version_state_after_migrating1260,0
      def self.last_stored_environmentlast_stored_environment1270,0
      def self.current_environmentcurrent_environment1279,0
      def self.protected_environment?protected_environment?1283,0
      def up?up?1287,0
      def down?down?1291,0
      def ddl_transaction(migration)ddl_transaction1296,0
      def use_transaction?(migration)use_transaction?1304,0
      def use_advisory_lock?use_advisory_lock?1308,0
      def with_advisory_lockwith_advisory_lock1312,0
      MIGRATOR_SALT = 2053462845MIGRATOR_SALT1322,0
      MIGRATOR_SALT = 2053462845ActiveRecord::Migrator::MIGRATOR_SALT1322,0
      def generate_migrator_advisory_lock_idgenerate_migrator_advisory_lock_id1323,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_set/yaml_encoder.rb,443
module ActiveRecordActiveRecord1,0
  class AttributeSetAttributeSet2,0
  class AttributeSetActiveRecord::AttributeSet2,0
    class YAMLEncoder # :nodoc:YAMLEncoder5,0
    class YAMLEncoder # :nodoc:ActiveRecord::AttributeSet::YAMLEncoder5,0
      def initialize(default_types)initialize6,0
      def encode(attribute_set, coder)encode10,0
      def decode(coder)decode20,0
        attr_reader :default_typesdefault_types38,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_set/builder.rb,2118
module ActiveRecordActiveRecord3,0
  class AttributeSet # :nodoc:AttributeSet4,0
  class AttributeSet # :nodoc:ActiveRecord::AttributeSet4,0
    class Builder # :nodoc:Builder5,0
    class Builder # :nodoc:ActiveRecord::AttributeSet::Builder5,0
      attr_reader :types, :always_initialized, :defaulttypes6,0
      attr_reader :types, :always_initialized, :defaultalways_initialized6,0
      attr_reader :types, :always_initialized, :defaultdefault6,0
      def initialize(types, always_initialized = nil, &default)initialize8,0
      def build_from_database(values = {}, additional_types = {})build_from_database14,0
  class LazyAttributeHash # :nodoc:LazyAttributeHash25,0
  class LazyAttributeHash # :nodoc:ActiveRecord::LazyAttributeHash25,0
    delegate :transform_values, :each_key, :each_value, :fetch, to: :materializetransform_values26,0
    delegate :transform_values, :each_key, :each_value, :fetch, to: :materializeeach_key26,0
    delegate :transform_values, :each_key, :each_value, :fetch, to: :materializeeach_value26,0
    delegate :transform_values, :each_key, :each_value, :fetch, to: :materializefetch26,0
    def initialize(types, values, additional_types, &default)initialize28,0
    def key?(key)key?37,0
    def [](key)[]41,0
    def []=(key, value)[]=45,0
    def deep_dupdeep_dup52,0
    def initialize_dup(_)initialize_dup58,0
    def selectselect63,0
    def ==(other)==73,0
    def marshal_dumpmarshal_dump81,0
    def marshal_load(delegate_hash)marshal_load85,0
      attr_reader :types, :values, :additional_types, :delegate_hash, :defaulttypes97,0
      attr_reader :types, :values, :additional_types, :delegate_hash, :defaultvalues97,0
      attr_reader :types, :values, :additional_types, :delegate_hash, :defaultadditional_types97,0
      attr_reader :types, :values, :additional_types, :delegate_hash, :defaultdelegate_hash97,0
      attr_reader :types, :values, :additional_types, :delegate_hash, :defaultdefault97,0
      def materializematerialize99,0
      def assign_default_value(name)assign_default_value112,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/no_touching.rb,540
module ActiveRecordActiveRecord1,0
  module NoTouchingNoTouching3,0
  module NoTouchingActiveRecord::NoTouching3,0
    module ClassMethodsClassMethods6,0
    module ClassMethodsActiveRecord::NoTouching::ClassMethods6,0
      def no_touching(&block)no_touching21,0
      def apply_to(klass) #:nodoc:apply_to27,0
      def applied_to?(klass) #:nodoc:applied_to?34,0
        def klassesklasses39,0
    def no_touching?no_touching?44,0
    def touch_later(*) # :nodoc:touch_later48,0
    def touch(*) # :nodoc:touch52,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/timestamp.rb,927
module ActiveRecordActiveRecord2,0
  module TimestampTimestamp42,0
  module TimestampActiveRecord::Timestamp42,0
    def initialize_dup(other) # :nodoc:initialize_dup50,0
    def _create_record_create_record84,0
    def _update_record(*args, touch: true, **options)_update_record98,0
    def should_record_timestamps?should_record_timestamps?110,0
    def timestamp_attributes_for_create_in_modeltimestamp_attributes_for_create_in_model114,0
    def timestamp_attributes_for_update_in_modeltimestamp_attributes_for_update_in_model118,0
    def all_timestamp_attributes_in_modelall_timestamp_attributes_in_model122,0
    def current_time_from_proper_timezonecurrent_time_from_proper_timezone126,0
    def max_updated_column_timestamp(timestamp_names = self.class.send(:timestamp_attributes_for_update))max_updated_column_timestamp130,0
    def clear_timestamp_attributesclear_timestamp_attributes139,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_handling.rb,1780
module ActiveRecordActiveRecord1,0
  module ConnectionHandlingConnectionHandling2,0
  module ConnectionHandlingActiveRecord::ConnectionHandling2,0
    RAILS_ENV   = -> { (Rails.env if defined?(Rails.env)) || ENV["RAILS_ENV"] || ENV["RACK_ENV"] }RAILS_ENV3,0
    RAILS_ENV   = -> { (Rails.env if defined?(Rails.env)) || ENV["RAILS_ENV"] || ENV["RACK_ENV"] }ActiveRecord::ConnectionHandling::RAILS_ENV3,0
    DEFAULT_ENV = -> { RAILS_ENV.call || "default_env" }DEFAULT_ENV4,0
    DEFAULT_ENV = -> { RAILS_ENV.call || "default_env" }ActiveRecord::ConnectionHandling::DEFAULT_ENV4,0
    def establish_connection(config = nil)establish_connection47,0
    class MergeAndResolveDefaultUrlConfig # :nodoc:MergeAndResolveDefaultUrlConfig61,0
    class MergeAndResolveDefaultUrlConfig # :nodoc:ActiveRecord::ConnectionHandling::MergeAndResolveDefaultUrlConfig61,0
      def initialize(raw_configurations)initialize62,0
      def resolveresolve69,0
        def configconfig74,0
    def connectionconnection87,0
    attr_writer :connection_specification_nameconnection_specification_name=91,0
    def connection_specification_nameconnection_specification_name94,0
    def connection_configconnection_config107,0
    def connection_poolconnection_pool111,0
    def retrieve_connectionretrieve_connection115,0
    def connected?connected?120,0
    def remove_connection(name = nil)remove_connection124,0
    def clear_cache! # :nodoc:clear_cache!136,0
    delegate :clear_active_connections!, :clear_reloadable_connections!,clear_active_connections!140,0
    delegate :clear_active_connections!, :clear_reloadable_connections!,clear_reloadable_connections!140,0
      :clear_all_connections!, to: :connection_handlerclear_all_connections!141,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_assignment.rb,869
module ActiveRecordActiveRecord3,0
  module AttributeAssignmentAttributeAssignment4,0
  module AttributeAssignmentActiveRecord::AttributeAssignment4,0
    def attributes=(attributes)attributes=9,0
      def _assign_attributes(attributes)_assign_attributes15,0
      def assign_nested_parameter_attributes(pairs)assign_nested_parameter_attributes33,0
      def assign_multiparameter_attributes(pairs)assign_multiparameter_attributes43,0
      def execute_callstack_for_multiparameter_attributes(callstack)execute_callstack_for_multiparameter_attributes49,0
      def extract_callstack_for_multiparameter_attributes(pairs)extract_callstack_for_multiparameter_attributes69,0
      def type_cast_attribute_value(multiparameter_name, value)type_cast_attribute_value83,0
      def find_parameter_position(multiparameter_name)find_parameter_position87,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/callbacks.rb,433
module ActiveRecordActiveRecord1,0
  module CallbacksCallbacks307,0
  module CallbacksActiveRecord::Callbacks307,0
    CALLBACKS = [CALLBACKS310,0
    CALLBACKS = [ActiveRecord::Callbacks::CALLBACKS310,0
    def destroy #:nodoc:destroy317,0
    def touch(*) #:nodoc:touch329,0
    def create_or_update(*)create_or_update335,0
    def _create_record_create_record339,0
    def _update_record(*)_update_record343,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type_caster.rb,141
module ActiveRecordActiveRecord4,0
  module TypeCaster # :nodoc:TypeCaster5,0
  module TypeCaster # :nodoc:ActiveRecord::TypeCaster5,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/translation.rb,224
module ActiveRecordActiveRecord1,0
  module TranslationTranslation2,0
  module TranslationActiveRecord::Translation2,0
    def lookup_ancestors #:nodoc:lookup_ancestors6,0
    def i18n_scope #:nodoc:i18n_scope18,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/locking/optimistic.rb,1632
module ActiveRecordActiveRecord1,0
  module LockingLocking2,0
  module LockingActiveRecord::Locking2,0
    module OptimisticOptimistic50,0
    module OptimisticActiveRecord::Locking::Optimistic50,0
      def locking_enabled? #:nodoc:locking_enabled?58,0
        def increment_lockincrement_lock64,0
        def _create_record(attribute_names = self.attribute_names, *)_create_record70,0
        def _update_record(attribute_names = self.attribute_names)_update_record79,0
        def destroy_rowdestroy_row116,0
        def relation_for_destroyrelation_for_destroy126,0
        module ClassMethodsClassMethods137,0
        module ClassMethodsActiveRecord::Locking::Optimistic::ClassMethods137,0
          DEFAULT_LOCKING_COLUMN = "lock_version"DEFAULT_LOCKING_COLUMN138,0
          DEFAULT_LOCKING_COLUMN = "lock_version"ActiveRecord::Locking::Optimistic::ClassMethods::DEFAULT_LOCKING_COLUMN138,0
          def locking_enabled?locking_enabled?143,0
          def locking_column=(value)locking_column=148,0
          def locking_columnlocking_column154,0
          def reset_locking_columnreset_locking_column160,0
          def update_counters(id, counters)update_counters166,0
            def inherited(subclass)inherited177,0
    class LockingType < DelegateClass(Type::Value) # :nodoc:LockingType192,0
    class LockingType < DelegateClass(Type::Value) # :nodoc:ActiveRecord::Locking::LockingType192,0
      def deserialize(value)deserialize193,0
      def serialize(value)serialize197,0
      def init_with(coder)init_with201,0
      def encode_with(coder)encode_with205,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/locking/pessimistic.rb,300
module ActiveRecordActiveRecord1,0
  module LockingLocking2,0
  module LockingActiveRecord::Locking2,0
    module PessimisticPessimistic56,0
    module PessimisticActiveRecord::Locking::Pessimistic56,0
      def lock!(lock = true)lock!61,0
      def with_lock(lock = true)with_lock78,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/railties/jdbcmysql_error.rb,529
module ArJdbcMySQL #:nodoc:ArJdbcMySQL2,0
  class Error < StandardError #:nodoc:Error3,0
  class Error < StandardError #:nodoc:ArJdbcMySQL::Error3,0
    attr_accessor :error_number, :sql_stateerror_number4,0
    attr_accessor :error_number, :sql_stateerror_number=4,0
    attr_accessor :error_number, :sql_statesql_state4,0
    attr_accessor :error_number, :sql_statesql_state=4,0
    def initialize(msg)initialize6,0
    alias_method :errno, :error_numbererrno13,0
    alias_method :error, :messageerror14,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/railties/controller_runtime.rb,679
module ActiveRecordActiveRecord4,0
  module Railties # :nodoc:Railties5,0
  module Railties # :nodoc:ActiveRecord::Railties5,0
    module ControllerRuntime #:nodoc:ControllerRuntime6,0
    module ControllerRuntime #:nodoc:ActiveRecord::Railties::ControllerRuntime6,0
      def process_action(action, *args)process_action17,0
      def cleanup_view_runtimecleanup_view_runtime25,0
      def append_info_to_payload(payload)append_info_to_payload38,0
      module ClassMethods # :nodoc:ClassMethods45,0
      module ClassMethods # :nodoc:ActiveRecord::Railties::ControllerRuntime::ClassMethods45,0
        def log_process_action(payload)log_process_action46,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/result.rb,855
module ActiveRecordActiveRecord1,0
  class ResultResult32,0
  class ResultActiveRecord::Result32,0
    attr_reader :columns, :rows, :column_typescolumns35,0
    attr_reader :columns, :rows, :column_typesrows35,0
    attr_reader :columns, :rows, :column_typescolumn_types35,0
    def initialize(columns, rows, column_types = {})initialize37,0
    def lengthlength45,0
    def eacheach53,0
    def to_hashto_hash62,0
    alias :map! :mapmap!66,0
    alias :collect! :mapcollect!67,0
    def empty?empty?70,0
    def to_aryto_ary75,0
    def [](idx)[]79,0
    def firstfirst85,0
    def lastlast92,0
    def cast_values(type_overrides = {}) # :nodoc:cast_values97,0
    def initialize_copy(other)initialize_copy106,0
      def column_type(name, type_overrides = {})column_type115,0
      def hash_rowshash_rows121,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/scoping/named.rb,670
module ActiveRecordActiveRecord5,0
  module ScopingScoping7,0
  module ScopingActiveRecord::Scoping7,0
    module NamedNamed8,0
    module NamedActiveRecord::Scoping::Named8,0
      module ClassMethodsClassMethods11,0
      module ClassMethodsActiveRecord::Scoping::Named::ClassMethods11,0
        def allall24,0
        def scope_for_association(scope = relation) # :nodoc:scope_for_association32,0
        def default_scoped(scope = relation) # :nodoc:default_scoped42,0
        def default_extensions # :nodoc:default_extensions46,0
        def scope(name, body, &block)scope155,0
          def valid_scope_name?(name)valid_scope_name?188,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/scoping/default.rb,824
module ActiveRecordActiveRecord1,0
  module ScopingScoping2,0
  module ScopingActiveRecord::Scoping2,0
    module DefaultDefault3,0
    module DefaultActiveRecord::Scoping::Default3,0
      module ClassMethodsClassMethods15,0
      module ClassMethodsActiveRecord::Scoping::Default::ClassMethods15,0
        def unscopedunscoped34,0
        def scope_attributes? # :nodoc:scope_attributes?39,0
        def before_remove_const #:nodoc:before_remove_const43,0
          def default_scope(scope = nil) # :doc:default_scope90,0
          def build_default_scope(base_rel = nil)build_default_scope104,0
          def ignore_default_scope?ignore_default_scope?129,0
          def ignore_default_scope=(ignore)ignore_default_scope=133,0
          def evaluate_default_scopeevaluate_default_scope140,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_mutation_tracker.rb,1775
module ActiveRecordActiveRecord1,0
  class AttributeMutationTracker # :nodoc:AttributeMutationTracker2,0
  class AttributeMutationTracker # :nodoc:ActiveRecord::AttributeMutationTracker2,0
    OPTION_NOT_GIVEN = Object.newOPTION_NOT_GIVEN3,0
    OPTION_NOT_GIVEN = Object.newActiveRecord::AttributeMutationTracker::OPTION_NOT_GIVEN3,0
    def initialize(attributes)initialize5,0
    def changed_valueschanged_values11,0
    def changeschanges19,0
    def change_to_attribute(attr_name)change_to_attribute28,0
    def any_changes?any_changes?35,0
    def changed?(attr_name, from: OPTION_NOT_GIVEN, to: OPTION_NOT_GIVEN)changed?39,0
    def changed_in_place?(attr_name)changed_in_place?47,0
    def forget_change(attr_name)forget_change51,0
    def original_value(attr_name)original_value57,0
    def force_change(attr_name)force_change61,0
    def deprecated_force_change(attr_name)deprecated_force_change65,0
      attr_reader :attributes, :forced_changes, :deprecated_forced_changesattributes73,0
      attr_reader :attributes, :forced_changes, :deprecated_forced_changesforced_changes73,0
      attr_reader :attributes, :forced_changes, :deprecated_forced_changesdeprecated_forced_changes73,0
      def attr_namesattr_names77,0
  class NullMutationTracker # :nodoc:NullMutationTracker82,0
  class NullMutationTracker # :nodoc:ActiveRecord::NullMutationTracker82,0
    def changed_values(*)changed_values85,0
    def changes(*)changes89,0
    def change_to_attribute(attr_name)change_to_attribute93,0
    def any_changes?(*)any_changes?96,0
    def changed?(*)changed?100,0
    def changed_in_place?(*)changed_in_place?104,0
    def forget_change(*)forget_change108,0
    def original_value(*)original_value111,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/integration.rb,370
module ActiveRecordActiveRecord3,0
  module IntegrationIntegration4,0
  module IntegrationActiveRecord::Integration4,0
    def to_paramto_param40,0
    def cache_key(*timestamp_names)cache_key55,0
    module ClassMethodsClassMethods74,0
    module ClassMethodsActiveRecord::Integration::ClassMethods74,0
      def to_param(method_name = nil)to_param99,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/nested_attributes.rb,2179
module ActiveRecordActiveRecord5,0
  module NestedAttributes #:nodoc:NestedAttributes6,0
  module NestedAttributes #:nodoc:ActiveRecord::NestedAttributes6,0
    class TooManyRecords < ActiveRecordErrorTooManyRecords7,0
    class TooManyRecords < ActiveRecordErrorActiveRecord::NestedAttributes::TooManyRecords7,0
    module ClassMethodsClassMethods269,0
    module ClassMethodsActiveRecord::NestedAttributes::ClassMethods269,0
      REJECT_ALL_BLANK_PROC = proc { |attributes| attributes.all? { |key, value| key == "_destroy" || value.blank? } }REJECT_ALL_BLANK_PROC270,0
      REJECT_ALL_BLANK_PROC = proc { |attributes| attributes.all? { |key, value| key == "_destroy" || value.blank? } }ActiveRecord::NestedAttributes::ClassMethods::REJECT_ALL_BLANK_PROC270,0
      def accepts_nested_attributes_for(*attr_names)accepts_nested_attributes_for319,0
        def generate_association_writer(association_name, type)generate_association_writer355,0
    def _destroy_destroy372,0
      UNASSIGNABLE_KEYS = %w( id _destroy )UNASSIGNABLE_KEYS380,0
      UNASSIGNABLE_KEYS = %w( id _destroy )ActiveRecord::NestedAttributes::UNASSIGNABLE_KEYS380,0
      def assign_nested_attributes_for_one_to_one_association(association_name, attributes)assign_nested_attributes_for_one_to_one_association395,0
      def assign_nested_attributes_for_collection_association(association_name, attributes_collection)assign_nested_attributes_for_collection_association454,0
      def check_record_limit!(limit, attributes_collection)check_record_limit!520,0
      def assign_to_or_mark_for_destruction(record, attributes, allow_destroy)assign_to_or_mark_for_destruction540,0
      def has_destroy_flag?(hash)has_destroy_flag?546,0
      def reject_new_record?(association_name, attributes)reject_new_record?553,0
      def call_reject_if(association_name, attributes)call_reject_if562,0
      def will_be_destroyed?(association_name, attributes)will_be_destroyed?574,0
      def allow_destroy?(association_name)allow_destroy?578,0
      def raise_nested_attributes_record_not_found!(association_name, record_id)raise_nested_attributes_record_not_found!582,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/null_relation.rb,633
module ActiveRecordActiveRecord1,0
  module NullRelation # :nodoc:NullRelation2,0
  module NullRelation # :nodoc:ActiveRecord::NullRelation2,0
    def pluck(*column_names)pluck3,0
    def delete_alldelete_all7,0
    def update_all(_updates)update_all11,0
    def delete(_id_or_array)delete15,0
    def empty?empty?19,0
    def none?none?23,0
    def any?any?27,0
    def one?one?31,0
    def many?many?35,0
    def to_sqlto_sql39,0
    def calculate(operation, _column_name)calculate43,0
    def exists?(_conditions = :none)exists?52,0
    def or(other)or56,0
      def exec_queriesexec_queries62,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/counter_cache.rb,760
module ActiveRecordActiveRecord1,0
  module CounterCacheCounterCache3,0
  module CounterCacheActiveRecord::CounterCache3,0
    module ClassMethodsClassMethods6,0
    module ClassMethodsActiveRecord::CounterCache::ClassMethods6,0
      def reset_counters(id, *counters, touch: nil)reset_counters27,0
      def update_counters(id, counters)update_counters98,0
      def increment_counter(counter_name, id, touch: nil)increment_counter138,0
      def decrement_counter(counter_name, id, touch: nil)decrement_counter163,0
        def touch_updates(touch)touch_updates168,0
      def _create_record(*)_create_record177,0
      def destroy_rowdestroy_row190,0
      def each_counter_cached_associationseach_counter_cached_associations207,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/autosave_association.rb,2419
module ActiveRecordActiveRecord1,0
  module AutosaveAssociationAutosaveAssociation128,0
  module AutosaveAssociationActiveRecord::AutosaveAssociation128,0
    module AssociationBuilderExtension #:nodoc:AssociationBuilderExtension131,0
    module AssociationBuilderExtension #:nodoc:ActiveRecord::AutosaveAssociation::AssociationBuilderExtension131,0
      def self.build(model, reflection)build132,0
      def self.valid_optionsvalid_options136,0
    module ClassMethods # :nodoc:ClassMethods147,0
    module ClassMethods # :nodoc:ActiveRecord::AutosaveAssociation::ClassMethods147,0
        def define_non_cyclic_method(name, &block)define_non_cyclic_method150,0
        def add_autosave_association_callbacks(reflection)add_autosave_association_callbacks179,0
        def define_autosave_validation_callbacks(reflection)define_autosave_validation_callbacks210,0
    def reload(options = nil)reload233,0
    def mark_for_destructionmark_for_destruction244,0
    def marked_for_destruction?marked_for_destruction?251,0
    def destroyed_by_association=(reflection)destroyed_by_association=257,0
    def destroyed_by_associationdestroyed_by_association264,0
    def changed_for_autosave?changed_for_autosave?270,0
      def associated_records_to_validate_or_save(association, new_record, autosave)associated_records_to_validate_or_save279,0
      def nested_records_changed_for_autosave?nested_records_changed_for_autosave?291,0
      def validate_single_association(reflection)validate_single_association309,0
      def validate_collection_association(reflection)validate_collection_association318,0
      def association_valid?(reflection, record, index = nil)association_valid?329,0
      def normalize_reflection_attribute(indexed_attribute, reflection, index, attribute)normalize_reflection_attribute360,0
      def before_save_collection_associationbefore_save_collection_association370,0
      def after_save_collection_associationafter_save_collection_association375,0
      def save_collection_association(reflection)save_collection_association387,0
      def save_has_one_association(reflection)save_has_one_association430,0
      def record_changed?(reflection, record, key)record_changed?456,0
      def save_belongs_to_association(reflection)save_belongs_to_association465,0
      def _ensure_no_duplicate_errors_ensure_no_duplicate_errors490,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/validations.rb,709
module ActiveRecordActiveRecord1,0
  class RecordInvalid < ActiveRecordErrorRecordInvalid13,0
  class RecordInvalid < ActiveRecordErrorActiveRecord::RecordInvalid13,0
    attr_reader :recordrecord14,0
    def initialize(record = nil)initialize16,0
  module ValidationsValidations36,0
  module ValidationsActiveRecord::Validations36,0
    def save(options = {})save43,0
    def save!(options = {})save!49,0
    def valid?(context = nil)valid?63,0
    alias_method :validate, :valid?validate69,0
    def default_validation_contextdefault_validation_context73,0
    def raise_validation_errorraise_validation_error77,0
    def perform_validations(options = {})perform_validations81,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/touch_later.rb,487
module ActiveRecordActiveRecord1,0
  module TouchLaterTouchLater3,0
  module TouchLaterActiveRecord::TouchLater3,0
    def touch_later(*names) # :nodoc:touch_later10,0
    def touch(*names, time: nil) # :nodoc:touch33,0
      def surreptitiously_touch(attrs)surreptitiously_touch42,0
      def touch_deferred_attributestouch_deferred_attributes47,0
      def has_defer_touch_attrs?has_defer_touch_attrs?54,0
      def belongs_to_touch_methodbelongs_to_touch_method58,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/validations/absence.rb,622
module ActiveRecordActiveRecord1,0
  module ValidationsValidations2,0
  module ValidationsActiveRecord::Validations2,0
    class AbsenceValidator < ActiveModel::Validations::AbsenceValidator # :nodoc:AbsenceValidator3,0
    class AbsenceValidator < ActiveModel::Validations::AbsenceValidator # :nodoc:ActiveRecord::Validations::AbsenceValidator3,0
      def validate_each(record, attribute, association_or_value)validate_each4,0
    module ClassMethodsClassMethods12,0
    module ClassMethodsActiveRecord::Validations::ClassMethods12,0
      def validates_absence_of(*attr_names)validates_absence_of18,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/validations/associated.rb,638
module ActiveRecordActiveRecord1,0
  module ValidationsValidations2,0
  module ValidationsActiveRecord::Validations2,0
    class AssociatedValidator < ActiveModel::EachValidator #:nodoc:AssociatedValidator3,0
    class AssociatedValidator < ActiveModel::EachValidator #:nodoc:ActiveRecord::Validations::AssociatedValidator3,0
      def validate_each(record, attribute, value)validate_each4,0
        def valid_object?(record)valid_object?12,0
    module ClassMethodsClassMethods17,0
    module ClassMethodsActiveRecord::Validations::ClassMethods17,0
      def validates_associated(*attr_names)validates_associated53,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/validations/presence.rb,630
module ActiveRecordActiveRecord1,0
  module ValidationsValidations2,0
  module ValidationsActiveRecord::Validations2,0
    class PresenceValidator < ActiveModel::Validations::PresenceValidator # :nodoc:PresenceValidator3,0
    class PresenceValidator < ActiveModel::Validations::PresenceValidator # :nodoc:ActiveRecord::Validations::PresenceValidator3,0
      def validate_each(record, attribute, association_or_value)validate_each4,0
    module ClassMethodsClassMethods12,0
    module ClassMethodsActiveRecord::Validations::ClassMethods12,0
      def validates_presence_of(*attr_names)validates_presence_of61,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/validations/uniqueness.rb,918
module ActiveRecordActiveRecord1,0
  module ValidationsValidations2,0
  module ValidationsActiveRecord::Validations2,0
    class UniquenessValidator < ActiveModel::EachValidator # :nodoc:UniquenessValidator3,0
    class UniquenessValidator < ActiveModel::EachValidator # :nodoc:ActiveRecord::Validations::UniquenessValidator3,0
      def initialize(options)initialize4,0
      def validate_each(record, attribute, value)validate_each13,0
      def find_finder_class_for(record)find_finder_class_for42,0
      def build_relation(klass, attribute, value)build_relation52,0
      def scope_relation(record, relation)scope_relation56,0
      def map_enum_attribute(klass, attribute, value)map_enum_attribute69,0
    module ClassMethodsClassMethods76,0
    module ClassMethodsActiveRecord::Validations::ClassMethods76,0
      def validates_uniqueness_of(*attr_names)validates_uniqueness_of203,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/validations/length.rb,697
module ActiveRecordActiveRecord1,0
  module ValidationsValidations2,0
  module ValidationsActiveRecord::Validations2,0
    class LengthValidator < ActiveModel::Validations::LengthValidator # :nodoc:LengthValidator3,0
    class LengthValidator < ActiveModel::Validations::LengthValidator # :nodoc:ActiveRecord::Validations::LengthValidator3,0
      def validate_each(record, attribute, association_or_value)validate_each4,0
    module ClassMethodsClassMethods12,0
    module ClassMethodsActiveRecord::Validations::ClassMethods12,0
      def validates_length_of(*attr_names)validates_length_of17,0
      alias_method :validates_size_of, :validates_length_ofvalidates_size_of21,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_set.rb,1223
module ActiveRecordActiveRecord4,0
  class AttributeSet # :nodoc:AttributeSet5,0
  class AttributeSet # :nodoc:ActiveRecord::AttributeSet5,0
    delegate :each_value, :fetch, to: :attributeseach_value6,0
    delegate :each_value, :fetch, to: :attributesfetch6,0
    def initialize(attributes)initialize8,0
    def [](name)[]12,0
    def []=(name, value)[]=16,0
    def values_before_type_castvalues_before_type_cast20,0
    def to_hashto_hash24,0
    alias_method :to_h, :to_hashto_h27,0
    def key?(name)key?29,0
    def keyskeys33,0
      def fetch_value(name, &block)fetch_value40,0
      def fetch_value(name)fetch_value44,0
    def write_from_database(name, value)write_from_database49,0
    def write_from_user(name, value)write_from_user53,0
    def write_cast_value(name, value)write_cast_value57,0
    def freezefreeze61,0
    def deep_dupdeep_dup66,0
    def initialize_dup(_)initialize_dup72,0
    def initialize_clone(_)initialize_clone77,0
    def reset(key)reset82,0
    def accessedaccessed88,0
    def map(&block)map92,0
    def ==(other)==97,0
      attr_reader :attributesattributes105,0
      def initialized_attributesinitialized_attributes109,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/core.rb,2070
module ActiveRecordActiveRecord6,0
  module CoreCore7,0
  module CoreActiveRecord::Core7,0
    module ClassMethodsClassMethods152,0
    module ClassMethodsActiveRecord::Core::ClassMethods152,0
      def allocateallocate153,0
      def initialize_find_by_cache # :nodoc:initialize_find_by_cache158,0
      def inherited(child_class) # :nodoc:inherited162,0
      def find(*ids) # :nodoc:find168,0
      def find_by(*args) # :nodoc:find_by198,0
      def find_by!(*args) # :nodoc:find_by!227,0
      def initialize_generated_modules # :nodoc:initialize_generated_modules231,0
      def generated_association_methodsgenerated_association_methods235,0
      def inspectinspect246,0
      def ===(object)===262,0
      def arel_table # :nodoc:arel_table271,0
      def arel_engine # :nodoc:arel_engine276,0
      def arel_attribute(name, table = arel_table) # :nodoc:arel_attribute285,0
      def predicate_builder # :nodoc:predicate_builder290,0
      def type_caster # :nodoc:type_caster294,0
        def cached_find_by_statement(key, &block)cached_find_by_statement300,0
        def relationrelation307,0
        def table_metadatatable_metadata317,0
    def initialize(attributes = nil)initialize330,0
    def init_with(coder)init_with357,0
    def initialize_dup(other) # :nodoc:initialize_dup402,0
    def encode_with(coder)encode_with426,0
    def ==(comparison_object)==441,0
    alias :eql? :==eql?447,0
    def hashhash451,0
    def freezefreeze462,0
    def frozen?frozen?468,0
    def <=>(other_object)<=>473,0
    def readonly?readonly?483,0
    def readonly!readonly!488,0
    def connection_handlerconnection_handler492,0
    def inspectinspect497,0
    def pretty_print(pp)pretty_print515,0
    def slice(*methods)slice538,0
      def to_aryto_ary552,0
      def init_internalsinit_internals556,0
      def initialize_internals_callbackinitialize_internals_callback566,0
      def thawthaw569,0
      def custom_inspect_method_defined?custom_inspect_method_defined?575,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/associations.rb,8501
module ActiveRecordActiveRecord6,0
  class AssociationNotFoundError < ConfigurationError #:nodoc:AssociationNotFoundError7,0
  class AssociationNotFoundError < ConfigurationError #:nodoc:ActiveRecord::AssociationNotFoundError7,0
    def initialize(record = nil, association_name = nil)initialize8,0
  class InverseOfAssociationNotFoundError < ActiveRecordError #:nodoc:InverseOfAssociationNotFoundError17,0
  class InverseOfAssociationNotFoundError < ActiveRecordError #:nodoc:ActiveRecord::InverseOfAssociationNotFoundError17,0
    def initialize(reflection = nil, associated_class = nil)initialize18,0
  class HasManyThroughAssociationNotFoundError < ActiveRecordError #:nodoc:HasManyThroughAssociationNotFoundError27,0
  class HasManyThroughAssociationNotFoundError < ActiveRecordError #:nodoc:ActiveRecord::HasManyThroughAssociationNotFoundError27,0
    def initialize(owner_class_name = nil, reflection = nil)initialize28,0
  class HasManyThroughAssociationPolymorphicSourceError < ActiveRecordError #:nodoc:HasManyThroughAssociationPolymorphicSourceError37,0
  class HasManyThroughAssociationPolymorphicSourceError < ActiveRecordError #:nodoc:ActiveRecord::HasManyThroughAssociationPolymorphicSourceError37,0
    def initialize(owner_class_name = nil, reflection = nil, source_reflection = nil)initialize38,0
  class HasManyThroughAssociationPolymorphicThroughError < ActiveRecordError #:nodoc:HasManyThroughAssociationPolymorphicThroughError47,0
  class HasManyThroughAssociationPolymorphicThroughError < ActiveRecordError #:nodoc:ActiveRecord::HasManyThroughAssociationPolymorphicThroughError47,0
    def initialize(owner_class_name = nil, reflection = nil)initialize48,0
  class HasManyThroughAssociationPointlessSourceTypeError < ActiveRecordError #:nodoc:HasManyThroughAssociationPointlessSourceTypeError57,0
  class HasManyThroughAssociationPointlessSourceTypeError < ActiveRecordError #:nodoc:ActiveRecord::HasManyThroughAssociationPointlessSourceTypeError57,0
    def initialize(owner_class_name = nil, reflection = nil, source_reflection = nil)initialize58,0
  class HasOneThroughCantAssociateThroughCollection < ActiveRecordError #:nodoc:HasOneThroughCantAssociateThroughCollection67,0
  class HasOneThroughCantAssociateThroughCollection < ActiveRecordError #:nodoc:ActiveRecord::HasOneThroughCantAssociateThroughCollection67,0
    def initialize(owner_class_name = nil, reflection = nil, through_reflection = nil)initialize68,0
  class HasOneAssociationPolymorphicThroughError < ActiveRecordError #:nodoc:HasOneAssociationPolymorphicThroughError77,0
  class HasOneAssociationPolymorphicThroughError < ActiveRecordError #:nodoc:ActiveRecord::HasOneAssociationPolymorphicThroughError77,0
    def initialize(owner_class_name = nil, reflection = nil)initialize78,0
  class HasManyThroughSourceAssociationNotFoundError < ActiveRecordError #:nodoc:HasManyThroughSourceAssociationNotFoundError87,0
  class HasManyThroughSourceAssociationNotFoundError < ActiveRecordError #:nodoc:ActiveRecord::HasManyThroughSourceAssociationNotFoundError87,0
    def initialize(reflection = nil)initialize88,0
  class HasManyThroughOrderError < ActiveRecordError #:nodoc:HasManyThroughOrderError100,0
  class HasManyThroughOrderError < ActiveRecordError #:nodoc:ActiveRecord::HasManyThroughOrderError100,0
    def initialize(owner_class_name = nil, reflection = nil, through_reflection = nil)initialize101,0
  class ThroughCantAssociateThroughHasOneOrManyReflection < ActiveRecordError #:nodoc:ThroughCantAssociateThroughHasOneOrManyReflection110,0
  class ThroughCantAssociateThroughHasOneOrManyReflection < ActiveRecordError #:nodoc:ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection110,0
    def initialize(owner = nil, reflection = nil)initialize111,0
  class AmbiguousSourceReflectionForThroughAssociation < ActiveRecordError # :nodoc:AmbiguousSourceReflectionForThroughAssociation120,0
  class AmbiguousSourceReflectionForThroughAssociation < ActiveRecordError # :nodoc:ActiveRecord::AmbiguousSourceReflectionForThroughAssociation120,0
    def initialize(klass, macro, association_name, options, possible_sources)initialize121,0
  class HasManyThroughCantAssociateThroughHasOneOrManyReflection < ThroughCantAssociateThroughHasOneOrManyReflection #:nodoc:HasManyThroughCantAssociateThroughHasOneOrManyReflection135,0
  class HasManyThroughCantAssociateThroughHasOneOrManyReflection < ThroughCantAssociateThroughHasOneOrManyReflection #:nodoc:ActiveRecord::HasManyThroughCantAssociateThroughHasOneOrManyReflection135,0
  class HasOneThroughCantAssociateThroughHasOneOrManyReflection < ThroughCantAssociateThroughHasOneOrManyReflection #:nodoc:HasOneThroughCantAssociateThroughHasOneOrManyReflection138,0
  class HasOneThroughCantAssociateThroughHasOneOrManyReflection < ThroughCantAssociateThroughHasOneOrManyReflection #:nodoc:ActiveRecord::HasOneThroughCantAssociateThroughHasOneOrManyReflection138,0
  class HasManyThroughCantAssociateNewRecords < ActiveRecordError #:nodoc:HasManyThroughCantAssociateNewRecords141,0
  class HasManyThroughCantAssociateNewRecords < ActiveRecordError #:nodoc:ActiveRecord::HasManyThroughCantAssociateNewRecords141,0
    def initialize(owner = nil, reflection = nil)initialize142,0
  class HasManyThroughCantDissociateNewRecords < ActiveRecordError #:nodoc:HasManyThroughCantDissociateNewRecords151,0
  class HasManyThroughCantDissociateNewRecords < ActiveRecordError #:nodoc:ActiveRecord::HasManyThroughCantDissociateNewRecords151,0
    def initialize(owner = nil, reflection = nil)initialize152,0
  class ThroughNestedAssociationsAreReadonly < ActiveRecordError #:nodoc:ThroughNestedAssociationsAreReadonly161,0
  class ThroughNestedAssociationsAreReadonly < ActiveRecordError #:nodoc:ActiveRecord::ThroughNestedAssociationsAreReadonly161,0
    def initialize(owner = nil, reflection = nil)initialize162,0
  class HasManyThroughNestedAssociationsAreReadonly < ThroughNestedAssociationsAreReadonly #:nodoc:HasManyThroughNestedAssociationsAreReadonly171,0
  class HasManyThroughNestedAssociationsAreReadonly < ThroughNestedAssociationsAreReadonly #:nodoc:ActiveRecord::HasManyThroughNestedAssociationsAreReadonly171,0
  class HasOneThroughNestedAssociationsAreReadonly < ThroughNestedAssociationsAreReadonly #:nodoc:HasOneThroughNestedAssociationsAreReadonly174,0
  class HasOneThroughNestedAssociationsAreReadonly < ThroughNestedAssociationsAreReadonly #:nodoc:ActiveRecord::HasOneThroughNestedAssociationsAreReadonly174,0
  class EagerLoadPolymorphicError < ActiveRecordErrorEagerLoadPolymorphicError180,0
  class EagerLoadPolymorphicError < ActiveRecordErrorActiveRecord::EagerLoadPolymorphicError180,0
    def initialize(reflection = nil)initialize181,0
  class ReadOnlyAssociation < ActiveRecordError #:nodoc:ReadOnlyAssociation190,0
  class ReadOnlyAssociation < ActiveRecordError #:nodoc:ActiveRecord::ReadOnlyAssociation190,0
    def initialize(reflection = nil)initialize191,0
  class DeleteRestrictionError < ActiveRecordError #:nodoc:DeleteRestrictionError203,0
  class DeleteRestrictionError < ActiveRecordError #:nodoc:ActiveRecord::DeleteRestrictionError203,0
    def initialize(name = nil)initialize204,0
  module Associations # :nodoc:Associations214,0
  module Associations # :nodoc:ActiveRecord::Associations214,0
    module Builder #:nodoc:Builder227,0
    module Builder #:nodoc:ActiveRecord::Associations::Builder227,0
    def self.eager_load!eager_load!252,0
    def association(name) #:nodoc:association258,0
    def association_cached?(name) # :nodocassociation_cached?272,0
    def initialize_dup(*) # :nodoc:initialize_dup276,0
    def reload(*) # :nodoc:reload281,0
      def clear_association_cacheclear_association_cache288,0
      def init_internalsinit_internals292,0
      def association_instance_get(name)association_instance_get298,0
      def association_instance_set(name, association)association_instance_set303,0
      module ClassMethodsClassMethods1185,0
      module ClassMethodsActiveRecord::Associations::ClassMethods1185,0
        def has_many(name, scope = nil, options = {}, &extension)has_many1401,0
        def has_one(name, scope = nil, options = {})has_one1535,0
        def belongs_to(name, scope = nil, options = {})belongs_to1679,0
        def has_and_belongs_to_many(name, scope = nil, **options, &extension)has_and_belongs_to_many1844,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/table_metadata.rb,1104
module ActiveRecordActiveRecord1,0
  class TableMetadata # :nodoc:TableMetadata2,0
  class TableMetadata # :nodoc:ActiveRecord::TableMetadata2,0
    delegate :foreign_type, :foreign_key, to: :association, prefix: trueassociation_foreign_type3,0
    delegate :foreign_type, :foreign_key, to: :association, prefix: trueassociation_foreign_key3,0
    delegate :association_primary_key, to: :associationassociation_primary_key4,0
    def initialize(klass, arel_table, association = nil)initialize6,0
    def resolve_column_aliases(hash)resolve_column_aliases12,0
    def arel_attribute(column_name)arel_attribute22,0
    def type(column_name)type30,0
    def has_column?(column_name)has_column?38,0
    def associated_with?(association_name)associated_with?42,0
    def associated_table(table_name)associated_table46,0
    def polymorphic_association?polymorphic_association?63,0
      attr_reader :klass, :arel_table, :associationklass71,0
      attr_reader :klass, :arel_table, :associationarel_table71,0
      attr_reader :klass, :arel_table, :associationassociation71,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/railtie.rb,164
module ActiveRecordActiveRecord11,0
  class Railtie < Rails::Railtie # :nodoc:Railtie13,0
  class Railtie < Rails::Railtie # :nodoc:ActiveRecord::Railtie13,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type/type_map.rb,549
module ActiveRecordActiveRecord3,0
  module TypeType4,0
  module TypeActiveRecord::Type4,0
    class TypeMap # :nodoc:TypeMap5,0
    class TypeMap # :nodoc:ActiveRecord::Type::TypeMap5,0
      def initializeinitialize6,0
      def lookup(lookup_key, *args)lookup13,0
      def fetch(lookup_key, *args, &block)fetch17,0
      def register_type(key, value = nil, &block)register_type23,0
      def alias_type(key, target_key)alias_type34,0
      def clearclear41,0
        def perform_fetch(lookup_key, *args)perform_fetch47,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type/date.rb,217
module ActiveRecordActiveRecord1,0
  module TypeType2,0
  module TypeActiveRecord::Type2,0
    class Date < ActiveModel::Type::DateDate3,0
    class Date < ActiveModel::Type::DateActiveRecord::Type::Date3,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type/serialized.rb,817
module ActiveRecordActiveRecord1,0
  module TypeType2,0
  module TypeActiveRecord::Type2,0
    class Serialized < DelegateClass(ActiveModel::Type::Value) # :nodoc:Serialized3,0
    class Serialized < DelegateClass(ActiveModel::Type::Value) # :nodoc:ActiveRecord::Type::Serialized3,0
      attr_reader :subtype, :codersubtype8,0
      attr_reader :subtype, :codercoder8,0
      def initialize(subtype, coder)initialize10,0
      def deserialize(value)deserialize16,0
      def serialize(value)serialize24,0
      def inspectinspect31,0
      def changed_in_place?(raw_old_value, value)changed_in_place?35,0
      def accessoraccessor42,0
      def assert_valid_value(value)assert_valid_value46,0
        def default_value?(value)default_value?54,0
        def encoded(value)encoded58,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type/date_time.rb,241
module ActiveRecordActiveRecord1,0
  module TypeType2,0
  module TypeActiveRecord::Type2,0
    class DateTime < ActiveModel::Type::DateTimeDateTime3,0
    class DateTime < ActiveModel::Type::DateTimeActiveRecord::Type::DateTime3,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type/text.rb,265
module ActiveRecordActiveRecord1,0
  module TypeType2,0
  module TypeActiveRecord::Type2,0
    class Text < ActiveModel::Type::String # :nodoc:Text3,0
    class Text < ActiveModel::Type::String # :nodoc:ActiveRecord::Type::Text3,0
      def typetype4,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type/hash_lookup_type_map.rb,431
module ActiveRecordActiveRecord1,0
  module TypeType2,0
  module TypeActiveRecord::Type2,0
    class HashLookupTypeMap < TypeMap # :nodoc:HashLookupTypeMap3,0
    class HashLookupTypeMap < TypeMap # :nodoc:ActiveRecord::Type::HashLookupTypeMap3,0
      def alias_type(type, alias_type)alias_type4,0
      def key?(key)key?8,0
      def keyskeys12,0
        def perform_fetch(type, *args, &block)perform_fetch18,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type/adapter_specific_registry.rb,2157
module ActiveRecordActiveRecord3,0
  module TypeType5,0
  module TypeActiveRecord::Type5,0
    class AdapterSpecificRegistry < ActiveModel::Type::RegistryAdapterSpecificRegistry6,0
    class AdapterSpecificRegistry < ActiveModel::Type::RegistryActiveRecord::Type::AdapterSpecificRegistry6,0
      def add_modifier(options, klass, **args)add_modifier7,0
        def registration_klassregistration_klass13,0
        def find_registration(symbol, *args)find_registration17,0
    class RegistrationRegistration24,0
    class RegistrationActiveRecord::Type::Registration24,0
      def initialize(name, block, adapter: nil, override: nil)initialize25,0
      def call(_registry, *args, adapter: nil, **kwargs)call32,0
      def matches?(type_name, *args, **kwargs)matches?40,0
      def <=>(other)<=>44,0
        attr_reader :name, :block, :adapter, :overridename57,0
        attr_reader :name, :block, :adapter, :overrideblock57,0
        attr_reader :name, :block, :adapter, :overrideadapter57,0
        attr_reader :name, :block, :adapter, :overrideoverride57,0
        def prioritypriority59,0
        def priority_except_adapterpriority_except_adapter70,0
        def matches_adapter?(adapter: nil, **)matches_adapter?76,0
        def conflicts_with?(other)conflicts_with?80,0
        def same_priority_except_adapter?(other)same_priority_except_adapter?85,0
        def has_adapter_conflict?(other)has_adapter_conflict?89,0
    class DecorationRegistration < RegistrationDecorationRegistration95,0
    class DecorationRegistration < RegistrationActiveRecord::Type::DecorationRegistration95,0
      def initialize(options, klass, adapter: nil)initialize96,0
      def call(registry, *args, **kwargs)call102,0
      def matches?(*args, **kwargs)matches?107,0
      def prioritypriority111,0
        attr_reader :options, :klassoptions119,0
        attr_reader :options, :klassklass119,0
        def matches_options?(**kwargs)matches_options?123,0
  class TypeConflictError < StandardErrorTypeConflictError131,0
  class TypeConflictError < StandardErrorActiveRecord::TypeConflictError131,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type/internal/timezone.rb,365
module ActiveRecordActiveRecord1,0
  module TypeType2,0
  module TypeActiveRecord::Type2,0
    module InternalInternal3,0
    module InternalActiveRecord::Type::Internal3,0
      module TimezoneTimezone4,0
      module TimezoneActiveRecord::Type::Internal::Timezone4,0
        def is_utc?is_utc?5,0
        def default_timezonedefault_timezone9,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type/internal/abstract_json.rb,623
module ActiveRecordActiveRecord1,0
  module TypeType2,0
  module TypeActiveRecord::Type2,0
    module Internal # :nodoc:Internal3,0
    module Internal # :nodoc:ActiveRecord::Type::Internal3,0
      class AbstractJson < ActiveModel::Type::Value # :nodoc:AbstractJson4,0
      class AbstractJson < ActiveModel::Type::Value # :nodoc:ActiveRecord::Type::Internal::AbstractJson4,0
        def typetype7,0
        def deserialize(value)deserialize11,0
        def serialize(value)serialize19,0
        def changed_in_place?(raw_old_value, new_value)changed_in_place?27,0
        def accessoraccessor31,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type/unsigned_integer.rb,360
module ActiveRecordActiveRecord1,0
  module TypeType2,0
  module TypeActiveRecord::Type2,0
    class UnsignedInteger < ActiveModel::Type::Integer # :nodoc:UnsignedInteger3,0
    class UnsignedInteger < ActiveModel::Type::Integer # :nodoc:ActiveRecord::Type::UnsignedInteger3,0
        def max_valuemax_value6,0
        def min_valuemin_value10,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type/decimal_without_scale.rb,396
module ActiveRecordActiveRecord1,0
  module TypeType2,0
  module TypeActiveRecord::Type2,0
    class DecimalWithoutScale < ActiveModel::Type::BigInteger # :nodoc:DecimalWithoutScale3,0
    class DecimalWithoutScale < ActiveModel::Type::BigInteger # :nodoc:ActiveRecord::Type::DecimalWithoutScale3,0
      def typetype4,0
      def type_cast_for_schema(value)type_cast_for_schema8,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type/time.rb,408
module ActiveRecordActiveRecord1,0
  module TypeType2,0
  module TypeActiveRecord::Type2,0
    class Time < ActiveModel::Type::TimeTime3,0
    class Time < ActiveModel::Type::TimeActiveRecord::Type::Time3,0
      class Value < DelegateClass(::Time) # :nodoc:Value6,0
      class Value < DelegateClass(::Time) # :nodoc:ActiveRecord::Type::Time::Value6,0
      def serialize(value)serialize9,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/legacy_yaml_adapter.rb,494
module ActiveRecordActiveRecord1,0
  module LegacyYamlAdapterLegacyYamlAdapter2,0
  module LegacyYamlAdapterActiveRecord::LegacyYamlAdapter2,0
    def self.convert(klass, coder)convert3,0
    module Rails420Rails42017,0
    module Rails420ActiveRecord::LegacyYamlAdapter::Rails42017,0
      def self.convert(klass, coder)convert18,0
    module Rails41Rails4133,0
    module Rails41ActiveRecord::LegacyYamlAdapter::Rails4133,0
      def self.convert(klass, coder)convert34,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/internal_metadata.rb,425
module ActiveRecordActiveRecord4,0
  class InternalMetadata < ActiveRecord::Base # :nodoc:InternalMetadata7,0
  class InternalMetadata < ActiveRecord::Base # :nodoc:ActiveRecord::InternalMetadata7,0
      def primary_keyprimary_key9,0
      def table_nametable_name13,0
      def []=(key, value)[]=17,0
      def [](key)[]21,0
      def table_exists?table_exists?25,0
      def create_tablecreate_table30,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/type.rb,1678
module ActiveRecordActiveRecord19,0
  module TypeType20,0
  module TypeActiveRecord::Type20,0
      attr_accessor :registry # :nodoc:registry24,0
      attr_accessor :registry # :nodoc:registry=24,0
      delegate :add_modifier, to: :registryadd_modifier25,0
      def register(type_name, klass = nil, **options, &block)register35,0
      def lookup(*args, adapter: current_adapter_name, **kwargs) # :nodoc:lookup39,0
      def default_value # :nodoc:default_value43,0
      def current_adapter_namecurrent_adapter_name49,0
    Helpers = ActiveModel::Type::HelpersHelpers54,0
    Helpers = ActiveModel::Type::HelpersActiveRecord::Type::Helpers54,0
    BigInteger = ActiveModel::Type::BigIntegerBigInteger55,0
    BigInteger = ActiveModel::Type::BigIntegerActiveRecord::Type::BigInteger55,0
    Binary = ActiveModel::Type::BinaryBinary56,0
    Binary = ActiveModel::Type::BinaryActiveRecord::Type::Binary56,0
    Boolean = ActiveModel::Type::BooleanBoolean57,0
    Boolean = ActiveModel::Type::BooleanActiveRecord::Type::Boolean57,0
    Decimal = ActiveModel::Type::DecimalDecimal58,0
    Decimal = ActiveModel::Type::DecimalActiveRecord::Type::Decimal58,0
    Float = ActiveModel::Type::FloatFloat59,0
    Float = ActiveModel::Type::FloatActiveRecord::Type::Float59,0
    Integer = ActiveModel::Type::IntegerInteger60,0
    Integer = ActiveModel::Type::IntegerActiveRecord::Type::Integer60,0
    String = ActiveModel::Type::StringString61,0
    String = ActiveModel::Type::StringActiveRecord::Type::String61,0
    Value = ActiveModel::Type::ValueValue62,0
    Value = ActiveModel::Type::ValueActiveRecord::Type::Value62,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/sqlite3_adapter.rb,5511
module ActiveRecordActiveRecord13,0
  module ConnectionHandling # :nodoc:ConnectionHandling14,0
  module ConnectionHandling # :nodoc:ActiveRecord::ConnectionHandling14,0
    def sqlite3_connection(config)sqlite3_connection15,0
  module ConnectionAdapters #:nodoc:ConnectionAdapters47,0
  module ConnectionAdapters #:nodoc:ActiveRecord::ConnectionAdapters47,0
    class SQLite3Adapter < AbstractAdapterSQLite3Adapter54,0
    class SQLite3Adapter < AbstractAdapterActiveRecord::ConnectionAdapters::SQLite3Adapter54,0
      ADAPTER_NAME = "SQLite".freezeADAPTER_NAME55,0
      ADAPTER_NAME = "SQLite".freezeActiveRecord::ConnectionAdapters::SQLite3Adapter::ADAPTER_NAME55,0
      NATIVE_DATABASE_TYPES = {NATIVE_DATABASE_TYPES61,0
      NATIVE_DATABASE_TYPES = {ActiveRecord::ConnectionAdapters::SQLite3Adapter::NATIVE_DATABASE_TYPES61,0
      class StatementPool < ConnectionAdapters::StatementPoolStatementPool75,0
      class StatementPool < ConnectionAdapters::StatementPoolActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool75,0
          def dealloc(stmt)dealloc78,0
      def update_table_definition(table_name, base) # :nodoc:update_table_definition83,0
      def schema_creation # :nodoc:schema_creation87,0
      def arel_visitor # :nodoc:arel_visitor91,0
      def initialize(connection, logger, connection_options, config)initialize95,0
      def supports_ddl_transactions?supports_ddl_transactions?104,0
      def supports_savepoints?supports_savepoints?108,0
      def supports_partial_index?supports_partial_index?112,0
      def supports_statement_cache?supports_statement_cache?118,0
      def requires_reloading?requires_reloading?122,0
      def supports_foreign_keys_in_create?supports_foreign_keys_in_create?126,0
      def supports_views?supports_views?130,0
      def supports_datetime_with_precision?supports_datetime_with_precision?134,0
      def supports_multi_insert?supports_multi_insert?138,0
      def active?active?142,0
      def disconnect!disconnect!148,0
      def clear_cache!clear_cache!155,0
      def supports_index_sort_order?supports_index_sort_order?159,0
      def allowed_index_name_lengthallowed_index_name_length166,0
      def native_database_types #:nodoc:native_database_types170,0
      def encodingencoding175,0
      def supports_explain?supports_explain?179,0
      def disable_referential_integrity # :nodoc:disable_referential_integrity185,0
      def explain(arel, binds = [])explain200,0
      def exec_query(sql, name = nil, binds = [], prepare: false)exec_query205,0
      def exec_delete(sql, name = "SQL", binds = [])exec_delete238,0
      alias :exec_update :exec_deleteexec_update242,0
      def last_inserted_id(result)last_inserted_id244,0
      def execute(sql, name = nil) #:nodoc:execute248,0
      def begin_db_transaction #:nodoc:begin_db_transaction256,0
      def commit_db_transaction #:nodoc:commit_db_transaction260,0
      def exec_rollback_db_transaction #:nodoc:exec_rollback_db_transaction264,0
      def new_column_from_field(table_name, field) # :nondoc:new_column_from_field270,0
      def indexes(table_name, name = nil) #:nodoc:indexes287,0
      def primary_keys(table_name) # :nodoc:primary_keys317,0
      def remove_index(table_name, options = {}) #:nodoc:remove_index322,0
      def rename_table(table_name, new_name)rename_table331,0
      def valid_alter_table_type?(type)valid_alter_table_type?338,0
      def add_column(table_name, column_name, type, options = {}) #:nodoc:add_column342,0
      def remove_column(table_name, column_name, type = nil, options = {}) #:nodoc:remove_column352,0
      def change_column_default(table_name, column_name, default_or_changes) #:nodoc:change_column_default358,0
      def change_column_null(table_name, column_name, null, default = nil) #:nodoc:change_column_null366,0
      def change_column(table_name, column_name, type, options = {}) #:nodoc:change_column375,0
      def rename_column(table_name, column_name, new_column_name) #:nodoc:rename_column389,0
      def add_reference(table_name, ref_name, **options) # :nodoc:add_reference395,0
      alias :add_belongs_to :add_referenceadd_belongs_to398,0
      def foreign_keys(table_name)foreign_keys400,0
        def table_structure(table_name)table_structure415,0
        alias column_definitions table_structurecolumn_definitions420,0
        def alter_table(table_name, options = {})alter_table422,0
        def move_table(from, to, options = {}, &block)move_table433,0
        def copy_table(from, to, options = {})copy_table438,0
        def copy_table_indexes(from, to, rename = {})copy_table_indexes467,0
        def copy_table_contents(from, to, columns, rename = {})copy_table_contents494,0
        def sqlite_versionsqlite_version507,0
        def translate_exception(exception, message)translate_exception511,0
        COLLATE_REGEX = /.*\"(\w+)\".*collate\s+\"(\w+)\".*/i.freezeCOLLATE_REGEX528,0
        COLLATE_REGEX = /.*\"(\w+)\".*collate\s+\"(\w+)\".*/i.freezeActiveRecord::ConnectionAdapters::SQLite3Adapter::COLLATE_REGEX528,0
        def table_structure_with_collation(table_name, basic_structure)table_structure_with_collation530,0
        def create_table_definition(*args)create_table_definition569,0
        def extract_foreign_key_action(specifier)extract_foreign_key_action573,0
        def configure_connectionconfigure_connection581,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/abstract/connection_pool.rb,6700
module ActiveRecordActiveRecord5,0
  class ConnectionTimeoutError < ConnectionNotEstablishedConnectionTimeoutError9,0
  class ConnectionTimeoutError < ConnectionNotEstablishedActiveRecord::ConnectionTimeoutError9,0
  class ExclusiveConnectionTimeoutError < ConnectionTimeoutErrorExclusiveConnectionTimeoutError16,0
  class ExclusiveConnectionTimeoutError < ConnectionTimeoutErrorActiveRecord::ExclusiveConnectionTimeoutError16,0
  module ConnectionAdaptersConnectionAdapters19,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters19,0
    class ConnectionPoolConnectionPool82,0
    class ConnectionPoolActiveRecord::ConnectionAdapters::ConnectionPool82,0
      class QueueQueue88,0
      class QueueActiveRecord::ConnectionAdapters::ConnectionPool::Queue88,0
        def initialize(lock = Monitor.new)initialize89,0
        def any_waiting?any_waiting?97,0
        def num_waitingnum_waiting105,0
        def add(element)add112,0
        def delete(element)delete120,0
        def clearclear127,0
        def poll(timeout = nil)poll147,0
          def internal_poll(timeout)internal_poll153,0
          def synchronize(&block)synchronize157,0
          def any?any?162,0
          def can_remove_no_wait?can_remove_no_wait?170,0
          def removeremove175,0
          def no_wait_pollno_wait_poll182,0
          def wait_poll(timeout)wait_poll188,0
      module BiasableQueue # :nodoc:BiasableQueue212,0
      module BiasableQueue # :nodoc:ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue212,0
        class BiasedConditionVariable # :nodoc:BiasedConditionVariable213,0
        class BiasedConditionVariable # :nodoc:ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue::BiasedConditionVariable213,0
          def initialize(lock, other_cond, preferred_thread)initialize216,0
          def broadcastbroadcast223,0
          def broadcast_on_biasedbroadcast_on_biased228,0
          def signalsignal233,0
          def wait(timeout)wait242,0
        def with_a_bias_for(thread)with_a_bias_for252,0
      class ConnectionLeasingQueue < Queue # :nodoc:ConnectionLeasingQueue273,0
      class ConnectionLeasingQueue < Queue # :nodoc:ActiveRecord::ConnectionAdapters::ConnectionPool::ConnectionLeasingQueue273,0
          def internal_poll(timeout)internal_poll277,0
      class ReaperReaper290,0
      class ReaperActiveRecord::ConnectionAdapters::ConnectionPool::Reaper290,0
        attr_reader :pool, :frequencypool291,0
        attr_reader :pool, :frequencyfrequency291,0
        def initialize(pool, frequency)initialize293,0
        def runrun298,0
      attr_accessor :automatic_reconnect, :checkout_timeout, :schema_cacheautomatic_reconnect312,0
      attr_accessor :automatic_reconnect, :checkout_timeout, :schema_cacheautomatic_reconnect=312,0
      attr_accessor :automatic_reconnect, :checkout_timeout, :schema_cachecheckout_timeout312,0
      attr_accessor :automatic_reconnect, :checkout_timeout, :schema_cachecheckout_timeout=312,0
      attr_accessor :automatic_reconnect, :checkout_timeout, :schema_cacheschema_cache312,0
      attr_accessor :automatic_reconnect, :checkout_timeout, :schema_cacheschema_cache=312,0
      attr_reader :spec, :connections, :size, :reaperspec313,0
      attr_reader :spec, :connections, :size, :reaperconnections313,0
      attr_reader :spec, :connections, :size, :reapersize313,0
      attr_reader :spec, :connections, :size, :reaperreaper313,0
      def initialize(spec)initialize321,0
      def lock_thread=(lock_thread)lock_thread=360,0
      def connectionconnection373,0
      def active_connection?active_connection?382,0
      def release_connection(owner_thread = Thread.current)release_connection393,0
      def with_connectionwith_connection403,0
      def connected?connected?414,0
      def disconnect(raise_on_acquisition_timeout = true)disconnect424,0
      def disconnect!disconnect!446,0
      def clear_reloadable_connections(raise_on_acquisition_timeout = true)clear_reloadable_connections457,0
      def clear_reloadable_connections!clear_reloadable_connections!481,0
      def checkout(checkout_timeout = @checkout_timeout)checkout499,0
      def checkin(conn)checkin508,0
      def remove(conn)remove524,0
      def reapreap556,0
      def num_waiting_in_queue # :nodoc:num_waiting_in_queue575,0
      def statstat583,0
        def bulk_make_new_connections(num_new_conns_needed)bulk_make_new_connections600,0
        def connection_cache_key(thread)connection_cache_key615,0
        def with_exclusively_acquired_all_connections(raise_on_acquisition_timeout = true)with_exclusively_acquired_all_connections623,0
        def attempt_to_checkout_all_existing_connections(raise_on_acquisition_timeout = true)attempt_to_checkout_all_existing_connections630,0
        def checkout_for_exclusive_access(checkout_timeout)checkout_for_exclusive_access676,0
        def with_new_connections_blockedwith_new_connections_blocked696,0
        def acquire_connection(checkout_timeout)acquire_connection736,0
        def remove_connection_from_thread_cache(conn, owner_thread = conn.owner)remove_connection_from_thread_cache753,0
        alias_method :release, :remove_connection_from_thread_cacherelease756,0
        def new_connectionnew_connection758,0
        def try_to_checkout_new_connectiontry_to_checkout_new_connection769,0
        def adopt_connection(conn)adopt_connection796,0
        def checkout_new_connectioncheckout_new_connection801,0
        def checkout_and_verify(c)checkout_and_verify806,0
    class ConnectionHandlerConnectionHandler865,0
    class ConnectionHandlerActiveRecord::ConnectionAdapters::ConnectionHandler865,0
      def initializeinitialize866,0
      def connection_pool_listconnection_pool_list873,0
      alias :connection_pools :connection_pool_listconnection_pools876,0
      def establish_connection(config)establish_connection878,0
      def active_connections?active_connections?902,0
      def clear_active_connections!clear_active_connections!909,0
      def clear_reloadable_connections!clear_reloadable_connections!916,0
      def clear_all_connections!clear_all_connections!920,0
      def retrieve_connection(spec_name) #:nodoc:retrieve_connection928,0
      def connected?(spec_name)connected?938,0
      def remove_connection(spec_name)remove_connection947,0
      def retrieve_connection_pool(spec_name)retrieve_connection_pool958,0
        def owner_to_poolowner_to_pool977,0
        def pool_from_any_process_for(spec_name)pool_from_any_process_for981,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/abstract/schema_statements.rb,6382
module ActiveRecordActiveRecord5,0
  module ConnectionAdapters # :nodoc:ConnectionAdapters6,0
  module ConnectionAdapters # :nodoc:ActiveRecord::ConnectionAdapters6,0
    module SchemaStatementsSchemaStatements7,0
    module SchemaStatementsActiveRecord::ConnectionAdapters::SchemaStatements7,0
      def native_database_typesnative_database_types13,0
      def table_options(table_name)table_options17,0
      def table_comment(table_name)table_comment22,0
      def table_alias_for(table_name)table_alias_for27,0
      def data_sourcesdata_sources33,0
      def data_source_exists?(name)data_source_exists?43,0
      def tablestables50,0
      def table_exists?(table_name)table_exists?58,0
      def viewsviews65,0
      def view_exists?(view_name)view_exists?73,0
      def indexes(table_name, name = nil)indexes80,0
      def index_exists?(table_name, column_name, options = {})index_exists?98,0
      def columns(table_name)columns110,0
      def column_exists?(table_name, column_name, type = nil, options = {})column_exists?128,0
      def primary_key(table_name)primary_key141,0
      def create_table(table_name, comment: nil, **options)create_table267,0
      def create_join_table(table_1, table_2, column_options: {}, **options)create_join_table345,0
      def drop_join_table(table_1, table_2, options = {})drop_join_table365,0
      def change_table(table_name, options = {})change_table440,0
      def rename_table(table_name, new_name)rename_table454,0
      def drop_table(table_name, options = {})drop_table470,0
      def add_column(table_name, column_name, type, options = {})add_column551,0
      def remove_columns(table_name, *column_names)remove_columns561,0
      def remove_column(table_name, column_name, type = nil, options = {})remove_column575,0
      def change_column(table_name, column_name, type, options = {})change_column585,0
      def change_column_default(table_name, column_name, default_or_changes)change_column_default603,0
      def change_column_null(table_name, column_name, null, default = nil)change_column_null623,0
      def rename_column(table_name, column_name, new_column_name)rename_column631,0
      def add_index(table_name, column_name, options = {})add_index723,0
      def remove_index(table_name, options = {})remove_index746,0
      def rename_index(table_name, old_name, new_name)rename_index757,0
      def index_name(table_name, options) #:nodoc:index_name767,0
      def index_name_exists?(table_name, index_name, default = nil)index_name_exists?782,0
      def add_reference(table_name, ref_name, **options)add_reference838,0
      alias :add_belongs_to :add_referenceadd_belongs_to841,0
      def remove_reference(table_name, ref_name, foreign_key: false, polymorphic: false, **options)remove_reference858,0
      alias :remove_belongs_to :remove_referenceremove_belongs_to873,0
      def foreign_keys(table_name)foreign_keys877,0
      def add_foreign_key(from_table, to_table, options = {})add_foreign_key923,0
      def remove_foreign_key(from_table, options_or_to_table = {})remove_foreign_key951,0
      def foreign_key_exists?(from_table, options_or_to_table = {})foreign_key_exists?973,0
      def foreign_key_for(from_table, options_or_to_table = {}) # :nodoc:foreign_key_for977,0
      def foreign_key_for!(from_table, options_or_to_table = {}) # :nodoc:foreign_key_for!982,0
      def foreign_key_column_for(table_name) # :nodoc:foreign_key_column_for987,0
      def foreign_key_options(from_table, to_table, options) # :nodoc:foreign_key_options994,0
      def dump_schema_information #:nodoc:dump_schema_information1001,0
      def insert_versions_sql(versions) # :nodoc:insert_versions_sql1006,0
      def initialize_schema_migrations_table # :nodoc:initialize_schema_migrations_table1019,0
      def initialize_internal_metadata_table # :nodoc:initialize_internal_metadata_table1024,0
      def internal_string_options_for_primary_key # :nodoc:internal_string_options_for_primary_key1029,0
      def assume_migrated_upto_version(version, migrations_paths)assume_migrated_upto_version1033,0
      def type_to_sql(type, limit: nil, precision: nil, scale: nil, **) # :nodoc:type_to_sql1062,0
      def columns_for_distinct(columns, orders) # :nodoc:columns_for_distinct1102,0
      def add_timestamps(table_name, options = {})add_timestamps1111,0
      def remove_timestamps(table_name, options = {})remove_timestamps1122,0
      def update_table_definition(table_name, base) #:nodoc:update_table_definition1127,0
      def add_index_options(table_name, column_name, comment: nil, **options) # :nodoc:add_index_options1131,0
      def options_include_default?(options)options_include_default?1163,0
      def change_table_comment(table_name, comment)change_table_comment1168,0
      def change_column_comment(table_name, column_name, comment) #:nodoc:change_column_comment1173,0
        def column_options_keyscolumn_options_keys1178,0
        def add_index_sort_order(quoted_columns, **options)add_index_sort_order1182,0
        def add_options_for_index_columns(quoted_columns, **options)add_options_for_index_columns1197,0
        def quoted_columns_for_index(column_names, **options)quoted_columns_for_index1205,0
        def index_name_for_remove(table_name, options = {})index_name_for_remove1212,0
        def rename_table_indexes(table_name, new_name)rename_table_indexes1242,0
        def rename_column_indexes(table_name, column_name, new_column_name)rename_column_indexes1251,0
        def create_table_definition(*args)create_table_definition1264,0
        def create_alter_table(name)create_alter_table1268,0
        def index_column_names(column_names)index_column_names1272,0
        def index_name_options(column_names)index_name_options1280,0
        def foreign_key_name(table_name, options)foreign_key_name1288,0
        def validate_index_length!(table_name, new_name, internal = false)validate_index_length!1296,0
        def extract_new_default_value(default_or_changes)extract_new_default_value1304,0
        def can_remove_index_by_name?(options)can_remove_index_by_name?1312,0
        def data_source_sql(name = nil, type: nil)data_source_sql1316,0
        def quoted_scope(name = nil, type: nil)quoted_scope1320,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/abstract/savepoints.rb,582
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module SavepointsSavepoints3,0
    module SavepointsActiveRecord::ConnectionAdapters::Savepoints3,0
      def current_savepoint_namecurrent_savepoint_name4,0
      def create_savepoint(name = current_savepoint_name)create_savepoint8,0
      def exec_rollback_to_savepoint(name = current_savepoint_name)exec_rollback_to_savepoint12,0
      def release_savepoint(name = current_savepoint_name)release_savepoint16,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/abstract/database_statements.rb,4861
module ActiveRecordActiveRecord1,0
  module ConnectionAdapters # :nodoc:ConnectionAdapters2,0
  module ConnectionAdapters # :nodoc:ActiveRecord::ConnectionAdapters2,0
    module DatabaseStatementsDatabaseStatements3,0
    module DatabaseStatementsActiveRecord::ConnectionAdapters::DatabaseStatements3,0
      def initializeinitialize4,0
      def to_sql(arel, binds = [])to_sql10,0
      def cacheable_query(klass, arel) # :nodoc:cacheable_query21,0
      def select_all(arel, name = nil, binds = [], preparable: nil)select_all31,0
      def select_one(arel, name = nil, binds = [])select_one48,0
      def select_value(arel, name = nil, binds = [])select_value53,0
      def select_values(arel, name = nil, binds = [])select_values59,0
      def select_rows(arel, name = nil, binds = [])select_rows65,0
      def query_value(sql, name = nil) # :nodoc:query_value69,0
      def query_values(sql, name = nil) # :nodoc:query_values73,0
      def query(sql, name = nil) # :nodoc:query77,0
      def execute(sql, name = nil)execute86,0
      def exec_query(sql, name = "SQL", binds = [], prepare: false)exec_query93,0
      def exec_insert(sql, name = nil, binds = [], pk = nil, sequence_name = nil)exec_insert100,0
      def exec_delete(sql, name = nil, binds = [])exec_delete108,0
      def truncate(table_name, name = nil)truncate113,0
      def exec_update(sql, name = nil, binds = [])exec_update120,0
      def insert(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])insert132,0
      alias create insertcreate136,0
      def update(arel, name = nil, binds = [])update139,0
      def delete(arel, name = nil, binds = [])delete144,0
      def supports_statement_cache?supports_statement_cache?150,0
      def transaction(requires_new: nil, isolation: nil, joinable: true)transaction228,0
      attr_reader :transaction_manager #:nodoc:transaction_manager241,0
      delegate :within_new_transaction, :open_transactions, :current_transaction, :begin_transaction, :commit_transaction, :rollback_transaction, to: :transaction_managerwithin_new_transaction243,0
      delegate :within_new_transaction, :open_transactions, :current_transaction, :begin_transaction, :commit_transaction, :rollback_transaction, to: :transaction_manageropen_transactions243,0
      delegate :within_new_transaction, :open_transactions, :current_transaction, :begin_transaction, :commit_transaction, :rollback_transaction, to: :transaction_managercurrent_transaction243,0
      delegate :within_new_transaction, :open_transactions, :current_transaction, :begin_transaction, :commit_transaction, :rollback_transaction, to: :transaction_managerbegin_transaction243,0
      delegate :within_new_transaction, :open_transactions, :current_transaction, :begin_transaction, :commit_transaction, :rollback_transaction, to: :transaction_managercommit_transaction243,0
      delegate :within_new_transaction, :open_transactions, :current_transaction, :begin_transaction, :commit_transaction, :rollback_transaction, to: :transaction_managerrollback_transaction243,0
      def transaction_open?transaction_open?245,0
      def reset_transaction #:nodoc:reset_transaction249,0
      def add_transaction_record(record)add_transaction_record255,0
      def transaction_statetransaction_state259,0
      def begin_db_transaction()    endbegin_db_transaction264,0
      def transaction_isolation_levelstransaction_isolation_levels266,0
      def begin_isolated_db_transaction(isolation)begin_isolated_db_transaction278,0
      def commit_db_transaction()   endcommit_db_transaction283,0
      def rollback_db_transactionrollback_db_transaction287,0
      def exec_rollback_db_transaction() end #:nodoc:exec_rollback_db_transaction291,0
      def rollback_to_savepoint(name = nil)rollback_to_savepoint293,0
      def default_sequence_name(table, column)default_sequence_name297,0
      def reset_sequence!(table, column, sequence = nil)reset_sequence!302,0
      def insert_fixture(fixture, table_name)insert_fixture308,0
      def empty_insert_statement_valueempty_insert_statement_value332,0
      def sanitize_limit(limit)sanitize_limit342,0
      def join_to_update(update, select, key) # :nodoc:join_to_update353,0
      alias join_to_delete join_to_updatejoin_to_delete358,0
        def subquery_for(key, select)subquery_for363,0
        def select(sql, name = nil, binds = [])select370,0
        def select_prepared(sql, name = nil, binds = [])select_prepared374,0
        def sql_for_insert(sql, pk, id_value, sequence_name, binds)sql_for_insert378,0
        def last_inserted_id(result)last_inserted_id382,0
        def single_value_from_rows(rows)single_value_from_rows386,0
        def binds_from_relation(relation, binds)binds_from_relation391,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/abstract/quoting.rb,1594
module ActiveRecordActiveRecord4,0
  module ConnectionAdapters # :nodoc:ConnectionAdapters5,0
  module ConnectionAdapters # :nodoc:ActiveRecord::ConnectionAdapters5,0
    module QuotingQuoting6,0
    module QuotingActiveRecord::ConnectionAdapters::Quoting6,0
      def quote(value)quote9,0
      def type_cast(value, column = nil)type_cast31,0
      def type_cast_from_column(column, value) # :nodoc:type_cast_from_column57,0
      def lookup_cast_type_from_column(column) # :nodoc:lookup_cast_type_from_column67,0
      def fetch_type_metadata(sql_type)fetch_type_metadata71,0
      def quote_string(s)quote_string84,0
      def quote_column_name(column_name)quote_column_name89,0
      def quote_table_name(table_name)quote_table_name94,0
      def quote_table_name_for_assignment(table, attr)quote_table_name_for_assignment106,0
      def quote_default_expression(value, column) # :nodoc:quote_default_expression110,0
      def quoted_truequoted_true119,0
      def unquoted_trueunquoted_true123,0
      def quoted_falsequoted_false127,0
      def unquoted_falseunquoted_false131,0
      def quoted_date(value)quoted_date137,0
      def quoted_time(value) # :nodoc:quoted_time154,0
      def quoted_binary(value) # :nodoc:quoted_binary158,0
      def type_casted_binds(binds) # :nodoc:type_casted_binds162,0
        def id_value_for_database(value)id_value_for_database171,0
        def types_which_need_no_typecastingtypes_which_need_no_typecasting177,0
        def _quote(value)_quote181,0
        def _type_cast(value)_type_cast200,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/abstract/transaction.rb,3699
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    class TransactionStateTransactionState3,0
    class TransactionStateActiveRecord::ConnectionAdapters::TransactionState3,0
      VALID_STATES = Set.new([:committed, :rolledback, nil])VALID_STATES4,0
      VALID_STATES = Set.new([:committed, :rolledback, nil])ActiveRecord::ConnectionAdapters::TransactionState::VALID_STATES4,0
      def initialize(state = nil)initialize6,0
      def finalized?finalized?10,0
      def committed?committed?14,0
      def rolledback?rolledback?18,0
      def completed?completed?22,0
      def set_state(state)set_state26,0
    class NullTransaction #:nodoc:NullTransaction34,0
    class NullTransaction #:nodoc:ActiveRecord::ConnectionAdapters::NullTransaction34,0
      def initialize; endinitialize35,0
      def state; endstate36,0
      def closed?; true; endclosed?37,0
      def open?; false; endopen?38,0
      def joinable?; false; endjoinable?39,0
      def add_record(record); endadd_record40,0
    class Transaction #:nodoc:Transaction43,0
    class Transaction #:nodoc:ActiveRecord::ConnectionAdapters::Transaction43,0
      attr_reader :connection, :state, :records, :savepoint_nameconnection44,0
      attr_reader :connection, :state, :records, :savepoint_namestate44,0
      attr_reader :connection, :state, :records, :savepoint_namerecords44,0
      attr_reader :connection, :state, :records, :savepoint_namesavepoint_name44,0
      attr_writer :joinablejoinable=45,0
      def initialize(connection, options, run_commit_callbacks: false)initialize47,0
      def add_record(record)add_record55,0
      def rollbackrollback59,0
      def rollback_recordsrollback_records63,0
      def commitcommit74,0
      def before_commit_recordsbefore_commit_records78,0
      def commit_recordscommit_records82,0
      def full_rollback?; true; endfull_rollback?96,0
      def joinable?; @joinable; endjoinable?97,0
      def closed?; false; endclosed?98,0
      def open?; !closed?; endopen?99,0
    class SavepointTransaction < TransactionSavepointTransaction102,0
    class SavepointTransaction < TransactionActiveRecord::ConnectionAdapters::SavepointTransaction102,0
      def initialize(connection, savepoint_name, options, *args)initialize103,0
      def rollbackrollback111,0
      def commitcommit116,0
      def full_rollback?; false; endfull_rollback?121,0
    class RealTransaction < TransactionRealTransaction124,0
    class RealTransaction < TransactionActiveRecord::ConnectionAdapters::RealTransaction124,0
      def initialize(connection, options, *args)initialize125,0
      def rollbackrollback134,0
      def commitcommit139,0
    class TransactionManager #:nodoc:TransactionManager145,0
    class TransactionManager #:nodoc:ActiveRecord::ConnectionAdapters::TransactionManager145,0
      def initialize(connection)initialize146,0
      def begin_transaction(options = {})begin_transaction151,0
      def commit_transactioncommit_transaction167,0
      def rollback_transaction(transaction = nil)rollback_transaction182,0
      def within_new_transaction(options = {})within_new_transaction190,0
      def open_transactionsopen_transactions218,0
      def current_transactioncurrent_transaction222,0
        NULL_TRANSACTION = NullTransaction.newNULL_TRANSACTION228,0
        NULL_TRANSACTION = NullTransaction.newActiveRecord::ConnectionAdapters::TransactionManager::NULL_TRANSACTION228,0
        def after_failure_actions(transaction, error)after_failure_actions231,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/abstract/schema_dumper.rb,1152
module ActiveRecordActiveRecord1,0
  module ConnectionAdapters # :nodoc:ConnectionAdapters2,0
  module ConnectionAdapters # :nodoc:ActiveRecord::ConnectionAdapters2,0
    module ColumnDumperColumnDumper8,0
    module ColumnDumperActiveRecord::ConnectionAdapters::ColumnDumper8,0
      def column_spec(column)column_spec9,0
      def column_spec_for_primary_key(column)column_spec_for_primary_key13,0
      def prepare_column_options(column)prepare_column_options24,0
      def migration_keys # :nodoc:migration_keys54,0
        def default_primary_key?(column)default_primary_key?61,0
        def explicit_primary_key_default?(column)explicit_primary_key_default?65,0
        def schema_type_with_virtual(column)schema_type_with_virtual69,0
        def schema_type(column)schema_type77,0
        def schema_limit(column)schema_limit85,0
        def schema_precision(column)schema_precision90,0
        def schema_scale(column)schema_scale94,0
        def schema_default(column)schema_default98,0
        def schema_expression(column)schema_expression108,0
        def schema_collation(column)schema_collation112,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/abstract/database_limits.rb,893
module ActiveRecordActiveRecord1,0
  module ConnectionAdapters # :nodoc:ConnectionAdapters2,0
  module ConnectionAdapters # :nodoc:ActiveRecord::ConnectionAdapters2,0
    module DatabaseLimitsDatabaseLimits3,0
    module DatabaseLimitsActiveRecord::ConnectionAdapters::DatabaseLimits3,0
      def table_alias_lengthtable_alias_length5,0
      def column_name_lengthcolumn_name_length10,0
      def table_name_lengthtable_name_length15,0
      def allowed_index_name_lengthallowed_index_name_length24,0
      def index_name_lengthindex_name_length29,0
      def columns_per_tablecolumns_per_table34,0
      def indexes_per_tableindexes_per_table39,0
      def columns_per_multicolumn_indexcolumns_per_multicolumn_index44,0
      def in_clause_lengthin_clause_length50,0
      def sql_query_lengthsql_query_length55,0
      def joins_per_queryjoins_per_query60,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/abstract/schema_definitions.rb,6974
module ActiveRecordActiveRecord1,0
  module ConnectionAdapters #:nodoc:ConnectionAdapters2,0
  module ConnectionAdapters #:nodoc:ActiveRecord::ConnectionAdapters2,0
    IndexDefinition = Struct.new(:table, :name, :unique, :columns, :lengths, :orders, :where, :type, :using, :comment) #:nodoc:IndexDefinition6,0
    IndexDefinition = Struct.new(:table, :name, :unique, :columns, :lengths, :orders, :where, :type, :using, :comment) #:nodoc:ActiveRecord::ConnectionAdapters::IndexDefinition6,0
    ColumnDefinition = Struct.new(:name, :type, :options, :sql_type) do # :nodoc:ColumnDefinition12,0
    ColumnDefinition = Struct.new(:name, :type, :options, :sql_type) do # :nodoc:ActiveRecord::ConnectionAdapters::ColumnDefinition12,0
      def primary_key?primary_key?13,0
    AddColumnDefinition = Struct.new(:column) # :nodoc:AddColumnDefinition30,0
    AddColumnDefinition = Struct.new(:column) # :nodoc:ActiveRecord::ConnectionAdapters::AddColumnDefinition30,0
    ChangeColumnDefinition = Struct.new(:column, :name) #:nodoc:ChangeColumnDefinition32,0
    ChangeColumnDefinition = Struct.new(:column, :name) #:nodoc:ActiveRecord::ConnectionAdapters::ChangeColumnDefinition32,0
    PrimaryKeyDefinition = Struct.new(:name) # :nodoc:PrimaryKeyDefinition34,0
    PrimaryKeyDefinition = Struct.new(:name) # :nodoc:ActiveRecord::ConnectionAdapters::PrimaryKeyDefinition34,0
    ForeignKeyDefinition = Struct.new(:from_table, :to_table, :options) do #:nodoc:ForeignKeyDefinition36,0
    ForeignKeyDefinition = Struct.new(:from_table, :to_table, :options) do #:nodoc:ActiveRecord::ConnectionAdapters::ForeignKeyDefinition36,0
      def namename37,0
      def columncolumn41,0
      def primary_keyprimary_key45,0
      def on_deleteon_delete49,0
      def on_updateon_update53,0
      def custom_primary_key?custom_primary_key?57,0
      def defined_for?(to_table_ord = nil, to_table: nil, **options)defined_for?61,0
        def default_primary_keydefault_primary_key71,0
    class ReferenceDefinition # :nodoc:ReferenceDefinition76,0
    class ReferenceDefinition # :nodoc:ActiveRecord::ConnectionAdapters::ReferenceDefinition76,0
      def initialize(initialize77,0
      def add_to(table)add_to97,0
        attr_reader :name, :polymorphic, :index, :foreign_key, :type, :optionsname115,0
        attr_reader :name, :polymorphic, :index, :foreign_key, :type, :optionspolymorphic115,0
        attr_reader :name, :polymorphic, :index, :foreign_key, :type, :optionsindex115,0
        attr_reader :name, :polymorphic, :index, :foreign_key, :type, :optionsforeign_key115,0
        attr_reader :name, :polymorphic, :index, :foreign_key, :type, :optionstype115,0
        attr_reader :name, :polymorphic, :index, :foreign_key, :type, :optionsoptions115,0
        def as_options(value)as_options119,0
        def polymorphic_optionspolymorphic_options123,0
        def index_optionsindex_options127,0
        def foreign_key_optionsforeign_key_options131,0
        def columnscolumns135,0
        def column_namecolumn_name143,0
        def column_namescolumn_names147,0
        def foreign_table_nameforeign_table_name151,0
    module ColumnMethodsColumnMethods158,0
    module ColumnMethodsActiveRecord::ConnectionAdapters::ColumnMethods158,0
      def primary_key(name, type = :primary_key, **options)primary_key161,0
      alias_method :numeric, :decimalnumeric192,0
    class TableDefinitionTableDefinition213,0
    class TableDefinitionActiveRecord::ConnectionAdapters::TableDefinition213,0
      attr_accessor :indexesindexes216,0
      attr_accessor :indexesindexes=216,0
      attr_reader :name, :temporary, :options, :as, :foreign_keys, :commentname217,0
      attr_reader :name, :temporary, :options, :as, :foreign_keys, :commenttemporary217,0
      attr_reader :name, :temporary, :options, :as, :foreign_keys, :commentoptions217,0
      attr_reader :name, :temporary, :options, :as, :foreign_keys, :commentas217,0
      attr_reader :name, :temporary, :options, :as, :foreign_keys, :commentforeign_keys217,0
      attr_reader :name, :temporary, :options, :as, :foreign_keys, :commentcomment217,0
      def initialize(name, temporary = false, options = nil, as = nil, comment: nil)initialize219,0
      def primary_keys(name = nil) # :nodoc:primary_keys231,0
      def columns; @columns_hash.values; endcolumns237,0
      def [](name)[]240,0
      def column(name, type, options = {})column311,0
      def remove_column(name)remove_column328,0
      def index(column_name, options = {})index336,0
      def foreign_key(table_name, options = {}) # :nodoc:foreign_key340,0
      def timestamps(**options)timestamps351,0
      def references(*args, **options)references364,0
      alias :belongs_to :referencesbelongs_to369,0
      def new_column_definition(name, type, **options) # :nodoc:new_column_definition371,0
        def create_column_definition(name, type, options)create_column_definition379,0
        def aliased_types(name, fallback)aliased_types383,0
    class AlterTable # :nodoc:AlterTable388,0
    class AlterTable # :nodoc:ActiveRecord::ConnectionAdapters::AlterTable388,0
      attr_reader :addsadds389,0
      attr_reader :foreign_key_addsforeign_key_adds390,0
      attr_reader :foreign_key_dropsforeign_key_drops391,0
      def initialize(td)initialize393,0
      def name; @td.name; endname400,0
      def add_foreign_key(to_table, options)add_foreign_key402,0
      def drop_foreign_key(name)drop_foreign_key406,0
      def add_column(name, type, options)add_column410,0
    class TableTable453,0
    class TableActiveRecord::ConnectionAdapters::Table453,0
      attr_reader :namename456,0
      def initialize(table_name, base)initialize458,0
      def column(column_name, type, options = {})column468,0
      def column_exists?(column_name, type = nil, options = {})column_exists?477,0
      def index(column_name, options = {})index489,0
      def index_exists?(column_name, options = {})index_exists?500,0
      def rename_index(index_name, new_index_name)rename_index509,0
      def timestamps(options = {})timestamps518,0
      def change(column_name, type, options = {})change528,0
      def change_default(column_name, default_or_changes)change_default539,0
      def remove(*column_names)remove549,0
      def remove_index(options = {})remove_index560,0
      def remove_timestamps(options = {})remove_timestamps569,0
      def rename(column_name, new_column_name)rename578,0
      def references(*args, **options)references588,0
      alias :belongs_to :referencesbelongs_to593,0
      def remove_references(*args, **options)remove_references601,0
      alias :remove_belongs_to :remove_referencesremove_belongs_to606,0
      def foreign_key(*args) # :nodoc:foreign_key613,0
      def foreign_key_exists?(*args) # :nodoc:foreign_key_exists?622,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/abstract/query_cache.rb,1472
module ActiveRecordActiveRecord1,0
  module ConnectionAdapters # :nodoc:ConnectionAdapters2,0
  module ConnectionAdapters # :nodoc:ActiveRecord::ConnectionAdapters2,0
    module QueryCacheQueryCache3,0
    module QueryCacheActiveRecord::ConnectionAdapters::QueryCache3,0
        def included(base) #:nodoc:included5,0
        def dirties_query_cache(base, *method_names)dirties_query_cache12,0
      module ConnectionPoolConfigurationConnectionPoolConfiguration24,0
      module ConnectionPoolConfigurationActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration24,0
        def initialize(*)initialize25,0
        def enable_query_cache!enable_query_cache!30,0
        def disable_query_cache!disable_query_cache!35,0
        def query_cache_enabledquery_cache_enabled40,0
      attr_reader :query_cache, :query_cache_enabledquery_cache45,0
      attr_reader :query_cache, :query_cache_enabledquery_cache_enabled45,0
      def initialize(*)initialize47,0
      def cachecache54,0
      def enable_query_cache!enable_query_cache!62,0
      def disable_query_cache!disable_query_cache!66,0
      def uncacheduncached72,0
      def clear_query_cacheclear_query_cache85,0
      def select_all(arel, name = nil, binds = [], preparable: nil)select_all91,0
        def cache_sql(sql, name, binds)cache_sql103,0
        def locked?(arel)locked?126,0
        def configure_query_cache!configure_query_cache!130,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/abstract/schema_creation.rb,2622
module ActiveRecordActiveRecord3,0
  module ConnectionAdaptersConnectionAdapters4,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters4,0
    class AbstractAdapterAbstractAdapter5,0
    class AbstractAdapterActiveRecord::ConnectionAdapters::AbstractAdapter5,0
      class SchemaCreation # :nodoc:SchemaCreation6,0
      class SchemaCreation # :nodoc:ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation6,0
        def initialize(conn)initialize7,0
        def accept(o)accept12,0
        delegate :quote_column_name, :quote_table_name, :quote_default_expression, :type_to_sql,quote_column_name17,0
        delegate :quote_column_name, :quote_table_name, :quote_default_expression, :type_to_sql,quote_table_name17,0
        delegate :quote_column_name, :quote_table_name, :quote_default_expression, :type_to_sql,quote_default_expression17,0
        delegate :quote_column_name, :quote_table_name, :quote_default_expression, :type_to_sql,type_to_sql17,0
          :options_include_default?, :supports_indexes_in_create?, :supports_foreign_keys_in_create?, :foreign_key_options, to: :@connoptions_include_default?18,0
          :options_include_default?, :supports_indexes_in_create?, :supports_foreign_keys_in_create?, :foreign_key_options, to: :@connsupports_indexes_in_create?18,0
          :options_include_default?, :supports_indexes_in_create?, :supports_foreign_keys_in_create?, :foreign_key_options, to: :@connsupports_foreign_keys_in_create?18,0
          :options_include_default?, :supports_indexes_in_create?, :supports_foreign_keys_in_create?, :foreign_key_options, to: :@connforeign_key_options18,0
          def visit_AlterTable(o)visit_AlterTable24,0
          def visit_ColumnDefinition(o)visit_ColumnDefinition31,0
          def visit_AddColumnDefinition(o)visit_AddColumnDefinition38,0
          def visit_TableDefinition(o)visit_TableDefinition42,0
          def visit_PrimaryKeyDefinition(o)visit_PrimaryKeyDefinition62,0
          def visit_ForeignKeyDefinition(o)visit_ForeignKeyDefinition66,0
          def visit_AddForeignKey(o)visit_AddForeignKey77,0
          def visit_DropForeignKey(name)visit_DropForeignKey81,0
          def table_options(o)table_options85,0
          def add_table_options!(create_sql, options)add_table_options!92,0
          def column_options(o)column_options98,0
          def add_column_options!(sql, options)add_column_options!102,0
          def foreign_key_in_create(from_table, to_table, options)foreign_key_in_create117,0
          def action_sql(action, dependency)action_sql122,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/column.rb,832
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    class PostgreSQLColumn < Column #:nodoc:PostgreSQLColumn4,0
    class PostgreSQLColumn < Column #:nodoc:ActiveRecord::ConnectionAdapters::PostgreSQLColumn4,0
      delegate :array, :oid, :fmod, to: :sql_type_metadataarray5,0
      delegate :array, :oid, :fmod, to: :sql_type_metadataoid5,0
      delegate :array, :oid, :fmod, to: :sql_type_metadatafmod5,0
      alias :array? :arrayarray?6,0
      def initialize(*, max_identifier_length: 63, **)initialize8,0
      def serial?serial?13,0
        attr_reader :max_identifier_lengthmax_identifier_length22,0
        def sequence_name_from_parts(table_name, column_name, suffix)sequence_name_from_parts25,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/schema_statements.rb,3931
module ActiveRecordActiveRecord3,0
  module ConnectionAdaptersConnectionAdapters4,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters4,0
    module PostgreSQLPostgreSQL5,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL5,0
      module SchemaStatementsSchemaStatements6,0
      module SchemaStatementsActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements6,0
        def recreate_database(name, options = {}) #:nodoc:recreate_database9,0
        def create_database(name, options = {})create_database22,0
        def drop_database(name) #:nodoc:drop_database53,0
        def drop_table(table_name, options = {}) # :nodoc:drop_table57,0
        def schema_exists?(name)schema_exists?62,0
        def index_name_exists?(table_name, index_name, default = nil)index_name_exists?67,0
        def indexes(table_name, name = nil) # :nodoc:indexes90,0
        def new_column_from_field(table_name, field) # :nondoc:new_column_from_field147,0
        def table_options(table_name) # :nodoc:table_options167,0
        def table_comment(table_name) # :nodoc:table_comment174,0
        def current_databasecurrent_database189,0
        def current_schemacurrent_schema194,0
        def encodingencoding199,0
        def collationcollation204,0
        def ctypectype209,0
        def schema_namesschema_names214,0
        def create_schema(schema_name)create_schema225,0
        def drop_schema(schema_name, options = {})drop_schema230,0
        def schema_search_path=(schema_csv)schema_search_path=239,0
        def schema_search_pathschema_search_path247,0
        def client_min_messagesclient_min_messages252,0
        def client_min_messages=(level)client_min_messages=257,0
        def default_sequence_name(table_name, pk = "id") #:nodoc:default_sequence_name262,0
        def serial_sequence(table, column)serial_sequence270,0
        def set_pk_sequence!(table, value) #:nodoc:set_pk_sequence!275,0
        def reset_pk_sequence!(table, pk = nil, sequence = nil) #:nodoc:reset_pk_sequence!290,0
        def pk_and_sequence_for(table) #:nodoc:pk_and_sequence_for318,0
        def primary_keys(table_name) # :nodoc:primary_keys371,0
        def rename_table(table_name, new_name)rename_table393,0
        def add_column(table_name, column_name, type, options = {}) #:nodoc:add_column408,0
        def change_column(table_name, column_name, type, options = {}) #:nodoc:change_column414,0
        def change_column_default(table_name, column_name, default_or_changes) # :nodoc:change_column_default437,0
        def change_column_null(table_name, column_name, null, default = nil) #:nodoc:change_column_null453,0
        def change_column_comment(table_name, column_name, comment) # :nodoc:change_column_comment463,0
        def change_table_comment(table_name, comment) # :nodoc:change_table_comment469,0
        def rename_column(table_name, column_name, new_column_name) #:nodoc:rename_column475,0
        def add_index(table_name, column_name, options = {}) #:nodoc:add_index481,0
        def remove_index(table_name, options = {}) #:nodoc:remove_index488,0
        def rename_index(table_name, old_name, new_name)rename_index514,0
        def foreign_keys(table_name)foreign_keys520,0
        def extract_foreign_key_action(specifier) # :nodoc:extract_foreign_key_action550,0
        def type_to_sql(type, limit: nil, precision: nil, scale: nil, array: nil, **) # :nodoc:type_to_sql559,0
        def columns_for_distinct(columns, orders) #:nodoc:columns_for_distinct593,0
        def fetch_type_metadata(column_name, sql_type, oid, fmod)fetch_type_metadata605,0
          def data_source_sql(name = nil, type: nil)data_source_sql618,0
          def quoted_scope(name = nil, type: nil)quoted_scope629,0
          def extract_schema_qualified_name(string)extract_schema_qualified_name645,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/utils.rb,1112
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      class Name # :nodoc:Name8,0
      class Name # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::Name8,0
        SEPARATOR = "."SEPARATOR9,0
        SEPARATOR = "."ActiveRecord::ConnectionAdapters::PostgreSQL::Name::SEPARATOR9,0
        attr_reader :schema, :identifierschema10,0
        attr_reader :schema, :identifieridentifier10,0
        def initialize(schema, identifier)initialize12,0
        def to_sto_s16,0
        def quotedquoted20,0
        def ==(o)==28,0
        alias_method :eql?, :==eql?31,0
        def hashhash33,0
          def partsparts39,0
          def unquote(part)unquote44,0
      module Utils # :nodoc:Utils53,0
      module Utils # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::Utils53,0
        def extract_schema_qualified_name(string)extract_schema_qualified_name68,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/database_statements.rb,1839
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module DatabaseStatementsDatabaseStatements4,0
      module DatabaseStatementsActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements4,0
        def explain(arel, binds = [])explain5,0
        MONEY_COLUMN_TYPE_OID = 790 #:nodoc:MONEY_COLUMN_TYPE_OID11,0
        MONEY_COLUMN_TYPE_OID = 790 #:nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements::MONEY_COLUMN_TYPE_OID11,0
        BYTEA_COLUMN_TYPE_OID = 17 #:nodoc:BYTEA_COLUMN_TYPE_OID13,0
        BYTEA_COLUMN_TYPE_OID = 17 #:nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements::BYTEA_COLUMN_TYPE_OID13,0
        def result_as_array(res) #:nodoc:result_as_array16,0
        def query(sql, name = nil) #:nodoc:query58,0
        def execute(sql, name = nil)execute70,0
        def exec_query(sql, name = "SQL", binds = [], prepare: false)exec_query78,0
        def exec_delete(sql, name = nil, binds = [])exec_delete91,0
        alias :exec_update :exec_deleteexec_update94,0
        def sql_for_insert(sql, pk, id_value, sequence_name, binds) # :nodoc:sql_for_insert96,0
        def exec_insert(sql, name = nil, binds = [], pk = nil, sequence_name = nil)exec_insert111,0
        def begin_db_transactionbegin_db_transaction130,0
        def begin_isolated_db_transaction(isolation)begin_isolated_db_transaction134,0
        def commit_db_transactioncommit_db_transaction140,0
        def exec_rollback_db_transactionexec_rollback_db_transaction145,0
          def suppress_composite_primary_key(pk)suppress_composite_primary_key151,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/quoting.rb,1499
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module QuotingQuoting4,0
      module QuotingActiveRecord::ConnectionAdapters::PostgreSQL::Quoting4,0
        def escape_bytea(value)escape_bytea6,0
        def unescape_bytea(value)unescape_bytea13,0
        def quote_string(s) #:nodoc:quote_string18,0
        def quote_table_name(name) # :nodoc:quote_table_name30,0
        def quote_schema_name(name)quote_schema_name35,0
        def quote_table_name_for_assignment(table, attr)quote_table_name_for_assignment39,0
        def quote_column_name(name) # :nodoc:quote_column_name44,0
        def quoted_date(value) #:nodoc:quoted_date49,0
        def quoted_binary(value) # :nodoc:quoted_binary58,0
        def quote_default_expression(value, column) # :nodoc:quote_default_expression62,0
        def lookup_cast_type_from_column(column) # :nodoc:lookup_cast_type_from_column75,0
          def lookup_cast_type(sql_type)lookup_cast_type80,0
          def _quote(value)_quote84,0
          def _type_cast(value)_type_cast107,0
          def encode_array(array_data)encode_array123,0
          def determine_encoding_of_strings_in_array(value)determine_encoding_of_strings_in_array134,0
          def type_cast_array(values)type_cast_array141,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/explain_pretty_printer.rb,474
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      class ExplainPrettyPrinter # :nodoc:ExplainPrettyPrinter4,0
      class ExplainPrettyPrinter # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::ExplainPrettyPrinter4,0
        def pp(result)pp18,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/schema_dumper.rb,800
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module ColumnDumper # :nodoc:ColumnDumper4,0
      module ColumnDumper # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnDumper4,0
        def prepare_column_options(column)prepare_column_options6,0
        def migration_keysmigration_keys13,0
          def default_primary_key?(column)default_primary_key?19,0
          def explicit_primary_key_default?(column)explicit_primary_key_default?23,0
          def schema_type(column)schema_type27,0
          def schema_expression(column)schema_expression37,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/referential_integrity.rb,637
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module ReferentialIntegrity # :nodoc:ReferentialIntegrity4,0
      module ReferentialIntegrity # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::ReferentialIntegrity4,0
        def supports_disable_referential_integrity? # :nodoc:supports_disable_referential_integrity?5,0
        def disable_referential_integrity # :nodoc:disable_referential_integrity9,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/schema_definitions.rb,2453
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module ColumnMethodsColumnMethods4,0
      module ColumnMethodsActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods4,0
        def primary_key(name, type = :primary_key, **options)primary_key44,0
        def bigserial(*args, **options)bigserial59,0
        def bit(*args, **options)bit63,0
        def bit_varying(*args, **options)bit_varying67,0
        def cidr(*args, **options)cidr71,0
        def citext(*args, **options)citext75,0
        def daterange(*args, **options)daterange79,0
        def hstore(*args, **options)hstore83,0
        def inet(*args, **options)inet87,0
        def interval(*args, **options)interval91,0
        def int4range(*args, **options)int4range95,0
        def int8range(*args, **options)int8range99,0
        def json(*args, **options)json103,0
        def jsonb(*args, **options)jsonb107,0
        def ltree(*args, **options)ltree111,0
        def macaddr(*args, **options)macaddr115,0
        def money(*args, **options)money119,0
        def numrange(*args, **options)numrange123,0
        def oid(*args, **options)oid127,0
        def point(*args, **options)point131,0
        def line(*args, **options)line135,0
        def lseg(*args, **options)lseg139,0
        def box(*args, **options)box143,0
        def path(*args, **options)path147,0
        def polygon(*args, **options)polygon151,0
        def circle(*args, **options)circle155,0
        def serial(*args, **options)serial159,0
        def tsrange(*args, **options)tsrange163,0
        def tstzrange(*args, **options)tstzrange167,0
        def tsvector(*args, **options)tsvector171,0
        def uuid(*args, **options)uuid175,0
        def xml(*args, **options)xml179,0
      class TableDefinition < ActiveRecord::ConnectionAdapters::TableDefinitionTableDefinition184,0
      class TableDefinition < ActiveRecord::ConnectionAdapters::TableDefinitionActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition184,0
      class Table < ActiveRecord::ConnectionAdapters::TableTable188,0
      class Table < ActiveRecord::ConnectionAdapters::TableActiveRecord::ConnectionAdapters::PostgreSQL::Table188,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid.rb,384
module ActiveRecordActiveRecord25,0
  module ConnectionAdaptersConnectionAdapters26,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters26,0
    module PostgreSQLPostgreSQL27,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL27,0
      module OID # :nodoc:OID28,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID28,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/uuid.rb,886
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Uuid < Type::Value # :nodoc:Uuid5,0
        class Uuid < Type::Value # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Uuid5,0
          ACCEPTABLE_UUID = %r{\A\{?([a-fA-F0-9]{4}-?){8}\}?\z}xACCEPTABLE_UUID6,0
          ACCEPTABLE_UUID = %r{\A\{?([a-fA-F0-9]{4}-?){8}\}?\z}xActiveRecord::ConnectionAdapters::PostgreSQL::OID::Uuid::ACCEPTABLE_UUID6,0
          alias_method :serialize, :deserializeserialize8,0
          def typetype10,0
          def cast(value)cast14,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/json.rb,546
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Json < Type::Internal::AbstractJsonJson5,0
        class Json < Type::Internal::AbstractJsonActiveRecord::ConnectionAdapters::PostgreSQL::OID::Json5,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/hstore.rb,991
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Hstore < Type::Value # :nodoc:Hstore5,0
        class Hstore < Type::Value # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Hstore5,0
          def typetype8,0
          def deserialize(value)deserialize12,0
          def serialize(value)serialize24,0
          def accessoraccessor34,0
          def changed_in_place?(raw_old_value, new_value)changed_in_place?42,0
            HstorePair = beginHstorePair48,0
            HstorePair = beginActiveRecord::ConnectionAdapters::PostgreSQL::OID::Hstore::HstorePair48,0
            def escape_hstore(value)escape_hstore54,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/bit_varying.rb,578
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class BitVarying < OID::Bit # :nodoc:BitVarying5,0
        class BitVarying < OID::Bit # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::BitVarying5,0
          def typetype6,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/enum.rb,610
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Enum < Type::Value # :nodoc:Enum5,0
        class Enum < Type::Value # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Enum5,0
          def typetype6,0
            def cast_value(value)cast_value12,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/date_time.rb,601
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class DateTime < Type::DateTime # :nodoc:DateTime5,0
        class DateTime < Type::DateTime # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime5,0
          def cast_value(value)cast_value6,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/jsonb.rb,550
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Jsonb < Json # :nodoc:Jsonb5,0
        class Jsonb < Json # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Jsonb5,0
          def typetype6,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/array.rb,1871
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Array < Type::Value # :nodoc:Array5,0
        class Array < Type::Value # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array5,0
          Data = Struct.new(:encoder, :values) # :nodoc:Data8,0
          Data = Struct.new(:encoder, :values) # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array::Data8,0
          attr_reader :subtype, :delimitersubtype10,0
          attr_reader :subtype, :delimiterdelimiter10,0
          delegate :type, :user_input_in_time_zone, :limit, :precision, :scale, to: :subtypetype11,0
          delegate :type, :user_input_in_time_zone, :limit, :precision, :scale, to: :subtypeuser_input_in_time_zone11,0
          delegate :type, :user_input_in_time_zone, :limit, :precision, :scale, to: :subtypelimit11,0
          delegate :type, :user_input_in_time_zone, :limit, :precision, :scale, to: :subtypeprecision11,0
          delegate :type, :user_input_in_time_zone, :limit, :precision, :scale, to: :subtypescale11,0
          def initialize(subtype, delimiter = ",")initialize13,0
          def deserialize(value)deserialize21,0
          def cast(value)cast32,0
          def serialize(value)serialize39,0
          def ==(other)==48,0
          def type_cast_for_schema(value)type_cast_for_schema54,0
          def map(value, &block)map59,0
          def changed_in_place?(raw_old_value, new_value)changed_in_place?63,0
            def type_cast_array(value, method)type_cast_array69,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/bit.rb,961
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Bit < Type::Value # :nodoc:Bit5,0
        class Bit < Type::Value # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit5,0
          def typetype6,0
          def cast_value(value)cast_value10,0
          def serialize(value)serialize23,0
          class DataData27,0
          class DataActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data27,0
            def initialize(value)initialize28,0
            def to_sto_s32,0
            def binary?binary?36,0
            def hex?hex?40,0
              attr_reader :valuevalue48,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/point.rb,921
module ActiveRecordActiveRecord1,0
  Point = Struct.new(:x, :y)Point2,0
  Point = Struct.new(:x, :y)ActiveRecord::Point2,0
  module ConnectionAdaptersConnectionAdapters4,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters4,0
    module PostgreSQLPostgreSQL5,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL5,0
      module OID # :nodoc:OID6,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID6,0
        class Point < Type::Value # :nodoc:Point7,0
        class Point < Type::Value # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Point7,0
          def typetype10,0
          def cast(value)cast14,0
          def serialize(value)serialize31,0
          def type_cast_for_schema(value)type_cast_for_schema42,0
            def number_for_point(number)number_for_point52,0
            def build_point(x, y)build_point56,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/bytea.rb,587
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Bytea < Type::Binary # :nodoc:Bytea5,0
        class Bytea < Type::Binary # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bytea5,0
          def deserialize(value)deserialize6,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/type_map_initializer.rb,1444
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class TypeMapInitializer # :nodoc:TypeMapInitializer10,0
        class TypeMapInitializer # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::TypeMapInitializer10,0
          def initialize(store)initialize11,0
          def run(records)run15,0
          def query_conditions_for_initial_load(type_map)query_conditions_for_initial_load32,0
            def register_mapped_type(row)register_mapped_type45,0
            def register_enum_type(row)register_enum_type49,0
            def register_array_type(row)register_array_type53,0
            def register_range_type(row)register_range_type59,0
            def register_domain_type(row)register_domain_type65,0
            def register_composite_type(row)register_composite_type73,0
            def register(oid, oid_type = nil, &block)register79,0
            def alias_type(oid, target)alias_type88,0
            def register_with_subtype(oid, target_oid)register_with_subtype93,0
            def assert_valid_registration(oid, oid_type)assert_valid_registration101,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/decimal.rb,598
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Decimal < Type::Decimal # :nodoc:Decimal5,0
        class Decimal < Type::Decimal # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Decimal5,0
          def infinity(options = {})infinity6,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/xml.rb,823
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Xml < Type::String # :nodoc:Xml5,0
        class Xml < Type::String # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Xml5,0
          def typetype6,0
          def serialize(value)serialize10,0
          class Data # :nodoc:Data15,0
          class Data # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Xml::Data15,0
            def initialize(value)initialize16,0
            def to_sto_s20,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/money.rb,647
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Money < Type::Decimal # :nodoc:Money5,0
        class Money < Type::Decimal # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Money5,0
          def typetype6,0
          def scalescale10,0
          def cast_value(value)cast_value14,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/cidr.rb,722
module ActiveRecordActiveRecord3,0
  module ConnectionAdaptersConnectionAdapters4,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters4,0
    module PostgreSQLPostgreSQL5,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL5,0
      module OID # :nodoc:OID6,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID6,0
        class Cidr < Type::Value # :nodoc:Cidr7,0
        class Cidr < Type::Value # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Cidr7,0
          def typetype8,0
          def type_cast_for_schema(value)type_cast_for_schema12,0
          def serialize(value)serialize23,0
          def cast_value(value)cast_value31,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/range.rb,1333
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Range < Type::Value # :nodoc:Range5,0
        class Range < Type::Value # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Range5,0
          attr_reader :subtype, :typesubtype6,0
          attr_reader :subtype, :typetype6,0
          delegate :user_input_in_time_zone, to: :subtypeuser_input_in_time_zone7,0
          def initialize(subtype, type = :range)initialize9,0
          def type_cast_for_schema(value)type_cast_for_schema14,0
          def cast_value(value)cast_value18,0
          def serialize(value)serialize32,0
          def ==(other)==42,0
          def map(value) # :nodoc:map48,0
            def type_cast_single(value)type_cast_single56,0
            def type_cast_single_for_database(value)type_cast_single_for_database60,0
            def extract_bounds(value)extract_bounds64,0
            def infinity(negative: false)infinity74,0
            def infinity?(value)infinity?84,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/vector.rb,733
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Vector < Type::Value # :nodoc:Vector5,0
        class Vector < Type::Value # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Vector5,0
          attr_reader :delim, :subtypedelim6,0
          attr_reader :delim, :subtypesubtype6,0
          def initialize(delim, subtype)initialize11,0
          def cast(value)cast19,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/inet.rb,546
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Inet < Cidr # :nodoc:Inet5,0
        class Inet < Cidr # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Inet5,0
          def typetype6,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/legacy_point.rb,733
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class LegacyPoint < Type::Value # :nodoc:LegacyPoint5,0
        class LegacyPoint < Type::Value # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::LegacyPoint5,0
          def typetype8,0
          def cast(value)cast12,0
          def serialize(value)serialize26,0
            def number_for_point(number)number_for_point36,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/specialized_string.rb,680
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class SpecializedString < Type::String # :nodoc:SpecializedString5,0
        class SpecializedString < Type::String # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::SpecializedString5,0
          attr_reader :typetype6,0
          def initialize(type, **options)initialize8,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/oid/oid.rb,560
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      module OID # :nodoc:OID4,0
      module OID # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID4,0
        class Oid < Type::Integer # :nodoc:Oid5,0
        class Oid < Type::Integer # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Oid5,0
          def typetype6,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/type_metadata.rb,759
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    class PostgreSQLTypeMetadata < DelegateClass(SqlTypeMetadata)PostgreSQLTypeMetadata3,0
    class PostgreSQLTypeMetadata < DelegateClass(SqlTypeMetadata)ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata3,0
      attr_reader :oid, :fmod, :arrayoid6,0
      attr_reader :oid, :fmod, :arrayfmod6,0
      attr_reader :oid, :fmod, :arrayarray6,0
      def initialize(type_metadata, oid: nil, fmod: nil)initialize8,0
      def sql_typesql_type16,0
      def ==(other)==20,0
      alias eql? ==eql?24,0
      def hashhash26,0
        def attributes_for_hashattributes_for_hash32,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql/schema_creation.rb,559
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module PostgreSQLPostgreSQL3,0
    module PostgreSQLActiveRecord::ConnectionAdapters::PostgreSQL3,0
      class SchemaCreation < AbstractAdapter::SchemaCreation # :nodoc:SchemaCreation4,0
      class SchemaCreation < AbstractAdapter::SchemaCreation # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaCreation4,0
          def add_column_options!(sql, options)add_column_options!6,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/column.rb,2513
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters3,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters3,0
    class ColumnColumn5,0
    class ColumnActiveRecord::ConnectionAdapters::Column5,0
      attr_reader :name, :default, :sql_type_metadata, :null, :table_name, :default_function, :collation, :commentname6,0
      attr_reader :name, :default, :sql_type_metadata, :null, :table_name, :default_function, :collation, :commentdefault6,0
      attr_reader :name, :default, :sql_type_metadata, :null, :table_name, :default_function, :collation, :commentsql_type_metadata6,0
      attr_reader :name, :default, :sql_type_metadata, :null, :table_name, :default_function, :collation, :commentnull6,0
      attr_reader :name, :default, :sql_type_metadata, :null, :table_name, :default_function, :collation, :commenttable_name6,0
      attr_reader :name, :default, :sql_type_metadata, :null, :table_name, :default_function, :collation, :commentdefault_function6,0
      attr_reader :name, :default, :sql_type_metadata, :null, :table_name, :default_function, :collation, :commentcollation6,0
      attr_reader :name, :default, :sql_type_metadata, :null, :table_name, :default_function, :collation, :commentcomment6,0
      delegate :precision, :scale, :limit, :type, :sql_type, to: :sql_type_metadata, allow_nil: trueprecision8,0
      delegate :precision, :scale, :limit, :type, :sql_type, to: :sql_type_metadata, allow_nil: truescale8,0
      delegate :precision, :scale, :limit, :type, :sql_type, to: :sql_type_metadata, allow_nil: truelimit8,0
      delegate :precision, :scale, :limit, :type, :sql_type, to: :sql_type_metadata, allow_nil: truetype8,0
      delegate :precision, :scale, :limit, :type, :sql_type, to: :sql_type_metadata, allow_nil: truesql_type8,0
      def initialize(name, default, sql_type_metadata = nil, null = true, table_name = nil, default_function = nil, collation = nil, comment: nil, **)initialize16,0
      def has_default?has_default?27,0
      def bigint?bigint?31,0
      def human_namehuman_name39,0
      def init_with(coder)init_with43,0
      def encode_with(coder)encode_with54,0
      def ==(other)==65,0
      alias :eql? :==eql?69,0
      def hashhash71,0
        def attributes_for_hashattributes_for_hash77,0
    class NullColumn < ColumnNullColumn82,0
    class NullColumn < ColumnActiveRecord::ConnectionAdapters::NullColumn82,0
      def initialize(name)initialize83,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/schema_cache.rb,1146
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    class SchemaCacheSchemaCache3,0
    class SchemaCacheActiveRecord::ConnectionAdapters::SchemaCache3,0
      attr_reader :versionversion4,0
      attr_accessor :connectionconnection5,0
      attr_accessor :connectionconnection=5,0
      def initialize(conn)initialize7,0
      def initialize_dup(other)initialize_dup16,0
      def encode_with(coder)encode_with24,0
      def init_with(coder)init_with32,0
      def primary_keys(table_name)primary_keys40,0
      def data_source_exists?(name)data_source_exists?45,0
      def add(table_name)add53,0
      def data_sources(name)data_sources61,0
      def columns(table_name)columns66,0
      def columns_hash(table_name)columns_hash72,0
      def clear!clear!79,0
      def sizesize87,0
      def clear_data_source_cache!(name)clear_data_source_cache!92,0
      def marshal_dumpmarshal_dump99,0
      def marshal_load(array)marshal_load105,0
        def prepare_data_sourcesprepare_data_sources111,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/connection_specification.rb,1826
module ActiveRecordActiveRecord3,0
  module ConnectionAdaptersConnectionAdapters4,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters4,0
    class ConnectionSpecification #:nodoc:ConnectionSpecification5,0
    class ConnectionSpecification #:nodoc:ActiveRecord::ConnectionAdapters::ConnectionSpecification5,0
      attr_reader :name, :config, :adapter_methodname6,0
      attr_reader :name, :config, :adapter_methodconfig6,0
      attr_reader :name, :config, :adapter_methodadapter_method6,0
      def initialize(name, config, adapter_method)initialize8,0
      def initialize_dup(original)initialize_dup12,0
      def to_hashto_hash16,0
      class ConnectionUrlResolver # :nodoc:ConnectionUrlResolver21,0
      class ConnectionUrlResolver # :nodoc:ActiveRecord::ConnectionAdapters::ConnectionSpecification::ConnectionUrlResolver21,0
        def initialize(url)initialize36,0
        def to_hashto_hash50,0
          def uriuri58,0
          def uri_parseruri_parser62,0
          def query_hashquery_hash75,0
          def raw_configraw_config79,0
          def database_from_pathdatabase_from_path96,0
      class Resolver # :nodoc:Resolver114,0
      class Resolver # :nodoc:ActiveRecord::ConnectionAdapters::ConnectionSpecification::Resolver114,0
        attr_reader :configurationsconfigurations115,0
        def initialize(configurations)initialize119,0
        def resolve(config)resolve139,0
        def resolve_allresolve_all150,0
        def spec(config)spec179,0
          def resolve_connection(spec)resolve_connection224,0
          def resolve_symbol_connection(spec)resolve_symbol_connection242,0
          def resolve_hash_connection(spec)resolve_hash_connection254,0
          def resolve_url_connection(url)resolve_url_connection267,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/sql_type_metadata.rb,892
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters3,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters3,0
    class SqlTypeMetadataSqlTypeMetadata4,0
    class SqlTypeMetadataActiveRecord::ConnectionAdapters::SqlTypeMetadata4,0
      attr_reader :sql_type, :type, :limit, :precision, :scalesql_type5,0
      attr_reader :sql_type, :type, :limit, :precision, :scaletype5,0
      attr_reader :sql_type, :type, :limit, :precision, :scalelimit5,0
      attr_reader :sql_type, :type, :limit, :precision, :scaleprecision5,0
      attr_reader :sql_type, :type, :limit, :precision, :scalescale5,0
      def initialize(sql_type: nil, type: nil, limit: nil, precision: nil, scale: nil)initialize7,0
      def ==(other)==15,0
      alias eql? ==eql?19,0
      def hashhash21,0
        def attributes_for_hashattributes_for_hash27,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/mysql2_adapter.rb,1430
module ActiveRecordActiveRecord8,0
  module ConnectionHandling # :nodoc:ConnectionHandling9,0
  module ConnectionHandling # :nodoc:ActiveRecord::ConnectionHandling9,0
    def mysql2_connection(config)mysql2_connection11,0
  module ConnectionAdaptersConnectionAdapters32,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters32,0
    class Mysql2Adapter < AbstractMysqlAdapterMysql2Adapter33,0
    class Mysql2Adapter < AbstractMysqlAdapterActiveRecord::ConnectionAdapters::Mysql2Adapter33,0
      ADAPTER_NAME = "Mysql2".freezeADAPTER_NAME34,0
      ADAPTER_NAME = "Mysql2".freezeActiveRecord::ConnectionAdapters::Mysql2Adapter::ADAPTER_NAME34,0
      def initialize(connection, logger, connection_options, config)initialize38,0
      def supports_json?supports_json?44,0
      def supports_comments?supports_comments?48,0
      def supports_comments_in_create?supports_comments_in_create?52,0
      def supports_savepoints?supports_savepoints?56,0
      def each_hash(result) # :nodoc:each_hash62,0
      def error_number(exception)error_number72,0
      def quote_string(string)quote_string80,0
      def active?active?88,0
      def reconnect!reconnect!92,0
      alias :reset! :reconnect!reset!97,0
      def disconnect!disconnect!101,0
        def connectconnect108,0
        def configure_connectionconfigure_connection113,0
        def full_versionfull_version118,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/statement_pool.rb,810
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    class StatementPool # :nodoc:StatementPool3,0
    class StatementPool # :nodoc:ActiveRecord::ConnectionAdapters::StatementPool3,0
      DEFAULT_STATEMENT_LIMIT = 1000DEFAULT_STATEMENT_LIMIT6,0
      DEFAULT_STATEMENT_LIMIT = 1000ActiveRecord::ConnectionAdapters::StatementPool::DEFAULT_STATEMENT_LIMIT6,0
      def initialize(statement_limit = nil)initialize8,0
      def each(&block)each13,0
      def key?(key)key?17,0
      def [](key)[]21,0
      def lengthlength25,0
      def []=(sql, stmt)[]=29,0
      def clearclear36,0
      def delete(key)delete43,0
        def cachecache50,0
        def dealloc(stmt)dealloc54,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/determine_if_preparable_visitor.rb,541
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module DetermineIfPreparableVisitorDetermineIfPreparableVisitor3,0
    module DetermineIfPreparableVisitorActiveRecord::ConnectionAdapters::DetermineIfPreparableVisitor3,0
      attr_reader :preparablepreparable4,0
      def accept(*)accept6,0
      def visit_Arel_Nodes_In(*)visit_Arel_Nodes_In11,0
      def visit_Arel_Nodes_SqlLiteral(*)visit_Arel_Nodes_SqlLiteral16,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/sqlite3/schema_statements.rb,555
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module SQLite3SQLite33,0
    module SQLite3ActiveRecord::ConnectionAdapters::SQLite33,0
      module SchemaStatements # :nodoc:SchemaStatements4,0
      module SchemaStatements # :nodoc:ActiveRecord::ConnectionAdapters::SQLite3::SchemaStatements4,0
          def data_source_sql(name = nil, type: nil)data_source_sql6,0
          def quoted_scope(name = nil, type: nil)quoted_scope16,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/sqlite3/quoting.rb,723
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module SQLite3SQLite33,0
    module SQLite3ActiveRecord::ConnectionAdapters::SQLite33,0
      module Quoting # :nodoc:Quoting4,0
      module Quoting # :nodoc:ActiveRecord::ConnectionAdapters::SQLite3::Quoting4,0
        def quote_string(s)quote_string5,0
        def quote_table_name_for_assignment(table, attr)quote_table_name_for_assignment9,0
        def quote_column_name(name)quote_column_name13,0
        def quoted_time(value)quoted_time17,0
        def quoted_binary(value)quoted_binary21,0
          def _type_cast(value)_type_cast27,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/sqlite3/explain_pretty_printer.rb,459
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module SQLite3SQLite33,0
    module SQLite3ActiveRecord::ConnectionAdapters::SQLite33,0
      class ExplainPrettyPrinter # :nodoc:ExplainPrettyPrinter4,0
      class ExplainPrettyPrinter # :nodoc:ActiveRecord::ConnectionAdapters::SQLite3::ExplainPrettyPrinter4,0
        def pp(result)pp11,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/sqlite3/schema_dumper.rb,553
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module SQLite3SQLite33,0
    module SQLite3ActiveRecord::ConnectionAdapters::SQLite33,0
      module ColumnDumper # :nodoc:ColumnDumper4,0
      module ColumnDumper # :nodoc:ActiveRecord::ConnectionAdapters::SQLite3::ColumnDumper4,0
          def default_primary_key?(column)default_primary_key?7,0
          def explicit_primary_key_default?(column)explicit_primary_key_default?11,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/sqlite3/schema_definitions.rb,1001
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module SQLite3SQLite33,0
    module SQLite3ActiveRecord::ConnectionAdapters::SQLite33,0
      module ColumnMethodsColumnMethods4,0
      module ColumnMethodsActiveRecord::ConnectionAdapters::SQLite3::ColumnMethods4,0
        def primary_key(name, type = :primary_key, **options)primary_key5,0
      class TableDefinition < ActiveRecord::ConnectionAdapters::TableDefinitionTableDefinition14,0
      class TableDefinition < ActiveRecord::ConnectionAdapters::TableDefinitionActiveRecord::ConnectionAdapters::SQLite3::TableDefinition14,0
        def references(*args, **options)references17,0
        alias :belongs_to :referencesbelongs_to20,0
      class Table < ActiveRecord::ConnectionAdapters::TableTable23,0
      class Table < ActiveRecord::ConnectionAdapters::TableActiveRecord::ConnectionAdapters::SQLite3::Table23,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/sqlite3/schema_creation.rb,544
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module SQLite3SQLite33,0
    module SQLite3ActiveRecord::ConnectionAdapters::SQLite33,0
      class SchemaCreation < AbstractAdapter::SchemaCreation # :nodoc:SchemaCreation4,0
      class SchemaCreation < AbstractAdapter::SchemaCreation # :nodoc:ActiveRecord::ConnectionAdapters::SQLite3::SchemaCreation4,0
          def add_column_options!(sql, options)add_column_options!6,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/mysql/column.rb,664
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module MySQLMySQL3,0
    module MySQLActiveRecord::ConnectionAdapters::MySQL3,0
      class Column < ConnectionAdapters::Column # :nodoc:Column4,0
      class Column < ConnectionAdapters::Column # :nodoc:ActiveRecord::ConnectionAdapters::MySQL::Column4,0
        delegate :extra, to: :sql_type_metadata, allow_nil: trueextra5,0
        def unsigned?unsigned?7,0
        def case_sensitive?case_sensitive?11,0
        def auto_increment?auto_increment?15,0
        def virtual?virtual?19,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/mysql/schema_statements.rb,1008
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module MySQLMySQL3,0
    module MySQLActiveRecord::ConnectionAdapters::MySQL3,0
      module SchemaStatements # :nodoc:SchemaStatements4,0
      module SchemaStatements # :nodoc:ActiveRecord::ConnectionAdapters::MySQL::SchemaStatements4,0
        def internal_string_options_for_primary_keyinternal_string_options_for_primary_key5,0
          CHARSETS_OF_4BYTES_MAXLEN = ["utf8mb4", "utf16", "utf16le", "utf32"]CHARSETS_OF_4BYTES_MAXLEN14,0
          CHARSETS_OF_4BYTES_MAXLEN = ["utf8mb4", "utf16", "utf16le", "utf32"]ActiveRecord::ConnectionAdapters::MySQL::SchemaStatements::CHARSETS_OF_4BYTES_MAXLEN14,0
          def data_source_sql(name = nil, type: nil)data_source_sql16,0
          def quoted_scope(name = nil, type: nil)quoted_scope26,0
          def extract_schema_qualified_name(string)extract_schema_qualified_name35,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/mysql/database_statements.rb,961
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module MySQLMySQL3,0
    module MySQLActiveRecord::ConnectionAdapters::MySQL3,0
      module DatabaseStatementsDatabaseStatements4,0
      module DatabaseStatementsActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements4,0
        def select_all(arel, name = nil, binds = [], preparable: nil) # :nodoc:select_all6,0
        def query(sql, name = nil) # :nodoc:query16,0
        def execute(sql, name = nil)execute21,0
        def exec_query(sql, name = "SQL", binds = [], prepare: false)exec_query29,0
        def exec_delete(sql, name = nil, binds = [])exec_delete41,0
        alias :exec_update :exec_deleteexec_update48,0
          def last_inserted_id(result)last_inserted_id52,0
          def exec_stmt_and_free(sql, name, binds, cache_stmt: false)exec_stmt_and_free56,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/mysql/quoting.rb,759
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module MySQLMySQL3,0
    module MySQLActiveRecord::ConnectionAdapters::MySQL3,0
      module Quoting # :nodoc:Quoting4,0
      module Quoting # :nodoc:ActiveRecord::ConnectionAdapters::MySQL::Quoting4,0
        def quote_column_name(name)quote_column_name7,0
        def quote_table_name(name)quote_table_name11,0
        def quoted_truequoted_true15,0
        def unquoted_trueunquoted_true19,0
        def quoted_falsequoted_false23,0
        def unquoted_falseunquoted_false27,0
        def quoted_date(value)quoted_date31,0
        def quoted_binary(value)quoted_binary39,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/mysql/explain_pretty_printer.rb,707
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module MySQLMySQL3,0
    module MySQLActiveRecord::ConnectionAdapters::MySQL3,0
      class ExplainPrettyPrinter # :nodoc:ExplainPrettyPrinter4,0
      class ExplainPrettyPrinter # :nodoc:ActiveRecord::ConnectionAdapters::MySQL::ExplainPrettyPrinter4,0
        def pp(result, elapsed)pp17,0
          def compute_column_widths(result)compute_column_widths39,0
          def build_separator(widths)build_separator48,0
          def build_cells(items, widths)build_cells53,0
          def build_footer(nrows, elapsed)build_footer63,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/mysql/schema_dumper.rb,1018
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module MySQLMySQL3,0
    module MySQLActiveRecord::ConnectionAdapters::MySQL3,0
      module ColumnDumper # :nodoc:ColumnDumper4,0
      module ColumnDumper # :nodoc:ActiveRecord::ConnectionAdapters::MySQL::ColumnDumper4,0
        def prepare_column_options(column)prepare_column_options5,0
        def column_spec_for_primary_key(column)column_spec_for_primary_key19,0
        def migration_keysmigration_keys25,0
          def default_primary_key?(column)default_primary_key?31,0
          def explicit_primary_key_default?(column)explicit_primary_key_default?35,0
          def schema_type(column)schema_type39,0
          def schema_precision(column)schema_precision50,0
          def schema_collation(column)schema_collation54,0
          def extract_expression_for_virtual_column(column)extract_expression_for_virtual_column62,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/mysql/schema_definitions.rb,1719
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module MySQLMySQL3,0
    module MySQLActiveRecord::ConnectionAdapters::MySQL3,0
      module ColumnMethodsColumnMethods4,0
      module ColumnMethodsActiveRecord::ConnectionAdapters::MySQL::ColumnMethods4,0
        def primary_key(name, type = :primary_key, **options)primary_key5,0
        def blob(*args, **options)blob10,0
        def tinyblob(*args, **options)tinyblob14,0
        def mediumblob(*args, **options)mediumblob18,0
        def longblob(*args, **options)longblob22,0
        def tinytext(*args, **options)tinytext26,0
        def mediumtext(*args, **options)mediumtext30,0
        def longtext(*args, **options)longtext34,0
        def json(*args, **options)json38,0
        def unsigned_integer(*args, **options)unsigned_integer42,0
        def unsigned_bigint(*args, **options)unsigned_bigint46,0
        def unsigned_float(*args, **options)unsigned_float50,0
        def unsigned_decimal(*args, **options)unsigned_decimal54,0
      class TableDefinition < ActiveRecord::ConnectionAdapters::TableDefinitionTableDefinition59,0
      class TableDefinition < ActiveRecord::ConnectionAdapters::TableDefinitionActiveRecord::ConnectionAdapters::MySQL::TableDefinition59,0
        def new_column_definition(name, type, **options) # :nodoc:new_column_definition62,0
          def aliased_types(name, fallback)aliased_types80,0
      class Table < ActiveRecord::ConnectionAdapters::TableTable85,0
      class Table < ActiveRecord::ConnectionAdapters::TableActiveRecord::ConnectionAdapters::MySQL::Table85,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/mysql/type_metadata.rb,701
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module MySQLMySQL3,0
    module MySQLActiveRecord::ConnectionAdapters::MySQL3,0
      class TypeMetadata < DelegateClass(SqlTypeMetadata) # :nodoc:TypeMetadata4,0
      class TypeMetadata < DelegateClass(SqlTypeMetadata) # :nodoc:ActiveRecord::ConnectionAdapters::MySQL::TypeMetadata4,0
        attr_reader :extraextra7,0
        def initialize(type_metadata, extra: "")initialize9,0
        def ==(other)==15,0
        alias eql? ==eql?19,0
        def hashhash21,0
          def attributes_for_hashattributes_for_hash27,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/mysql/schema_creation.rb,1144
module ActiveRecordActiveRecord1,0
  module ConnectionAdaptersConnectionAdapters2,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters2,0
    module MySQLMySQL3,0
    module MySQLActiveRecord::ConnectionAdapters::MySQL3,0
      class SchemaCreation < AbstractAdapter::SchemaCreation # :nodoc:SchemaCreation4,0
      class SchemaCreation < AbstractAdapter::SchemaCreation # :nodoc:ActiveRecord::ConnectionAdapters::MySQL::SchemaCreation4,0
        delegate :add_sql_comment!, :mariadb?, to: :@connadd_sql_comment!5,0
        delegate :add_sql_comment!, :mariadb?, to: :@connmariadb?5,0
          def visit_DropForeignKey(name)visit_DropForeignKey10,0
          def visit_AddColumnDefinition(o)visit_AddColumnDefinition14,0
          def visit_ChangeColumnDefinition(o)visit_ChangeColumnDefinition18,0
          def add_table_options!(create_sql, options)add_table_options!23,0
          def add_column_options!(sql, options)add_column_options!27,0
          def add_column_position!(sql, options)add_column_position!54,0
          def index_in_create(table_name, column_name, options)index_in_create64,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/postgresql_adapter.rb,7956
module ActiveRecordActiveRecord20,0
  module ConnectionHandling # :nodoc:ConnectionHandling21,0
  module ConnectionHandling # :nodoc:ActiveRecord::ConnectionHandling21,0
    def postgresql_connection(config)postgresql_connection23,0
  module ConnectionAdaptersConnectionAdapters42,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters42,0
    class PostgreSQLAdapter < AbstractAdapterPostgreSQLAdapter70,0
    class PostgreSQLAdapter < AbstractAdapterActiveRecord::ConnectionAdapters::PostgreSQLAdapter70,0
      ADAPTER_NAME = "PostgreSQL".freezeADAPTER_NAME71,0
      ADAPTER_NAME = "PostgreSQL".freezeActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ADAPTER_NAME71,0
      NATIVE_DATABASE_TYPES = {NATIVE_DATABASE_TYPES73,0
      NATIVE_DATABASE_TYPES = {ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::NATIVE_DATABASE_TYPES73,0
      OID = PostgreSQL::OID #:nodoc:OID116,0
      OID = PostgreSQL::OID #:nodoc:ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID116,0
      def schema_creation # :nodoc:schema_creation124,0
      def arel_visitor # :nodoc:arel_visitor128,0
      def supports_statement_cache?supports_statement_cache?134,0
      def supports_index_sort_order?supports_index_sort_order?138,0
      def supports_partial_index?supports_partial_index?142,0
      def supports_expression_index?supports_expression_index?146,0
      def supports_transaction_isolation?supports_transaction_isolation?150,0
      def supports_foreign_keys?supports_foreign_keys?154,0
      def supports_views?supports_views?158,0
      def supports_datetime_with_precision?supports_datetime_with_precision?162,0
      def supports_json?supports_json?166,0
      def supports_comments?supports_comments?170,0
      def supports_savepoints?supports_savepoints?174,0
      def index_algorithmsindex_algorithms178,0
      class StatementPool < ConnectionAdapters::StatementPoolStatementPool182,0
      class StatementPool < ConnectionAdapters::StatementPoolActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool182,0
        def initialize(connection, max)initialize183,0
        def next_keynext_key189,0
        def []=(sql, key)[]=193,0
          def dealloc(key)dealloc199,0
          def connection_active?connection_active?204,0
      def initialize(connection, logger, connection_parameters, config)initialize212,0
      def clear_cache!clear_cache!239,0
      def truncate(table_name, name = nil)truncate245,0
      def active?active?250,0
      def reconnect!reconnect!260,0
      def reset!reset!268,0
      def disconnect!disconnect!282,0
      def native_database_types #:nodoc:native_database_types289,0
      def set_standard_conforming_stringsset_standard_conforming_strings293,0
      def supports_ddl_transactions?supports_ddl_transactions?297,0
      def supports_advisory_locks?supports_advisory_locks?301,0
      def supports_explain?supports_explain?305,0
      def supports_extensions?supports_extensions?309,0
      def supports_ranges?supports_ranges?314,0
      def supports_materialized_views?supports_materialized_views?318,0
      def supports_pgcrypto_uuid?supports_pgcrypto_uuid?322,0
      def get_advisory_lock(lock_id) # :nodoc:get_advisory_lock326,0
      def release_advisory_lock(lock_id) # :nodoc:release_advisory_lock333,0
      def enable_extension(name)enable_extension340,0
      def disable_extension(name)disable_extension346,0
      def extension_enabled?(name)extension_enabled?352,0
      def extensionsextensions359,0
      def max_identifier_lengthmax_identifier_length368,0
      alias table_alias_length max_identifier_lengthtable_alias_length371,0
      alias index_name_length max_identifier_lengthindex_name_length372,0
      def session_auth=(user)session_auth=375,0
      def use_insert_returning?use_insert_returning?380,0
      def update_table_definition(table_name, base) #:nodoc:update_table_definition384,0
      def column_name_for_operation(operation, node) # :nodoc:column_name_for_operation388,0
      OPERATION_ALIASES = { # :nodoc:OPERATION_ALIASES392,0
      OPERATION_ALIASES = { # :nodoc:ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OPERATION_ALIASES392,0
      def postgresql_versionpostgresql_version399,0
      def default_index_type?(index) # :nodoc:default_index_type?403,0
        VALUE_LIMIT_VIOLATION = "22001"VALUE_LIMIT_VIOLATION410,0
        VALUE_LIMIT_VIOLATION = "22001"ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::VALUE_LIMIT_VIOLATION410,0
        NUMERIC_VALUE_OUT_OF_RANGE = "22003"NUMERIC_VALUE_OUT_OF_RANGE411,0
        NUMERIC_VALUE_OUT_OF_RANGE = "22003"ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::NUMERIC_VALUE_OUT_OF_RANGE411,0
        NOT_NULL_VIOLATION    = "23502"NOT_NULL_VIOLATION412,0
        NOT_NULL_VIOLATION    = "23502"ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::NOT_NULL_VIOLATION412,0
        FOREIGN_KEY_VIOLATION = "23503"FOREIGN_KEY_VIOLATION413,0
        FOREIGN_KEY_VIOLATION = "23503"ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::FOREIGN_KEY_VIOLATION413,0
        UNIQUE_VIOLATION      = "23505"UNIQUE_VIOLATION414,0
        UNIQUE_VIOLATION      = "23505"ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::UNIQUE_VIOLATION414,0
        SERIALIZATION_FAILURE = "40001"SERIALIZATION_FAILURE415,0
        SERIALIZATION_FAILURE = "40001"ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SERIALIZATION_FAILURE415,0
        DEADLOCK_DETECTED     = "40P01"DEADLOCK_DETECTED416,0
        DEADLOCK_DETECTED     = "40P01"ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DEADLOCK_DETECTED416,0
        def translate_exception(exception, message)translate_exception418,0
        def get_oid_type(oid, fmod, column_name, sql_type = "".freeze)get_oid_type441,0
        def initialize_type_map(m)initialize_type_map454,0
        def extract_limit(sql_type)extract_limit524,0
        def extract_value_from_default(default)extract_value_from_default536,0
        def extract_default_function(default_value, default)extract_default_function562,0
        def has_default_function?(default_value, default)has_default_function?566,0
        def load_additional_types(type_map, oids = nil)load_additional_types570,0
        FEATURE_NOT_SUPPORTED = "0A000" #:nodoc:FEATURE_NOT_SUPPORTED597,0
        FEATURE_NOT_SUPPORTED = "0A000" #:nodoc:ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::FEATURE_NOT_SUPPORTED597,0
        def execute_and_clear(sql, name, binds, prepare: false)execute_and_clear599,0
        def exec_no_cache(sql, name, binds)exec_no_cache612,0
        def exec_cache(sql, name, binds)exec_cache621,0
        CACHED_PLAN_HEURISTIC = "cached plan must not change result type".freezeCACHED_PLAN_HEURISTIC655,0
        CACHED_PLAN_HEURISTIC = "cached plan must not change result type".freezeActiveRecord::ConnectionAdapters::PostgreSQLAdapter::CACHED_PLAN_HEURISTIC655,0
        def is_cached_plan_failure?(e)is_cached_plan_failure?656,0
        def in_transaction?in_transaction?664,0
        def sql_key(sql)sql_key670,0
        def prepare_statement(sql)prepare_statement676,0
        def connectconnect696,0
        def configure_connectionconfigure_connection709,0
        def last_insert_id_result(sequence_name)last_insert_id_result742,0
        def column_definitions(table_name)column_definitions764,0
        def extract_table_ref_from_insert_sql(sql)extract_table_ref_from_insert_sql779,0
        def create_table_definition(*args)create_table_definition784,0
        def can_perform_case_insensitive_comparison_for?(column)can_perform_case_insensitive_comparison_for?788,0
        def add_pg_encodersadd_pg_encoders810,0
        def add_pg_decodersadd_pg_decoders818,0
        def construct_coder(row, coder_class)construct_coder845,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/abstract_adapter.rb,6759
module ActiveRecordActiveRecord11,0
  module ConnectionAdapters # :nodoc:ConnectionAdapters12,0
  module ConnectionAdapters # :nodoc:ActiveRecord::ConnectionAdapters12,0
    class AbstractAdapterAbstractAdapter64,0
    class AbstractAdapterActiveRecord::ConnectionAdapters::AbstractAdapter64,0
      ADAPTER_NAME = "Abstract".freezeADAPTER_NAME65,0
      ADAPTER_NAME = "Abstract".freezeActiveRecord::ConnectionAdapters::AbstractAdapter::ADAPTER_NAME65,0
      SIMPLE_INT = /\A\d+\z/SIMPLE_INT75,0
      SIMPLE_INT = /\A\d+\z/ActiveRecord::ConnectionAdapters::AbstractAdapter::SIMPLE_INT75,0
      attr_accessor :visitor, :poolvisitor77,0
      attr_accessor :visitor, :poolvisitor=77,0
      attr_accessor :visitor, :poolpool77,0
      attr_accessor :visitor, :poolpool=77,0
      attr_reader :schema_cache, :owner, :logger, :prepared_statements, :lockschema_cache78,0
      attr_reader :schema_cache, :owner, :logger, :prepared_statements, :lockowner78,0
      attr_reader :schema_cache, :owner, :logger, :prepared_statements, :locklogger78,0
      attr_reader :schema_cache, :owner, :logger, :prepared_statements, :lockprepared_statements78,0
      attr_reader :schema_cache, :owner, :logger, :prepared_statements, :locklock78,0
      alias :in_use? :ownerin_use?79,0
      def self.type_cast_config_to_integer(config)type_cast_config_to_integer81,0
      def self.type_cast_config_to_boolean(config)type_cast_config_to_boolean89,0
      def initialize(connection, logger = nil, config = {}) # :nodoc:initialize97,0
      class VersionVersion119,0
      class VersionActiveRecord::ConnectionAdapters::AbstractAdapter::Version119,0
        def initialize(version_string)initialize122,0
        def <=>(version_string)<=>126,0
      class BindCollector < Arel::Collectors::BindBindCollector131,0
      class BindCollector < Arel::Collectors::BindActiveRecord::ConnectionAdapters::AbstractAdapter::BindCollector131,0
        def compile(bvs, conn)compile132,0
      class SQLString < Arel::Collectors::SQLStringSQLString138,0
      class SQLString < Arel::Collectors::SQLStringActiveRecord::ConnectionAdapters::AbstractAdapter::SQLString138,0
        def compile(bvs, conn)compile139,0
      def collectorcollector144,0
      def arel_visitor # :nodoc:arel_visitor152,0
      def valid_type?(type) # :nodoc:valid_type?156,0
      def schema_creationschema_creation160,0
      def columns(table_name) # :nodoc:columns165,0
      def leaselease173,0
      def schema_cache=(cache)schema_cache=188,0
      def expireexpire194,0
      def steal! # :nodoc:steal!209,0
      def unprepared_statementunprepared_statement221,0
      def adapter_nameadapter_name230,0
      def supports_migrations? # :nodoc:supports_migrations?234,0
      def supports_primary_key? # :nodoc:supports_primary_key?239,0
      def supports_ddl_transactions?supports_ddl_transactions?246,0
      def supports_bulk_alter?supports_bulk_alter?250,0
      def supports_savepoints?supports_savepoints?255,0
      def supports_advisory_locks?supports_advisory_locks?260,0
      def prefetch_primary_key?(table_name = nil)prefetch_primary_key?267,0
      def supports_index_sort_order?supports_index_sort_order?272,0
      def supports_partial_index?supports_partial_index?277,0
      def supports_expression_index?supports_expression_index?282,0
      def supports_explain?supports_explain?287,0
      def supports_transaction_isolation?supports_transaction_isolation?292,0
      def supports_extensions?supports_extensions?297,0
      def supports_indexes_in_create?supports_indexes_in_create?303,0
      def supports_foreign_keys?supports_foreign_keys?308,0
      def supports_foreign_keys_in_create?supports_foreign_keys_in_create?314,0
      def supports_views?supports_views?319,0
      def supports_datetime_with_precision?supports_datetime_with_precision?324,0
      def supports_json?supports_json?329,0
      def supports_comments?supports_comments?334,0
      def supports_comments_in_create?supports_comments_in_create?339,0
      def supports_multi_insert?supports_multi_insert?344,0
      def supports_virtual_columns?supports_virtual_columns?349,0
      def disable_extension(name)disable_extension354,0
      def enable_extension(name)enable_extension358,0
      def get_advisory_lock(lock_id) # :nodoc:get_advisory_lock365,0
      def release_advisory_lock(lock_id) # :nodoc:release_advisory_lock372,0
      def extensionsextensions376,0
      def index_algorithmsindex_algorithms381,0
      def disable_referential_integritydisable_referential_integrity388,0
      def active?active?397,0
      def reconnect!reconnect!403,0
      def disconnect!disconnect!410,0
      def reset!reset!421,0
      def clear_cache!clear_cache!428,0
      def requires_reloading?requires_reloading?433,0
      def verify!(*ignored)verify!440,0
      def raw_connectionraw_connection453,0
      def case_sensitive_comparison(table, attribute, column, value) # :nodoc:case_sensitive_comparison457,0
      def case_insensitive_comparison(table, attribute, column, value) # :nodoc:case_insensitive_comparison461,0
      def can_perform_case_insensitive_comparison_for?(column)can_perform_case_insensitive_comparison_for?469,0
      def closeclose475,0
      def type_map # :nodoc:type_map479,0
      def new_column(name, default, sql_type_metadata, null, table_name, default_function = nil, collation = nil) # :nodoc:new_column485,0
      def lookup_cast_type(sql_type) # :nodoc:lookup_cast_type489,0
      def column_name_for_operation(operation, node) # :nodoc:column_name_for_operation493,0
      def combine_bind_parameters(combine_bind_parameters497,0
      def default_index_type?(index) # :nodoc:default_index_type?515,0
        def initialize_type_map(m)initialize_type_map521,0
        def reload_type_mapreload_type_map552,0
        def register_class_with_limit(mapping, key, klass)register_class_with_limit557,0
        def register_class_with_precision(mapping, key, klass)register_class_with_precision564,0
        def extract_scale(sql_type)extract_scale571,0
        def extract_precision(sql_type)extract_precision578,0
        def extract_limit(sql_type)extract_limit582,0
        def translate_exception_class(e, sql)translate_exception_class591,0
        def log(sql, name = "SQL", binds = [], type_casted_binds = [], statement_name = nil) # :doc:log603,0
        def translate_exception(exception, message)translate_exception620,0
        def without_prepared_statement?(binds)without_prepared_statement?630,0
        def column_for(table_name, column_name)column_for634,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/connection_adapters/abstract_mysql_adapter.rb,10081
module ActiveRecordActiveRecord14,0
  module ConnectionAdaptersConnectionAdapters15,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters15,0
    class AbstractMysqlAdapter < AbstractAdapterAbstractMysqlAdapter16,0
    class AbstractMysqlAdapter < AbstractAdapterActiveRecord::ConnectionAdapters::AbstractMysqlAdapter16,0
      def update_table_definition(table_name, base) # :nodoc:update_table_definition21,0
      def schema_creation # :nodoc:schema_creation25,0
      def arel_visitor # :nodoc:arel_visitor29,0
      NATIVE_DATABASE_TYPES = {NATIVE_DATABASE_TYPES43,0
      NATIVE_DATABASE_TYPES = {ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::NATIVE_DATABASE_TYPES43,0
      INDEX_TYPES  = [:fulltext, :spatial]INDEX_TYPES59,0
      INDEX_TYPES  = [:fulltext, :spatial]ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::INDEX_TYPES59,0
      INDEX_USINGS = [:btree, :hash]INDEX_USINGS60,0
      INDEX_USINGS = [:btree, :hash]ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::INDEX_USINGS60,0
      class StatementPool < ConnectionAdapters::StatementPoolStatementPool62,0
      class StatementPool < ConnectionAdapters::StatementPoolActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::StatementPool62,0
        private def dealloc(stmt)dealloc63,0
      def initialize(connection, logger, connection_options, config)initialize68,0
      def version #:nodoc:version78,0
      def mariadb? # :nodoc:mariadb?82,0
      def supports_bulk_alter? #:nodoc:supports_bulk_alter?86,0
      def supports_statement_cache?supports_statement_cache?92,0
      def supports_index_sort_order?supports_index_sort_order?98,0
      def supports_transaction_isolation?supports_transaction_isolation?102,0
      def supports_explain?supports_explain?106,0
      def supports_indexes_in_create?supports_indexes_in_create?110,0
      def supports_foreign_keys?supports_foreign_keys?114,0
      def supports_views?supports_views?118,0
      def supports_datetime_with_precision?supports_datetime_with_precision?122,0
      def supports_virtual_columns?supports_virtual_columns?130,0
      def supports_advisory_locks?supports_advisory_locks?138,0
      def get_advisory_lock(lock_name, timeout = 0) # :nodoc:get_advisory_lock142,0
      def release_advisory_lock(lock_name) # :nodoc:release_advisory_lock146,0
      def native_database_typesnative_database_types150,0
      def index_algorithmsindex_algorithms154,0
      def each_hash(result) # :nodoc:each_hash162,0
      def new_column(*args) #:nodoc:new_column166,0
      def error_number(exception) # :nodoc:error_number172,0
      def disable_referential_integrity #:nodoc:disable_referential_integrity178,0
      def clear_cache!clear_cache!192,0
      def explain(arel, binds = [])explain201,0
      def execute(sql, name = nil)execute211,0
      def execute_and_free(sql, name = nil) # :nodoc:execute_and_free222,0
      def begin_db_transactionbegin_db_transaction226,0
      def begin_isolated_db_transaction(isolation)begin_isolated_db_transaction230,0
      def commit_db_transaction #:nodoc:commit_db_transaction235,0
      def exec_rollback_db_transaction #:nodoc:exec_rollback_db_transaction239,0
      def join_to_update(update, select, key) # :nodoc:join_to_update246,0
      def empty_insert_statement_valueempty_insert_statement_value255,0
      def recreate_database(name, options = {})recreate_database263,0
      def create_database(name, options = {})create_database277,0
      def drop_database(name) #:nodoc:drop_database289,0
      def current_databasecurrent_database293,0
      def charsetcharset298,0
      def collationcollation303,0
      def truncate(table_name, name = nil)truncate307,0
      def indexes(table_name, name = nil) #:nodoc:indexes312,0
      def new_column_from_field(table_name, field) # :nodoc:new_column_from_field341,0
      def table_comment(table_name) # :nodoc:table_comment351,0
      def create_table(table_name, **options) #:nodoc:create_table362,0
      def bulk_change_table(table_name, operations) #:nodoc:bulk_change_table366,0
      def rename_table(table_name, new_name)rename_table385,0
      def drop_table(table_name, options = {})drop_table405,0
      def rename_index(table_name, old_name, new_name)rename_index409,0
      def change_column_default(table_name, column_name, default_or_changes) #:nodoc:change_column_default419,0
      def change_column_null(table_name, column_name, null, default = nil) #:nodoc:change_column_null425,0
      def change_column(table_name, column_name, type, options = {}) #:nodoc:change_column435,0
      def rename_column(table_name, column_name, new_column_name) #:nodoc:rename_column439,0
      def add_index(table_name, column_name, options = {}) #:nodoc:add_index444,0
      def add_sql_comment!(sql, comment) # :nodoc:add_sql_comment!450,0
      def foreign_keys(table_name)foreign_keys455,0
      def table_options(table_name) # :nodoc:table_options491,0
      def type_to_sql(type, limit: nil, precision: nil, scale: nil, unsigned: nil, **) # :nodoc:type_to_sql513,0
      def show_variable(name)show_variable537,0
      def primary_keys(table_name) # :nodoc:primary_keys543,0
      def case_sensitive_comparison(table, attribute, column, value) # :nodoc:case_sensitive_comparison558,0
      def can_perform_case_insensitive_comparison_for?(column)can_perform_case_insensitive_comparison_for?566,0
      def columns_for_distinct(columns, orders) # :nodoc:columns_for_distinct575,0
      def strict_mode?strict_mode?586,0
      def default_index_type?(index) # :nodoc:default_index_type?590,0
        def initialize_type_map(m)initialize_type_map596,0
        def register_integer_type(mapping, key, options)register_integer_type636,0
        def extract_precision(sql_type)extract_precision646,0
        def fetch_type_metadata(sql_type, extra = "")fetch_type_metadata654,0
        def add_index_length(quoted_columns, **options)add_index_length658,0
        def add_options_for_index_columns(quoted_columns, **options)add_options_for_index_columns672,0
        ER_DUP_ENTRY            = 1062ER_DUP_ENTRY678,0
        ER_DUP_ENTRY            = 1062ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::ER_DUP_ENTRY678,0
        ER_NOT_NULL_VIOLATION   = 1048ER_NOT_NULL_VIOLATION679,0
        ER_NOT_NULL_VIOLATION   = 1048ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::ER_NOT_NULL_VIOLATION679,0
        ER_DO_NOT_HAVE_DEFAULT  = 1364ER_DO_NOT_HAVE_DEFAULT680,0
        ER_DO_NOT_HAVE_DEFAULT  = 1364ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::ER_DO_NOT_HAVE_DEFAULT680,0
        ER_NO_REFERENCED_ROW_2  = 1452ER_NO_REFERENCED_ROW_2681,0
        ER_NO_REFERENCED_ROW_2  = 1452ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::ER_NO_REFERENCED_ROW_2681,0
        ER_DATA_TOO_LONG        = 1406ER_DATA_TOO_LONG682,0
        ER_DATA_TOO_LONG        = 1406ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::ER_DATA_TOO_LONG682,0
        ER_OUT_OF_RANGE         = 1264ER_OUT_OF_RANGE683,0
        ER_OUT_OF_RANGE         = 1264ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::ER_OUT_OF_RANGE683,0
        ER_LOCK_DEADLOCK        = 1213ER_LOCK_DEADLOCK684,0
        ER_LOCK_DEADLOCK        = 1213ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::ER_LOCK_DEADLOCK684,0
        ER_CANNOT_ADD_FOREIGN   = 1215ER_CANNOT_ADD_FOREIGN685,0
        ER_CANNOT_ADD_FOREIGN   = 1215ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::ER_CANNOT_ADD_FOREIGN685,0
        ER_CANNOT_CREATE_TABLE  = 1005ER_CANNOT_CREATE_TABLE686,0
        ER_CANNOT_CREATE_TABLE  = 1005ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::ER_CANNOT_CREATE_TABLE686,0
        def translate_exception(exception, message)translate_exception688,0
        def add_column_sql(table_name, column_name, type, options = {})add_column_sql715,0
        def change_column_sql(table_name, column_name, type, options = {})change_column_sql721,0
        def rename_column_sql(table_name, column_name, new_column_name)rename_column_sql741,0
        def remove_column_sql(table_name, column_name, type = nil, options = {})remove_column_sql755,0
        def remove_columns_sql(table_name, *column_names)remove_columns_sql759,0
        def add_index_sql(table_name, column_name, options = {})add_index_sql763,0
        def remove_index_sql(table_name, options = {})remove_index_sql769,0
        def add_timestamps_sql(table_name, options = {})add_timestamps_sql774,0
        def remove_timestamps_sql(table_name, options = {})remove_timestamps_sql778,0
        def subquery_for(key, select)subquery_for784,0
        def supports_rename_index?supports_rename_index?797,0
        def configure_connectionconfigure_connection801,0
        def column_definitions(table_name) # :nodoc:column_definitions854,0
        def extract_foreign_key_action(specifier) # :nodoc:extract_foreign_key_action860,0
        def create_table_info(table_name) # :nodoc:create_table_info867,0
        def create_table_definition(*args) # :nodoc:create_table_definition871,0
        def mismatched_foreign_key(message)mismatched_foreign_key875,0
        def integer_to_sql(limit) # :nodoc:integer_to_sql887,0
        def text_to_sql(limit) # :nodoc:text_to_sql898,0
        def binary_to_sql(limit) # :nodoc:binary_to_sql908,0
        def version_stringversion_string918,0
        class MysqlJson < Type::Internal::AbstractJson # :nodoc:MysqlJson922,0
        class MysqlJson < Type::Internal::AbstractJson # :nodoc:ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::MysqlJson922,0
        class MysqlString < Type::String # :nodoc:MysqlString925,0
        class MysqlString < Type::String # :nodoc:ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::MysqlString925,0
          def serialize(value)serialize926,0
            def cast_value(value)cast_value936,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/statement_cache.rb,1513
module ActiveRecordActiveRecord1,0
  class StatementCache # :nodoc:StatementCache28,0
  class StatementCache # :nodoc:ActiveRecord::StatementCache28,0
    class Substitute; end # :nodoc:Substitute29,0
    class Substitute; end # :nodoc:ActiveRecord::StatementCache::Substitute29,0
    class Query # :nodoc:Query31,0
    class Query # :nodoc:ActiveRecord::StatementCache::Query31,0
      def initialize(sql)initialize32,0
      def sql_for(binds, connection)sql_for36,0
    class PartialQuery < Query # :nodoc:PartialQuery41,0
    class PartialQuery < Query # :nodoc:ActiveRecord::StatementCache::PartialQuery41,0
      def initialize(values)initialize42,0
      def sql_for(binds, connection)sql_for49,0
    def self.query(sql)query57,0
    def self.partial_query(values)partial_query61,0
    class Params # :nodoc:Params65,0
    class Params # :nodoc:ActiveRecord::StatementCache::Params65,0
      def bind; Substitute.new; endbind66,0
    class BindMap # :nodoc:BindMap69,0
    class BindMap # :nodoc:ActiveRecord::StatementCache::BindMap69,0
      def initialize(bound_attributes)initialize70,0
      def bind(values)bind81,0
    attr_reader :bind_map, :query_builderbind_map88,0
    attr_reader :bind_map, :query_builderquery_builder88,0
    def self.create(connection, block = Proc.new)create90,0
    def initialize(query_builder, bind_map)initialize97,0
    def execute(params, klass, connection, &block)execute102,0
    alias :call :executecall109,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/readonly_attributes.rb,382
module ActiveRecordActiveRecord1,0
  module ReadonlyAttributesReadonlyAttributes2,0
  module ReadonlyAttributesActiveRecord::ReadonlyAttributes2,0
    module ClassMethodsClassMethods10,0
    module ClassMethodsActiveRecord::ReadonlyAttributes::ClassMethods10,0
      def attr_readonly(*attributes)attr_readonly13,0
      def readonly_attributesreadonly_attributes18,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/reflection.rb,13397
module ActiveRecordActiveRecord5,0
  module Reflection # :nodoc:Reflection7,0
  module Reflection # :nodoc:ActiveRecord::Reflection7,0
    def self.create(macro, name, scope, options, ar)create17,0
    def self.add_reflection(ar, name, reflection)add_reflection36,0
    def self.add_aggregate_reflection(ar, name, reflection)add_aggregate_reflection42,0
    module ClassMethodsClassMethods54,0
    module ClassMethodsActiveRecord::Reflection::ClassMethods54,0
      def reflect_on_all_aggregationsreflect_on_all_aggregations56,0
      def reflect_on_aggregation(aggregation)reflect_on_aggregation64,0
      def reflectionsreflections72,0
      def reflect_on_all_associations(macro = nil)reflect_on_all_associations101,0
      def reflect_on_association(association)reflect_on_association112,0
      def _reflect_on_association(association) #:nodoc:_reflect_on_association116,0
      def reflect_on_all_autosave_associationsreflect_on_all_autosave_associations121,0
      def clear_reflections_cache # :nodoc:clear_reflections_cache125,0
    class AbstractReflection # :nodoc:AbstractReflection143,0
    class AbstractReflection # :nodoc:ActiveRecord::Reflection::AbstractReflection143,0
      def through_reflection?through_reflection?144,0
      def table_nametable_name148,0
      def build_association(attributes, &block)build_association154,0
      def quoted_table_namequoted_table_name158,0
      def primary_key_typeprimary_key_type162,0
      def class_nameclass_name170,0
      JoinKeys = Struct.new(:key, :foreign_key) # :nodoc:JoinKeys174,0
      JoinKeys = Struct.new(:key, :foreign_key) # :nodoc:ActiveRecord::Reflection::AbstractReflection::JoinKeys174,0
      def join_keysjoin_keys176,0
      def scopesscopes182,0
      def scope_chainscope_chain186,0
      def join_scope(table)join_scope191,0
      def join_scopes(table, predicate_builder) # :nodoc:join_scopes199,0
      def klass_join_scope(table, predicate_builder) # :nodoc:klass_join_scope207,0
      def constraintsconstraints212,0
      def counter_cache_columncounter_cache_column216,0
      def inverse_ofinverse_of228,0
      def check_validity_of_inverse!check_validity_of_inverse!234,0
      def inverse_which_updates_counter_cacheinverse_which_updates_counter_cache252,0
      alias inverse_updates_counter_cache? inverse_which_updates_counter_cacheinverse_updates_counter_cache?258,0
      def inverse_updates_counter_in_memory?inverse_updates_counter_in_memory?260,0
      def has_cached_counter?has_cached_counter?268,0
      def counter_must_be_updated_by_has_many?counter_must_be_updated_by_has_many?274,0
      def alias_candidate(name)alias_candidate278,0
      def chainchain282,0
      def get_join_keys(association_klass)get_join_keys286,0
      def build_scope(table, predicate_builder = predicate_builder(table))build_scope290,0
        def predicate_builder(table)predicate_builder295,0
        def join_pk(_)join_pk299,0
        def join_fkjoin_fk303,0
    class MacroReflection < AbstractReflectionMacroReflection310,0
    class MacroReflection < AbstractReflectionActiveRecord::Reflection::MacroReflection310,0
      attr_reader :namename315,0
      attr_reader :scopescope317,0
      attr_reader :optionsoptions323,0
      attr_reader :active_recordactive_record325,0
      attr_reader :plural_name # :nodoc:plural_name327,0
      def initialize(name, scope, options, active_record)initialize329,0
      def autosave=(autosave)autosave=339,0
      def klassklass351,0
      def compute_class(name)compute_class355,0
      def ==(other_aggregation)==361,0
      def scope_for(klass)scope_for369,0
        def derive_class_namederive_class_name374,0
    class AggregateReflection < MacroReflection #:nodoc:AggregateReflection381,0
    class AggregateReflection < MacroReflection #:nodoc:ActiveRecord::Reflection::AggregateReflection381,0
      def mappingmapping382,0
    class AssociationReflection < MacroReflection #:nodoc:AssociationReflection390,0
    class AssociationReflection < MacroReflection #:nodoc:ActiveRecord::Reflection::AssociationReflection390,0
      def klassklass403,0
      def compute_class(name)compute_class407,0
      attr_reader :type, :foreign_typetype411,0
      attr_reader :type, :foreign_typeforeign_type411,0
      attr_accessor :parent_reflection # Reflectionparent_reflection412,0
      attr_accessor :parent_reflection # Reflectionparent_reflection=412,0
      def initialize(name, scope, options, active_record)initialize414,0
      def association_scope_cache(conn, owner)association_scope_cache434,0
      def constructable? # :nodoc:constructable?444,0
      def join_tablejoin_table448,0
      def foreign_keyforeign_key452,0
      def association_foreign_keyassociation_foreign_key456,0
      def association_primary_key(klass = nil)association_primary_key461,0
      def association_primary_key_typeassociation_primary_key_type465,0
      def active_record_primary_keyactive_record_primary_key469,0
      def check_validity!check_validity!473,0
      def check_preloadable!check_preloadable!477,0
      alias :check_eager_loadable! :check_preloadable!check_eager_loadable!488,0
      def join_id_for(owner) # :nodoc:join_id_for490,0
      def through_reflectionthrough_reflection494,0
      def source_reflectionsource_reflection498,0
      def collect_join_chaincollect_join_chain504,0
      def clear_association_scope_cache # :nodoc:clear_association_scope_cache510,0
      def nested?nested?514,0
      def has_scope?has_scope?518,0
      def has_inverse?has_inverse?522,0
      def polymorphic_inverse_of(associated_class)polymorphic_inverse_of526,0
      def macro; raise NotImplementedError; endmacro539,0
      def collection?collection?544,0
      def validate?validate?557,0
      def belongs_to?; false; endbelongs_to?562,0
      def has_one?; false; endhas_one?565,0
      def association_class; raise NotImplementedError; endassociation_class567,0
      def polymorphic?polymorphic?569,0
      VALID_AUTOMATIC_INVERSE_MACROS = [:has_many, :has_one, :belongs_to]VALID_AUTOMATIC_INVERSE_MACROS573,0
      VALID_AUTOMATIC_INVERSE_MACROS = [:has_many, :has_one, :belongs_to]ActiveRecord::Reflection::AssociationReflection::VALID_AUTOMATIC_INVERSE_MACROS573,0
      INVALID_AUTOMATIC_INVERSE_OPTIONS = [:conditions, :through, :polymorphic, :foreign_key]INVALID_AUTOMATIC_INVERSE_OPTIONS574,0
      INVALID_AUTOMATIC_INVERSE_OPTIONS = [:conditions, :through, :polymorphic, :foreign_key]ActiveRecord::Reflection::AssociationReflection::INVALID_AUTOMATIC_INVERSE_OPTIONS574,0
      def add_as_source(seed)add_as_source576,0
      def add_as_polymorphic_through(reflection, seed)add_as_polymorphic_through580,0
      def add_as_through(seed)add_as_through584,0
      def extensionsextensions588,0
        def actual_source_reflection # FIXME: this is a horrible nameactual_source_reflection594,0
        def calculate_constructable(macro, options)calculate_constructable600,0
        def inverse_nameinverse_name607,0
        def automatic_inverse_ofautomatic_inverse_of616,0
        def valid_inverse_reflection?(reflection)valid_inverse_reflection?641,0
        def can_find_inverse_of_automatically?(reflection)can_find_inverse_of_automatically?657,0
        def derive_class_namederive_class_name664,0
        def derive_foreign_keyderive_foreign_key670,0
        def derive_join_tablederive_join_table680,0
        def primary_key(klass)primary_key684,0
    class HasManyReflection < AssociationReflection # :nodoc:HasManyReflection689,0
    class HasManyReflection < AssociationReflection # :nodoc:ActiveRecord::Reflection::HasManyReflection689,0
      def macro; :has_many; endmacro690,0
      def collection?; true; endcollection?692,0
      def association_classassociation_class694,0
      def association_primary_key(klass = nil)association_primary_key702,0
    class HasOneReflection < AssociationReflection # :nodoc:HasOneReflection707,0
    class HasOneReflection < AssociationReflection # :nodoc:ActiveRecord::Reflection::HasOneReflection707,0
      def macro; :has_one; endmacro708,0
      def has_one?; true; endhas_one?710,0
      def association_classassociation_class712,0
        def calculate_constructable(macro, options)calculate_constructable722,0
    class BelongsToReflection < AssociationReflection # :nodoc:BelongsToReflection727,0
    class BelongsToReflection < AssociationReflection # :nodoc:ActiveRecord::Reflection::BelongsToReflection727,0
      def macro; :belongs_to; endmacro728,0
      def belongs_to?; true; endbelongs_to?730,0
      def association_classassociation_class732,0
      def join_id_for(owner) # :nodoc:join_id_for740,0
        def calculate_constructable(macro, options)calculate_constructable746,0
        def join_fkjoin_fk750,0
        def join_pk(klass)join_pk754,0
    class HasAndBelongsToManyReflection < AssociationReflection # :nodoc:HasAndBelongsToManyReflection759,0
    class HasAndBelongsToManyReflection < AssociationReflection # :nodoc:ActiveRecord::Reflection::HasAndBelongsToManyReflection759,0
      def initialize(name, scope, options, active_record)initialize760,0
      def macro; :has_and_belongs_to_many; endmacro764,0
      def collection?collection?766,0
    class ThroughReflection < AbstractReflection #:nodoc:ThroughReflection773,0
    class ThroughReflection < AbstractReflection #:nodoc:ActiveRecord::Reflection::ThroughReflection773,0
      attr_reader :delegate_reflectiondelegate_reflection774,0
      delegate :foreign_key, :foreign_type, :association_foreign_key,foreign_key775,0
      delegate :foreign_key, :foreign_type, :association_foreign_key,foreign_type775,0
      delegate :foreign_key, :foreign_type, :association_foreign_key,association_foreign_key775,0
               :active_record_primary_key, :type, :get_join_keys, to: :source_reflectionactive_record_primary_key776,0
               :active_record_primary_key, :type, :get_join_keys, to: :source_reflectiontype776,0
               :active_record_primary_key, :type, :get_join_keys, to: :source_reflectionget_join_keys776,0
      def initialize(delegate_reflection)initialize778,0
      def through_reflection?through_reflection?784,0
      def klassklass788,0
      def source_reflectionsource_reflection809,0
      def through_reflectionthrough_reflection825,0
      def collect_join_chaincollect_join_chain846,0
      def clear_association_scope_cache # :nodoc:clear_association_scope_cache852,0
      def scopesscopes858,0
      def join_scopes(table, predicate_builder) # :nodoc:join_scopes862,0
      def source_type_scopesource_type_scope866,0
      def has_scope?has_scope?870,0
      def nested?nested?877,0
      def association_primary_key(klass = nil)association_primary_key884,0
      def association_primary_key_typeassociation_primary_key_type890,0
      def source_reflection_namessource_reflection_names905,0
      def source_reflection_name # :nodoc:source_reflection_name909,0
      def source_optionssource_options930,0
      def through_optionsthrough_options934,0
      def join_id_for(owner) # :nodoc:join_id_for938,0
      def check_validity!check_validity!942,0
      def constraintsconstraints982,0
      def add_as_source(seed)add_as_source988,0
      def add_as_polymorphic_through(reflection, seed)add_as_polymorphic_through992,0
      def add_as_through(seed)add_as_through996,0
      def collect_join_reflections(seed)collect_join_reflections1000,0
        def actual_source_reflection # FIXME: this is a horrible nameactual_source_reflection1011,0
        def primary_key(klass)primary_key1015,0
        def inverse_name; delegate_reflection.send(:inverse_name); endinverse_name1019,0
        def derive_class_namederive_class_name1021,0
    class PolymorphicReflection < AbstractReflection # :nodoc:PolymorphicReflection1032,0
    class PolymorphicReflection < AbstractReflection # :nodoc:ActiveRecord::Reflection::PolymorphicReflection1032,0
      def initialize(reflection, previous_reflection)initialize1033,0
      def scopesscopes1038,0
      def join_scopes(table, predicate_builder) # :nodoc:join_scopes1047,0
      def klassklass1056,0
      def scopescope1060,0
      def table_nametable_name1064,0
      def plural_nameplural_name1068,0
      def typetype1072,0
      def constraintsconstraints1076,0
      def source_type_infosource_type_info1080,0
      def get_join_keys(association_klass)get_join_keys1086,0
    class RuntimeReflection < PolymorphicReflection # :nodoc:RuntimeReflection1091,0
    class RuntimeReflection < PolymorphicReflection # :nodoc:ActiveRecord::Reflection::RuntimeReflection1091,0
      attr_accessor :nextnext1092,0
      attr_accessor :nextnext=1092,0
      def initialize(reflection, association)initialize1094,0
      def klassklass1099,0
      def table_nametable_name1103,0
      def constraintsconstraints1107,0
      def source_type_infosource_type_info1111,0
      def alias_candidate(name)alias_candidate1115,0
      def alias_namealias_name1119,0
      def all_includes; yield; endall_includes1123,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/association_relation.rb,527
module ActiveRecordActiveRecord1,0
  class AssociationRelation < RelationAssociationRelation2,0
  class AssociationRelation < RelationActiveRecord::AssociationRelation2,0
    def initialize(klass, table, predicate_builder, association)initialize3,0
    def proxy_associationproxy_association8,0
    def ==(other)==12,0
    def build(*args, &block)build16,0
    alias new buildnew19,0
    def create(*args, &block)create21,0
    def create!(*args, &block)create!25,0
      def exec_queriesexec_queries31,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/transactions.rb,2926
module ActiveRecordActiveRecord1,0
  module TransactionsTransactions3,0
  module TransactionsActiveRecord::Transactions3,0
    ACTIONS = [:create, :destroy, :update]ACTIONS6,0
    ACTIONS = [:create, :destroy, :update]ActiveRecord::Transactions::ACTIONS6,0
    module ClassMethodsClassMethods207,0
    module ClassMethodsActiveRecord::Transactions::ClassMethods207,0
      def transaction(options = {}, &block)transaction209,0
      def before_commit(*args, &block) # :nodoc:before_commit213,0
      def after_commit(*args, &block)after_commit230,0
      def after_create_commit(*args, &block)after_create_commit236,0
      def after_update_commit(*args, &block)after_update_commit242,0
      def after_destroy_commit(*args, &block)after_destroy_commit248,0
      def after_rollback(*args, &block)after_rollback256,0
      def before_commit_without_transaction_enrollment(*args, &block) # :nodoc:before_commit_without_transaction_enrollment261,0
      def after_commit_without_transaction_enrollment(*args, &block) # :nodoc:after_commit_without_transaction_enrollment266,0
      def after_rollback_without_transaction_enrollment(*args, &block) # :nodoc:after_rollback_without_transaction_enrollment271,0
        def set_options_for_callbacks!(args, enforced_options = {})set_options_for_callbacks!278,0
        def assert_valid_transaction_action(actions)assert_valid_transaction_action290,0
    def transaction(options = {}, &block)transaction298,0
    def destroy #:nodoc:destroy302,0
    def save(*) #:nodoc:save306,0
    def save!(*) #:nodoc:save!312,0
    def touch(*) #:nodoc:touch316,0
    def rollback_active_record_state!rollback_active_record_state!321,0
    def before_committed! # :nodoc:before_committed!331,0
    def committed!(should_run_callbacks: true) #:nodoc:committed!340,0
    def rolledback!(force_restore_state: false, should_run_callbacks: true) #:nodoc:rolledback!351,0
    def add_to_transactionadd_to_transaction363,0
    def with_transaction_returning_statuswith_transaction_returning_status379,0
      def remember_transaction_record_stateremember_transaction_record_state402,0
      def clear_transaction_record_stateclear_transaction_record_state413,0
      def force_clear_transaction_record_stateforce_clear_transaction_record_state419,0
      def restore_transaction_record_state(force = false)restore_transaction_record_state424,0
      def transaction_record_state(state)transaction_record_state442,0
      def transaction_include_any_action?(actions)transaction_include_any_action?447,0
      def set_transaction_state(state)set_transaction_state461,0
      def has_transactional_callbacks?has_transactional_callbacks?465,0
      def sync_with_transaction_statesync_with_transaction_state486,0
      def update_attributes_from_transaction_state(transaction_state)update_attributes_from_transaction_state490,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/scoping.rb,1280
module ActiveRecordActiveRecord3,0
  module ScopingScoping4,0
  module ScopingActiveRecord::Scoping4,0
    module ClassMethodsClassMethods12,0
    module ClassMethodsActiveRecord::Scoping::ClassMethods12,0
      def current_scope(skip_inherited_scope = false) # :nodoc:current_scope13,0
      def current_scope=(scope) #:nodoc:current_scope=17,0
      def scope_attributes # :nodoc:scope_attributes23,0
      def scope_attributes? # :nodoc:scope_attributes?28,0
    def populate_with_current_scope_attributes # :nodoc:populate_with_current_scope_attributes33,0
    def initialize_internals_callback # :nodoc:initialize_internals_callback41,0
    class ScopeRegistry # :nodoc:ScopeRegistry68,0
    class ScopeRegistry # :nodoc:ActiveRecord::Scoping::ScopeRegistry68,0
      VALID_SCOPE_TYPES = [:current_scope, :ignore_default_scope]VALID_SCOPE_TYPES71,0
      VALID_SCOPE_TYPES = [:current_scope, :ignore_default_scope]ActiveRecord::Scoping::ScopeRegistry::VALID_SCOPE_TYPES71,0
      def initializeinitialize73,0
      def value_for(scope_type, model, skip_inherited_scope = false)value_for78,0
      def set_value_for(scope_type, model, value)set_value_for91,0
        def raise_invalid_scope_type!(scope_type)raise_invalid_scope_type!98,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/explain_subscriber.rb,676
module ActiveRecordActiveRecord4,0
  class ExplainSubscriber # :nodoc:ExplainSubscriber5,0
  class ExplainSubscriber # :nodoc:ActiveRecord::ExplainSubscriber5,0
    def start(name, id, payload)start6,0
    def finish(name, id, payload)finish10,0
    IGNORED_PAYLOADS = %w(SCHEMA EXPLAIN)IGNORED_PAYLOADS21,0
    IGNORED_PAYLOADS = %w(SCHEMA EXPLAIN)ActiveRecord::ExplainSubscriber::IGNORED_PAYLOADS21,0
    EXPLAINED_SQLS = /\A\s*(with|select|update|delete|insert)\b/iEXPLAINED_SQLS22,0
    EXPLAINED_SQLS = /\A\s*(with|select|update|delete|insert)\b/iActiveRecord::ExplainSubscriber::EXPLAINED_SQLS22,0
    def ignore_payload?(payload)ignore_payload?23,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/schema_dumper.rb,1168
module ActiveRecordActiveRecord3,0
  class SchemaDumper #:nodoc:SchemaDumper8,0
  class SchemaDumper #:nodoc:ActiveRecord::SchemaDumper8,0
    cattr_accessor :ignore_tablesignore_tables16,0
    cattr_accessor :ignore_tablesignore_tables=16,0
      def dump(connection = ActiveRecord::Base.connection, stream = STDOUT, config = ActiveRecord::Base)dump20,0
        def generate_options(config)generate_options26,0
    def dump(stream)dump34,0
      def initialize(connection, options = {})initialize44,0
      def header(stream)header50,0
      def trailer(stream)trailer71,0
      def extensions(stream)extensions75,0
      def tables(stream)tables87,0
      def table(table, stream)table102,0
      def indexes(table, stream)indexes161,0
      def indexes_in_create(table, stream)indexes_in_create173,0
      def index_parts(index)index_parts182,0
      def foreign_keys(table, stream)foreign_keys197,0
      def format_colspec(colspec)format_colspec227,0
      def format_options(options)format_options231,0
      def remove_prefix_and_suffix(table)remove_prefix_and_suffix235,0
      def ignored?(table_name)ignored?239,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/version.rb,68
module ActiveRecordActiveRecord3,0
  def self.versionversion5,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/persistence.rb,2302
module ActiveRecordActiveRecord1,0
  module PersistencePersistence3,0
  module PersistenceActiveRecord::Persistence3,0
    module ClassMethodsClassMethods6,0
    module ClassMethodsActiveRecord::Persistence::ClassMethods6,0
      def create(attributes = nil, &block)create29,0
      def create!(attributes = nil, &block)create!46,0
      def instantiate(attributes, column_types = {}, &block)instantiate66,0
        def discriminate_class_for_record(record)discriminate_class_for_record78,0
    def new_record?new_record?85,0
    def destroyed?destroyed?91,0
    def persisted?persisted?98,0
    def save(*args, &block)save128,0
    def save!(*args, &block)save!161,0
    def deletedelete177,0
    def destroydestroy190,0
    def destroy!destroy!210,0
    def becomes(klass)becomes226,0
    def becomes!(klass)becomes!243,0
    def update_attribute(name, value)update_attribute265,0
    def update(attributes)update276,0
    alias update_attributes updateupdate_attributes285,0
    def update!(attributes)update!289,0
    alias update_attributes! update!update_attributes!298,0
    def update_column(name, value)update_column301,0
    def update_columns(attributes)update_columns321,0
    def increment(attribute, by = 1)increment341,0
    def increment!(attribute, by = 1, touch: nil)increment!353,0
    def decrement(attribute, by = 1)decrement364,0
    def decrement!(attribute, by = 1, touch: nil)decrement!374,0
    def toggle(attribute)toggle390,0
    def toggle!(attribute)toggle!399,0
    def reload(options = nil)reload451,0
    def touch(*names, time: nil)touch500,0
    def destroy_associationsdestroy_associations546,0
    def destroy_rowdestroy_row549,0
    def relation_for_destroyrelation_for_destroy553,0
    def create_or_update(*args, &block)create_or_update557,0
    def _update_record(attribute_names = self.attribute_names)_update_record565,0
    def _create_record(attribute_names = self.attribute_names)_create_record582,0
    def verify_readonly_attribute(name)verify_readonly_attribute595,0
    def _raise_record_not_destroyed_raise_record_not_destroyed599,0
    def belongs_to_touch_methodbelongs_to_touch_method606,0
    def _raise_readonly_record_error_raise_readonly_record_error610,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute.rb,3784
module ActiveRecordActiveRecord1,0
  class Attribute # :nodoc:Attribute2,0
  class Attribute # :nodoc:ActiveRecord::Attribute2,0
      def from_database(name, value, type)from_database4,0
      def from_user(name, value, type, original_attribute = nil)from_user8,0
      def with_cast_value(name, value, type)with_cast_value12,0
      def null(name)null16,0
      def uninitialized(name, type)uninitialized20,0
    attr_reader :name, :value_before_type_cast, :typename25,0
    attr_reader :name, :value_before_type_cast, :typevalue_before_type_cast25,0
    attr_reader :name, :value_before_type_cast, :typetype25,0
    def initialize(name, value_before_type_cast, type, original_attribute = nil)initialize29,0
    def valuevalue36,0
    def original_valueoriginal_value42,0
    def value_for_databasevalue_for_database50,0
    def changed?changed?54,0
    def changed_in_place?changed_in_place?58,0
    def forgetting_assignmentforgetting_assignment62,0
    def with_value_from_user(value)with_value_from_user66,0
    def with_value_from_database(value)with_value_from_database71,0
    def with_cast_value(value)with_cast_value75,0
    def with_type(type)with_type79,0
    def type_cast(*)type_cast87,0
    def initialized?initialized?91,0
    def came_from_user?came_from_user?95,0
    def has_been_read?has_been_read?99,0
    def ==(other)==103,0
    alias eql? ==eql?109,0
    def hashhash111,0
    def init_with(coder)init_with115,0
    def encode_with(coder)encode_with123,0
      attr_reader :original_attributeoriginal_attribute135,0
      alias_method :assigned?, :original_attributeassigned?136,0
      def original_value_for_databaseoriginal_value_for_database138,0
      def initialize_dup(other)initialize_dup147,0
      def changed_from_assignment?changed_from_assignment?153,0
      def _original_value_for_database_original_value_for_database157,0
      class FromDatabase < Attribute # :nodoc:FromDatabase161,0
      class FromDatabase < Attribute # :nodoc:ActiveRecord::Attribute::FromDatabase161,0
        def type_cast(value)type_cast162,0
        def _original_value_for_database_original_value_for_database166,0
      class FromUser < Attribute # :nodoc:FromUser171,0
      class FromUser < Attribute # :nodoc:ActiveRecord::Attribute::FromUser171,0
        def type_cast(value)type_cast172,0
        def came_from_user?came_from_user?176,0
      class WithCastValue < Attribute # :nodoc:WithCastValue181,0
      class WithCastValue < Attribute # :nodoc:ActiveRecord::Attribute::WithCastValue181,0
        def type_cast(value)type_cast182,0
        def changed_in_place?changed_in_place?186,0
      class Null < Attribute # :nodoc:Null191,0
      class Null < Attribute # :nodoc:ActiveRecord::Attribute::Null191,0
        def initialize(name)initialize192,0
        def type_cast(*)type_cast196,0
        def with_type(type)with_type200,0
        def with_value_from_database(value)with_value_from_database204,0
        alias_method :with_value_from_user, :with_value_from_databasewith_value_from_user207,0
      class Uninitialized < Attribute # :nodoc:Uninitialized210,0
      class Uninitialized < Attribute # :nodoc:ActiveRecord::Attribute::Uninitialized210,0
        UNINITIALIZED_ORIGINAL_VALUE = Object.newUNINITIALIZED_ORIGINAL_VALUE211,0
        UNINITIALIZED_ORIGINAL_VALUE = Object.newActiveRecord::Attribute::Uninitialized::UNINITIALIZED_ORIGINAL_VALUE211,0
        def initialize(name, type)initialize213,0
        def valuevalue217,0
        def original_valueoriginal_value223,0
        def value_for_databasevalue_for_database227,0
        def initialized?initialized?230,0
        def with_type(type)with_type234,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/explain_registry.rb,454
module ActiveRecordActiveRecord3,0
  class ExplainRegistry # :nodoc:ExplainRegistry12,0
  class ExplainRegistry # :nodoc:ActiveRecord::ExplainRegistry12,0
    attr_accessor :queries, :collectqueries15,0
    attr_accessor :queries, :collectqueries=15,0
    attr_accessor :queries, :collectcollect15,0
    attr_accessor :queries, :collectcollect=15,0
    def initializeinitialize17,0
    def collect?collect?21,0
    def resetreset25,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attributes.rb,709
module ActiveRecordActiveRecord3,0
  module AttributesAttributes5,0
  module AttributesActiveRecord::Attributes5,0
    module ClassMethodsClassMethods13,0
    module ClassMethodsActiveRecord::Attributes::ClassMethods13,0
      def attribute(name, cast_type = Type::Value.new, **options)attribute194,0
      def define_attribute(define_attribute222,0
      def load_schema! # :nodoc:load_schema!232,0
        NO_DEFAULT_PROVIDED = Object.new # :nodoc:NO_DEFAULT_PROVIDED245,0
        NO_DEFAULT_PROVIDED = Object.new # :nodoc:ActiveRecord::Attributes::ClassMethods::NO_DEFAULT_PROVIDED245,0
        def define_default_attribute(name, value, type, from_user:)define_default_attribute248,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/secure_token.rb,376
module ActiveRecordActiveRecord1,0
  module SecureTokenSecureToken2,0
  module SecureTokenActiveRecord::SecureToken2,0
    module ClassMethodsClassMethods5,0
    module ClassMethodsActiveRecord::SecureToken::ClassMethods5,0
      def has_secure_token(attribute = :token)has_secure_token26,0
      def generate_unique_secure_tokengenerate_unique_secure_token33,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/dynamic_matchers.rb,1475
module ActiveRecordActiveRecord2,0
  module DynamicMatchers #:nodoc:DynamicMatchers3,0
  module DynamicMatchers #:nodoc:ActiveRecord::DynamicMatchers3,0
    def respond_to_missing?(name, include_private = false)respond_to_missing?4,0
      def method_missing(name, *arguments, &block)method_missing15,0
      class MethodMethod26,0
      class MethodActiveRecord::DynamicMatchers::Method26,0
          attr_reader :matchersmatchers30,0
          def match(model, name)match32,0
          def patternpattern37,0
          def prefixprefix41,0
          def suffixsuffix45,0
        attr_reader :model, :name, :attribute_namesmodel50,0
        attr_reader :model, :name, :attribute_namesname50,0
        attr_reader :model, :name, :attribute_namesattribute_names50,0
        def initialize(model, name)initialize52,0
        def valid?valid?59,0
        def definedefine63,0
          def bodybody73,0
          def signaturesignature79,0
          def attributes_hashattributes_hash85,0
          def finderfinder89,0
      class FindBy < MethodFindBy94,0
      class FindBy < MethodActiveRecord::DynamicMatchers::FindBy94,0
        def self.prefixprefix97,0
        def finderfinder101,0
      class FindByBang < MethodFindByBang106,0
      class FindByBang < MethodActiveRecord::DynamicMatchers::FindByBang106,0
        def self.prefixprefix109,0
        def self.suffixsuffix113,0
        def finderfinder117,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/migration/join_table.rb,385
module ActiveRecordActiveRecord1,0
  class MigrationMigration2,0
  class MigrationActiveRecord::Migration2,0
    module JoinTable #:nodoc:JoinTable3,0
    module JoinTable #:nodoc:ActiveRecord::Migration::JoinTable3,0
        def find_join_table_name(table_1, table_2, options = {})find_join_table_name6,0
        def join_table_name(table_1, table_2)join_table_name10,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/migration/command_recorder.rb,2645
module ActiveRecordActiveRecord1,0
  class MigrationMigration2,0
  class MigrationActiveRecord::Migration2,0
    class CommandRecorderCommandRecorder30,0
    class CommandRecorderActiveRecord::Migration::CommandRecorder30,0
      ReversibleAndIrreversibleMethods = [:create_table, :create_join_table, :rename_table, :add_column, :remove_column,ReversibleAndIrreversibleMethods31,0
      ReversibleAndIrreversibleMethods = [:create_table, :create_join_table, :rename_table, :add_column, :remove_column,ActiveRecord::Migration::CommandRecorder::ReversibleAndIrreversibleMethods31,0
      attr_accessor :commands, :delegate, :revertingcommands40,0
      attr_accessor :commands, :delegate, :revertingcommands=40,0
      attr_accessor :commands, :delegate, :revertingdelegate40,0
      attr_accessor :commands, :delegate, :revertingdelegate=40,0
      attr_accessor :commands, :delegate, :revertingreverting40,0
      attr_accessor :commands, :delegate, :revertingreverting=40,0
      def initialize(delegate = nil)initialize42,0
      def revertrevert55,0
      def record(*command, &block)record69,0
      def inverse_of(command, args, &block)inverse_of84,0
      def respond_to_missing?(*args) # :nodoc:respond_to_missing?95,0
      alias :add_belongs_to :add_referenceadd_belongs_to106,0
      alias :remove_belongs_to :remove_referenceremove_belongs_to107,0
      def change_table(table_name, options = {}) # :nodoc:change_table109,0
        module StraightReversionsStraightReversions115,0
        module StraightReversionsActiveRecord::Migration::CommandRecorder::StraightReversions115,0
        def invert_drop_table(args, &block)invert_drop_table138,0
        def invert_rename_table(args)invert_rename_table145,0
        def invert_remove_column(args)invert_remove_column149,0
        def invert_rename_index(args)invert_rename_index154,0
        def invert_rename_column(args)invert_rename_column158,0
        def invert_add_index(args)invert_add_index162,0
        def invert_remove_index(args)invert_remove_index172,0
        alias :invert_add_belongs_to :invert_add_referenceinvert_add_belongs_to185,0
        alias :invert_remove_belongs_to :invert_remove_referenceinvert_remove_belongs_to186,0
        def invert_change_column_default(args)invert_change_column_default188,0
        def invert_change_column_null(args)invert_change_column_null198,0
        def invert_add_foreign_key(args)invert_add_foreign_key203,0
        def invert_remove_foreign_key(args)invert_remove_foreign_key218,0
        def method_missing(method, *args, &block)method_missing229,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/migration/compatibility.rb,2301
module ActiveRecordActiveRecord1,0
  class MigrationMigration2,0
  class MigrationActiveRecord::Migration2,0
    module Compatibility # :nodoc: allCompatibility3,0
    module Compatibility # :nodoc: allActiveRecord::Migration::Compatibility3,0
      def self.find(version)find4,0
      V5_1 = CurrentV5_114,0
      V5_1 = CurrentActiveRecord::Migration::Compatibility::V5_114,0
      class V5_0 < V5_1V5_016,0
      class V5_0 < V5_1ActiveRecord::Migration::Compatibility::V5_016,0
        module TableDefinitionTableDefinition17,0
        module TableDefinitionActiveRecord::Migration::Compatibility::V5_0::TableDefinition17,0
          def references(*args, **options)references18,0
          alias :belongs_to :referencesbelongs_to21,0
        def create_table(table_name, options = {})create_table24,0
        def change_table(table_name, options = {})change_table53,0
        def create_join_table(table_1, table_2, column_options: {}, **options)create_join_table63,0
        def add_reference(table_name, ref_name, **options)add_reference75,0
        alias :add_belongs_to :add_referenceadd_belongs_to78,0
          def compatible_table_definition(t)compatible_table_definition81,0
      class V4_2 < V5_0V4_289,0
      class V4_2 < V5_0ActiveRecord::Migration::Compatibility::V4_289,0
        module TableDefinitionTableDefinition90,0
        module TableDefinitionActiveRecord::Migration::Compatibility::V4_2::TableDefinition90,0
          def references(*, **options)references91,0
          alias :belongs_to :referencesbelongs_to95,0
          def timestamps(**options)timestamps97,0
        def create_table(table_name, options = {})create_table103,0
        def change_table(table_name, options = {})change_table113,0
        def add_reference(*, **options)add_reference123,0
        alias :add_belongs_to :add_referenceadd_belongs_to127,0
        def add_timestamps(_, **options)add_timestamps129,0
        def index_exists?(table_name, column_name, options = {})index_exists?134,0
        def remove_index(table_name, options = {})remove_index145,0
          def compatible_table_definition(t)compatible_table_definition152,0
          def index_name_for_remove(table_name, options = {})index_name_for_remove159,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/store.rb,2014
module ActiveRecordActiveRecord3,0
  module StoreStore70,0
  module StoreActiveRecord::Store70,0
    module ClassMethodsClassMethods79,0
    module ClassMethodsActiveRecord::Store::ClassMethods79,0
      def store(store_attribute, options = {})store80,0
      def store_accessor(store_attribute, *keys)store_accessor85,0
      def _store_accessors_module # :nodoc:_store_accessors_module107,0
      def stored_attributesstored_attributes115,0
      def read_store_attribute(store_attribute, key) # :doc:read_store_attribute125,0
      def write_store_attribute(store_attribute, key, value) # :doc:write_store_attribute130,0
      def store_accessor_for(store_attribute)store_accessor_for135,0
      class HashAccessor # :nodoc:HashAccessor139,0
      class HashAccessor # :nodoc:ActiveRecord::Store::HashAccessor139,0
        def self.read(object, attribute, key)read140,0
        def self.write(object, attribute, key, value)write145,0
        def self.prepare(object, attribute)prepare153,0
      class StringKeyedHashAccessor < HashAccessor # :nodoc:StringKeyedHashAccessor158,0
      class StringKeyedHashAccessor < HashAccessor # :nodoc:ActiveRecord::Store::StringKeyedHashAccessor158,0
        def self.read(object, attribute, key)read159,0
        def self.write(object, attribute, key, value)write163,0
      class IndifferentHashAccessor < ActiveRecord::Store::HashAccessor # :nodoc:IndifferentHashAccessor168,0
      class IndifferentHashAccessor < ActiveRecord::Store::HashAccessor # :nodoc:ActiveRecord::Store::IndifferentHashAccessor168,0
        def self.prepare(object, store_attribute)prepare169,0
      class IndifferentCoder # :nodoc:IndifferentCoder179,0
      class IndifferentCoder # :nodoc:ActiveRecord::Store::IndifferentCoder179,0
        def initialize(attr_name, coder_or_class_name)initialize180,0
        def dump(obj)dump189,0
        def load(yaml)load193,0
        def self.as_indifferent_hash(obj)as_indifferent_hash197,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/define_callbacks.rb,274
module ActiveRecordActiveRecord1,0
  module DefineCallbacksDefineCallbacks6,0
  module DefineCallbacksActiveRecord::DefineCallbacks6,0
    module ClassMethods # :nodoc:ClassMethods9,0
    module ClassMethods # :nodoc:ActiveRecord::DefineCallbacks::ClassMethods9,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/log_subscriber.rb,784
module ActiveRecordActiveRecord1,0
  class LogSubscriber < ActiveSupport::LogSubscriberLogSubscriber2,0
  class LogSubscriber < ActiveSupport::LogSubscriberActiveRecord::LogSubscriber2,0
    IGNORE_PAYLOAD_NAMES = ["SCHEMA", "EXPLAIN"]IGNORE_PAYLOAD_NAMES3,0
    IGNORE_PAYLOAD_NAMES = ["SCHEMA", "EXPLAIN"]ActiveRecord::LogSubscriber::IGNORE_PAYLOAD_NAMES3,0
    def self.runtime=(value)runtime=5,0
    def self.runtimeruntime9,0
    def self.reset_runtimereset_runtime13,0
    def sql(event)sql18,0
      def type_casted_binds(casted_binds)type_casted_binds45,0
      def render_bind(attr, value)render_bind49,0
      def colorize_payload_name(name, payload_name)colorize_payload_name59,0
      def sql_color(sql)sql_color67,0
      def loggerlogger88,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/relation.rb,4181
module ActiveRecordActiveRecord1,0
  class RelationRelation3,0
  class RelationActiveRecord::Relation3,0
    MULTI_VALUE_METHODS  = [:includes, :eager_load, :preload, :select, :group,MULTI_VALUE_METHODS4,0
    MULTI_VALUE_METHODS  = [:includes, :eager_load, :preload, :select, :group,ActiveRecord::Relation::MULTI_VALUE_METHODS4,0
    SINGLE_VALUE_METHODS = [:limit, :offset, :lock, :readonly, :reordering,SINGLE_VALUE_METHODS8,0
    SINGLE_VALUE_METHODS = [:limit, :offset, :lock, :readonly, :reordering,ActiveRecord::Relation::SINGLE_VALUE_METHODS8,0
    CLAUSE_METHODS = [:where, :having, :from]CLAUSE_METHODS10,0
    CLAUSE_METHODS = [:where, :having, :from]ActiveRecord::Relation::CLAUSE_METHODS10,0
    INVALID_METHODS_FOR_DELETE_ALL = [:limit, :distinct, :offset, :group, :having]INVALID_METHODS_FOR_DELETE_ALL11,0
    INVALID_METHODS_FOR_DELETE_ALL = [:limit, :distinct, :offset, :group, :having]ActiveRecord::Relation::INVALID_METHODS_FOR_DELETE_ALL11,0
    VALUE_METHODS = MULTI_VALUE_METHODS + SINGLE_VALUE_METHODS + CLAUSE_METHODSVALUE_METHODS13,0
    VALUE_METHODS = MULTI_VALUE_METHODS + SINGLE_VALUE_METHODS + CLAUSE_METHODSActiveRecord::Relation::VALUE_METHODS13,0
    attr_reader :table, :klass, :loaded, :predicate_buildertable18,0
    attr_reader :table, :klass, :loaded, :predicate_builderklass18,0
    attr_reader :table, :klass, :loaded, :predicate_builderloaded18,0
    attr_reader :table, :klass, :loaded, :predicate_builderpredicate_builder18,0
    alias :model :klassmodel19,0
    alias :loaded? :loadedloaded?20,0
    def initialize(klass, table, predicate_builder, values = {})initialize22,0
    def initialize_copy(other)initialize_copy31,0
    def insert(values) # :nodoc:insert36,0
    def _update_record(values, id, id_was) # :nodoc:_update_record70,0
    def substitute_values(values) # :nodoc:substitute_values92,0
    def arel_attribute(name) # :nodoc:arel_attribute104,0
    def new(*args, &block)new120,0
    alias build newbuild124,0
    def create(*args, &block)create145,0
    def create!(*args, &block)create!155,0
    def first_or_create(attributes = nil, &block) # :nodoc:first_or_create159,0
    def first_or_create!(attributes = nil, &block) # :nodoc:first_or_create!163,0
    def first_or_initialize(attributes = nil, &block) # :nodoc:first_or_initialize167,0
    def find_or_create_by(attributes, &block)find_or_create_by219,0
    def find_or_create_by!(attributes, &block)find_or_create_by!226,0
    def find_or_initialize_by(attributes, &block)find_or_initialize_by232,0
    def explainexplain245,0
    def to_ato_a250,0
    def records # :nodoc:records254,0
    def encode_with(coder)encode_with260,0
    def sizesize265,0
    def empty?empty?270,0
    def none?none?276,0
    def any?any?282,0
    def one?one?288,0
    def many?many?294,0
    def cache_key(timestamp_column = :updated_at)cache_key320,0
    def scopingscoping334,0
    def update_all(updates)update_all363,0
    def update(id = :all, attributes)update409,0
    def destroy_alldestroy_all443,0
    def destroy(id)destroy466,0
    def delete_alldelete_all492,0
    def delete(id_or_array)delete535,0
    def load(&block)load545,0
    def reloadreload552,0
    def resetreset557,0
    def to_sqlto_sql569,0
    def where_values_hash(relation_table_name = table_name)where_values_hash588,0
    def scope_for_createscope_for_create592,0
    def eager_loading?eager_loading?597,0
    def joined_includes_valuesjoined_includes_values607,0
    def ==(other)==612,0
    def pretty_print(q)pretty_print623,0
    def blank?blank?628,0
    def valuesvalues632,0
    def inspectinspect636,0
    def empty_scope? # :nodoc:empty_scope?645,0
    def has_limit_or_offset? # :nodoc:has_limit_or_offset?649,0
      def load_records(records)load_records655,0
      def has_join_values?has_join_values?662,0
      def exec_queries(&block)exec_queries666,0
      def build_preloaderbuild_preloader695,0
      def references_eager_loaded_tables?references_eager_loaded_tables?699,0
      def tables_in_string(string)tables_in_string716,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/fixture_set/file.rb,596
module ActiveRecordActiveRecord4,0
  class FixtureSetFixtureSet5,0
  class FixtureSetActiveRecord::FixtureSet5,0
    class File # :nodoc:File6,0
    class File # :nodoc:ActiveRecord::FixtureSet::File6,0
      def self.open(file)open13,0
      def initialize(file)initialize18,0
      def each(&block)each22,0
      def model_classmodel_class26,0
        def rowsrows31,0
        def config_rowconfig_row35,0
        def raw_rowsraw_rows46,0
        def prepare_erb(content)prepare_erb55,0
        def render(content)render61,0
        def validate(data)validate67,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/query_cache.rb,501
module ActiveRecordActiveRecord1,0
  class QueryCacheQueryCache3,0
  class QueryCacheActiveRecord::QueryCache3,0
    module ClassMethodsClassMethods4,0
    module ClassMethodsActiveRecord::QueryCache::ClassMethods4,0
      def cache(&block)cache7,0
      def uncached(&block)uncached17,0
    def self.runrun26,0
    def self.complete((caching_pool, caching_was_enabled))complete35,0
    def self.install_executor_hooks(executor = ActiveSupport::Executor)install_executor_hooks43,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_methods/serialization.rb,474
module ActiveRecordActiveRecord1,0
  module AttributeMethodsAttributeMethods2,0
  module AttributeMethodsActiveRecord::AttributeMethods2,0
    module SerializationSerialization3,0
    module SerializationActiveRecord::AttributeMethods::Serialization3,0
      module ClassMethodsClassMethods6,0
      module ClassMethodsActiveRecord::AttributeMethods::Serialization::ClassMethods6,0
        def serialize(attr_name, class_name_or_coder = Object)serialize48,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_methods/read.rb,690
module ActiveRecordActiveRecord1,0
  module AttributeMethodsAttributeMethods2,0
  module AttributeMethodsActiveRecord::AttributeMethods2,0
    module ReadRead3,0
    module ReadActiveRecord::AttributeMethods::Read3,0
      module ClassMethodsClassMethods6,0
      module ClassMethodsActiveRecord::AttributeMethods::Read::ClassMethods6,0
          def define_method_attribute(name)define_method_attribute27,0
      def read_attribute(attr_name, &block)read_attribute50,0
        def _read_attribute(attr_name, &block) # :nodoc_read_attribute66,0
        def _read_attribute(attr_name) # :nodoc:_read_attribute70,0
      alias :attribute :_read_attributeattribute75,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_methods/time_zone_conversion.rb,1160
module ActiveRecordActiveRecord1,0
  module AttributeMethodsAttributeMethods2,0
  module AttributeMethodsActiveRecord::AttributeMethods2,0
    module TimeZoneConversionTimeZoneConversion3,0
    module TimeZoneConversionActiveRecord::AttributeMethods::TimeZoneConversion3,0
      class TimeZoneConverter < DelegateClass(Type::Value) # :nodoc:TimeZoneConverter4,0
      class TimeZoneConverter < DelegateClass(Type::Value) # :nodoc:ActiveRecord::AttributeMethods::TimeZoneConversion::TimeZoneConverter4,0
        def deserialize(value)deserialize5,0
        def cast(value)cast9,0
          def convert_time_to_time_zone(value)convert_time_to_time_zone27,0
          def set_time_zone_without_conversion(value)set_time_zone_without_conversion39,0
          def map_avoiding_infinite_recursion(value)map_avoiding_infinite_recursion43,0
      module ClassMethodsClassMethods67,0
      module ClassMethodsActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods67,0
          def inherited(subclass)inherited70,0
          def create_time_zone_conversion_attribute?(name, cast_type)create_time_zone_conversion_attribute?84,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_methods/before_type_cast.rb,602
module ActiveRecordActiveRecord1,0
  module AttributeMethodsAttributeMethods2,0
  module AttributeMethodsActiveRecord::AttributeMethods2,0
    module BeforeTypeCastBeforeTypeCast26,0
    module BeforeTypeCastActiveRecord::AttributeMethods::BeforeTypeCast26,0
      def read_attribute_before_type_cast(attr_name)read_attribute_before_type_cast46,0
      def attributes_before_type_castattributes_before_type_cast60,0
        def attribute_before_type_cast(attribute_name)attribute_before_type_cast67,0
        def attribute_came_from_user?(attribute_name)attribute_came_from_user?71,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_methods/primary_key.rb,1557
module ActiveRecordActiveRecord3,0
  module AttributeMethodsAttributeMethods4,0
  module AttributeMethodsActiveRecord::AttributeMethods4,0
    module PrimaryKeyPrimaryKey5,0
    module PrimaryKeyActiveRecord::AttributeMethods::PrimaryKey5,0
      def to_keyto_key10,0
      def idid17,0
      def id=(value)id=25,0
      def id?id?31,0
      def id_before_type_castid_before_type_cast37,0
      def id_wasid_was43,0
      def id_in_databaseid_in_database48,0
        def attribute_method?(attr_name)attribute_method?55,0
        module ClassMethodsClassMethods59,0
        module ClassMethodsActiveRecord::AttributeMethods::PrimaryKey::ClassMethods59,0
          ID_ATTRIBUTE_METHODS = %w(id id= id? id_before_type_cast id_was id_in_database).to_setID_ATTRIBUTE_METHODS60,0
          ID_ATTRIBUTE_METHODS = %w(id id= id? id_before_type_cast id_was id_in_database).to_setActiveRecord::AttributeMethods::PrimaryKey::ClassMethods::ID_ATTRIBUTE_METHODS60,0
          def instance_method_already_implemented?(method_name)instance_method_already_implemented?62,0
          def dangerous_attribute_method?(method_name)dangerous_attribute_method?66,0
          def primary_keyprimary_key73,0
          def quoted_primary_keyquoted_primary_key80,0
          def reset_primary_key #:nodoc:reset_primary_key84,0
          def get_primary_key(base_name) #:nodoc:get_primary_key92,0
          def primary_key=(value)primary_key=122,0
            def suppress_composite_primary_key(pk)suppress_composite_primary_key130,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_methods/query.rb,344
module ActiveRecordActiveRecord1,0
  module AttributeMethodsAttributeMethods2,0
  module AttributeMethodsActiveRecord::AttributeMethods2,0
    module QueryQuery3,0
    module QueryActiveRecord::AttributeMethods::Query3,0
      def query_attribute(attr_name)query_attribute10,0
        def attribute?(attribute_name)attribute?35,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_methods/dirty.rb,3116
module ActiveRecordActiveRecord5,0
  module AttributeMethodsAttributeMethods6,0
  module AttributeMethodsActiveRecord::AttributeMethods6,0
    module DirtyDirty7,0
    module DirtyActiveRecord::AttributeMethods::Dirty7,0
      def save(*)save34,0
      def save!(*)save!42,0
      def reload(*)reload49,0
      def initialize_dup(other) # :nodoc:initialize_dup57,0
      def changes_internally_applied # :nodoc:changes_internally_applied65,0
      def changes_applied # :nodoc:changes_applied71,0
      def clear_changes_information # :nodoc:clear_changes_information78,0
      def raw_write_attribute(attr_name, *) # :nodoc:raw_write_attribute85,0
      def clear_attribute_changes(attr_names) # :nodoc:clear_attribute_changes91,0
      def changed_attributes # :nodoc:changed_attributes98,0
      def changes # :nodoc:changes109,0
      def previous_changes # :nodoc:previous_changes116,0
      def attribute_changed_in_place?(attr_name) # :nodoc:attribute_changed_in_place?128,0
      def saved_change_to_attribute?(attr_name, **options)saved_change_to_attribute?145,0
      def saved_change_to_attribute(attr_name)saved_change_to_attribute158,0
      def attribute_before_last_save(attr_name)attribute_before_last_save166,0
      def saved_changes?saved_changes?171,0
      def saved_changessaved_changes176,0
      def will_save_change_to_attribute?(attr_name, **options)will_save_change_to_attribute?181,0
      def attribute_change_to_be_saved(attr_name)attribute_change_to_be_saved186,0
      def attribute_in_database(attr_name)attribute_in_database191,0
      def has_changes_to_save?has_changes_to_save?196,0
      def changes_to_savechanges_to_save201,0
      def changed_attribute_names_to_savechanged_attribute_names_to_save206,0
      def attributes_in_databaseattributes_in_database211,0
      def attribute_was(*)attribute_was215,0
      def attribute_change(*)attribute_change220,0
      def attribute_changed?(*)attribute_changed?225,0
      def changed?(*)changed?230,0
      def changed(*)changed235,0
        def mutation_trackermutation_tracker242,0
        def emit_warning_if_needed(method_name, new_method_name)emit_warning_if_needed249,0
        def mutations_from_databasemutations_from_database261,0
        def changes_include?(attr_name)changes_include?268,0
        def clear_attribute_change(attr_name)clear_attribute_change272,0
        def attribute_will_change!(attr_name)attribute_will_change!277,0
        def _update_record(*)_update_record292,0
        def _create_record(*)_create_record296,0
        def keys_for_partial_writekeys_for_partial_write300,0
        def forget_attribute_assignmentsforget_attribute_assignments304,0
        def clear_mutation_trackersclear_mutation_trackers308,0
        def previous_mutation_trackerprevious_mutation_tracker314,0
        def mutations_before_last_savemutations_before_last_save318,0
        def cache_changed_attributescache_changed_attributes322,0
        def clear_changed_attributes_cacheclear_changed_attributes_cache329,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record/attribute_methods/write.rb,643
module ActiveRecordActiveRecord1,0
  module AttributeMethodsAttributeMethods2,0
  module AttributeMethodsActiveRecord::AttributeMethods2,0
    module WriteWrite3,0
    module WriteActiveRecord::AttributeMethods::Write3,0
      module ClassMethodsClassMethods10,0
      module ClassMethodsActiveRecord::AttributeMethods::Write::ClassMethods10,0
          def define_method_attribute=(name)define_method_attribute=13,0
      def write_attribute(attr_name, value)write_attribute31,0
      def raw_write_attribute(attr_name, value) # :nodoc:raw_write_attribute43,0
        def attribute=(attribute_name, value)attribute=51,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/active_record.rb,603
module ActiveRecordActiveRecord32,0
  module CodersCoders107,0
  module CodersActiveRecord::Coders107,0
  module AttributeMethodsAttributeMethods112,0
  module AttributeMethodsActiveRecord::AttributeMethods112,0
  module LockingLocking127,0
  module LockingActiveRecord::Locking127,0
  module ConnectionAdaptersConnectionAdapters136,0
  module ConnectionAdaptersActiveRecord::ConnectionAdapters136,0
  module ScopingScoping144,0
  module ScopingActiveRecord::Scoping144,0
  module TasksTasks153,0
  module TasksActiveRecord::Tasks153,0
  def self.eager_load!eager_load!165,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/rails/generators/active_record/migration.rb,530
module ActiveRecordActiveRecord3,0
  module Generators # :nodoc:Generators4,0
  module Generators # :nodoc:ActiveRecord::Generators4,0
    module MigrationMigration5,0
    module MigrationActiveRecord::Generators::Migration5,0
      module ClassMethodsClassMethods9,0
      module ClassMethodsActiveRecord::Generators::Migration::ClassMethods9,0
        def next_migration_number(dirname)next_migration_number11,0
        def primary_key_typeprimary_key_type19,0
        def db_migrate_pathdb_migrate_path24,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/rails/generators/active_record/model/model_generator.rb,783
module ActiveRecordActiveRecord3,0
  module Generators # :nodoc:Generators4,0
  module Generators # :nodoc:ActiveRecord::Generators4,0
    class ModelGenerator < Base # :nodoc:ModelGenerator5,0
    class ModelGenerator < Base # :nodoc:ActiveRecord::Generators::ModelGenerator5,0
      def create_migration_filecreate_migration_file17,0
      def create_model_filecreate_model_file23,0
      def create_module_filecreate_module_file28,0
        def attributes_with_indexattributes_with_index38,0
        def generate_application_recordgenerate_application_record43,0
        def parent_class_nameparent_class_name50,0
        def application_record_exist?application_record_exist?54,0
        def application_record_file_nameapplication_record_file_name60,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/rails/generators/active_record/migration/migration_generator.rb,859
module ActiveRecordActiveRecord3,0
  module Generators # :nodoc:Generators4,0
  module Generators # :nodoc:ActiveRecord::Generators4,0
    class MigrationGenerator < Base # :nodoc:MigrationGenerator5,0
    class MigrationGenerator < Base # :nodoc:ActiveRecord::Generators::MigrationGenerator5,0
      def create_migration_filecreate_migration_file10,0
        attr_reader :migration_action, :join_tablesmigration_action19,0
        attr_reader :migration_action, :join_tablesjoin_tables19,0
        def set_local_assigns!set_local_assigns!26,0
        def set_index_namesset_index_names45,0
        def index_name_for(attribute)index_name_for51,0
        def attributes_with_indexattributes_with_index59,0
        def validate_file_name!validate_file_name!65,0
        def normalize_table_name(_table_name)normalize_table_name71,0

/Users/patricko/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activerecord-5.1.5/lib/rails/generators/active_record.rb,337
module ActiveRecordActiveRecord6,0
  module Generators # :nodoc:Generators7,0
  module Generators # :nodoc:ActiveRecord::Generators7,0
    class Base < Rails::Generators::NamedBase # :nodoc:Base8,0
    class Base < Rails::Generators::NamedBase # :nodoc:ActiveRecord::Generators::Base8,0
      def self.base_rootbase_root12,0
